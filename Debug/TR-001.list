
TR-001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bacc  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  0800bd9c  0800bd9c  0000cd9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bf04  0800bf04  0000cf04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bf0c  0800bf0c  0000cf0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800bf10  0800bf10  0000cf10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000070  24000000  0800bf14  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000070  0800bf84  0000d070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000d0  0800bfe4  0000d0d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004584  24000130  0800c044  0000d130  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240046b4  0800c044  0000d6b4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000d130  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029cb7  00000000  00000000  0000d15e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e3c  00000000  00000000  00036e15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f68  00000000  00000000  0003bc58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001877  00000000  00000000  0003dbc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039936  00000000  00000000  0003f437  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b256  00000000  00000000  00078d6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00168cba  00000000  00000000  000a3fc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0020cc7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008bdc  00000000  00000000  0020ccc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  0021589c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000130 	.word	0x24000130
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800bd84 	.word	0x0800bd84

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000134 	.word	0x24000134
 800030c:	0800bd84 	.word	0x0800bd84

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96a 	b.w	80005fc <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	460c      	mov	r4, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14e      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034c:	4694      	mov	ip, r2
 800034e:	458c      	cmp	ip, r1
 8000350:	4686      	mov	lr, r0
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	d962      	bls.n	800041e <__udivmoddi4+0xde>
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0320 	rsb	r3, r2, #32
 800035e:	4091      	lsls	r1, r2
 8000360:	fa20 f303 	lsr.w	r3, r0, r3
 8000364:	fa0c fc02 	lsl.w	ip, ip, r2
 8000368:	4319      	orrs	r1, r3
 800036a:	fa00 fe02 	lsl.w	lr, r0, r2
 800036e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000372:	fa1f f68c 	uxth.w	r6, ip
 8000376:	fbb1 f4f7 	udiv	r4, r1, r7
 800037a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037e:	fb07 1114 	mls	r1, r7, r4, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb04 f106 	mul.w	r1, r4, r6
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f104 30ff 	add.w	r0, r4, #4294967295
 8000396:	f080 8112 	bcs.w	80005be <__udivmoddi4+0x27e>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 810f 	bls.w	80005be <__udivmoddi4+0x27e>
 80003a0:	3c02      	subs	r4, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a59      	subs	r1, r3, r1
 80003a6:	fa1f f38e 	uxth.w	r3, lr
 80003aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ae:	fb07 1110 	mls	r1, r7, r0, r1
 80003b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b6:	fb00 f606 	mul.w	r6, r0, r6
 80003ba:	429e      	cmp	r6, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x94>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c6:	f080 80fc 	bcs.w	80005c2 <__udivmoddi4+0x282>
 80003ca:	429e      	cmp	r6, r3
 80003cc:	f240 80f9 	bls.w	80005c2 <__udivmoddi4+0x282>
 80003d0:	4463      	add	r3, ip
 80003d2:	3802      	subs	r0, #2
 80003d4:	1b9b      	subs	r3, r3, r6
 80003d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003da:	2100      	movs	r1, #0
 80003dc:	b11d      	cbz	r5, 80003e6 <__udivmoddi4+0xa6>
 80003de:	40d3      	lsrs	r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	e9c5 3200 	strd	r3, r2, [r5]
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d905      	bls.n	80003fa <__udivmoddi4+0xba>
 80003ee:	b10d      	cbz	r5, 80003f4 <__udivmoddi4+0xb4>
 80003f0:	e9c5 0100 	strd	r0, r1, [r5]
 80003f4:	2100      	movs	r1, #0
 80003f6:	4608      	mov	r0, r1
 80003f8:	e7f5      	b.n	80003e6 <__udivmoddi4+0xa6>
 80003fa:	fab3 f183 	clz	r1, r3
 80003fe:	2900      	cmp	r1, #0
 8000400:	d146      	bne.n	8000490 <__udivmoddi4+0x150>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d302      	bcc.n	800040c <__udivmoddi4+0xcc>
 8000406:	4290      	cmp	r0, r2
 8000408:	f0c0 80f0 	bcc.w	80005ec <__udivmoddi4+0x2ac>
 800040c:	1a86      	subs	r6, r0, r2
 800040e:	eb64 0303 	sbc.w	r3, r4, r3
 8000412:	2001      	movs	r0, #1
 8000414:	2d00      	cmp	r5, #0
 8000416:	d0e6      	beq.n	80003e6 <__udivmoddi4+0xa6>
 8000418:	e9c5 6300 	strd	r6, r3, [r5]
 800041c:	e7e3      	b.n	80003e6 <__udivmoddi4+0xa6>
 800041e:	2a00      	cmp	r2, #0
 8000420:	f040 8090 	bne.w	8000544 <__udivmoddi4+0x204>
 8000424:	eba1 040c 	sub.w	r4, r1, ip
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa1f f78c 	uxth.w	r7, ip
 8000430:	2101      	movs	r1, #1
 8000432:	fbb4 f6f8 	udiv	r6, r4, r8
 8000436:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800043a:	fb08 4416 	mls	r4, r8, r6, r4
 800043e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000442:	fb07 f006 	mul.w	r0, r7, r6
 8000446:	4298      	cmp	r0, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x11c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x11a>
 8000454:	4298      	cmp	r0, r3
 8000456:	f200 80cd 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 800045a:	4626      	mov	r6, r4
 800045c:	1a1c      	subs	r4, r3, r0
 800045e:	fa1f f38e 	uxth.w	r3, lr
 8000462:	fbb4 f0f8 	udiv	r0, r4, r8
 8000466:	fb08 4410 	mls	r4, r8, r0, r4
 800046a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046e:	fb00 f707 	mul.w	r7, r0, r7
 8000472:	429f      	cmp	r7, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x148>
 8000476:	eb1c 0303 	adds.w	r3, ip, r3
 800047a:	f100 34ff 	add.w	r4, r0, #4294967295
 800047e:	d202      	bcs.n	8000486 <__udivmoddi4+0x146>
 8000480:	429f      	cmp	r7, r3
 8000482:	f200 80b0 	bhi.w	80005e6 <__udivmoddi4+0x2a6>
 8000486:	4620      	mov	r0, r4
 8000488:	1bdb      	subs	r3, r3, r7
 800048a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0x9c>
 8000490:	f1c1 0620 	rsb	r6, r1, #32
 8000494:	408b      	lsls	r3, r1
 8000496:	fa22 f706 	lsr.w	r7, r2, r6
 800049a:	431f      	orrs	r7, r3
 800049c:	fa20 fc06 	lsr.w	ip, r0, r6
 80004a0:	fa04 f301 	lsl.w	r3, r4, r1
 80004a4:	ea43 030c 	orr.w	r3, r3, ip
 80004a8:	40f4      	lsrs	r4, r6
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	0c38      	lsrs	r0, r7, #16
 80004b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b4:	fbb4 fef0 	udiv	lr, r4, r0
 80004b8:	fa1f fc87 	uxth.w	ip, r7
 80004bc:	fb00 441e 	mls	r4, r0, lr, r4
 80004c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c4:	fb0e f90c 	mul.w	r9, lr, ip
 80004c8:	45a1      	cmp	r9, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	d90a      	bls.n	80004e6 <__udivmoddi4+0x1a6>
 80004d0:	193c      	adds	r4, r7, r4
 80004d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d6:	f080 8084 	bcs.w	80005e2 <__udivmoddi4+0x2a2>
 80004da:	45a1      	cmp	r9, r4
 80004dc:	f240 8081 	bls.w	80005e2 <__udivmoddi4+0x2a2>
 80004e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e4:	443c      	add	r4, r7
 80004e6:	eba4 0409 	sub.w	r4, r4, r9
 80004ea:	fa1f f983 	uxth.w	r9, r3
 80004ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80004f2:	fb00 4413 	mls	r4, r0, r3, r4
 80004f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fe:	45a4      	cmp	ip, r4
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x1d2>
 8000502:	193c      	adds	r4, r7, r4
 8000504:	f103 30ff 	add.w	r0, r3, #4294967295
 8000508:	d267      	bcs.n	80005da <__udivmoddi4+0x29a>
 800050a:	45a4      	cmp	ip, r4
 800050c:	d965      	bls.n	80005da <__udivmoddi4+0x29a>
 800050e:	3b02      	subs	r3, #2
 8000510:	443c      	add	r4, r7
 8000512:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000516:	fba0 9302 	umull	r9, r3, r0, r2
 800051a:	eba4 040c 	sub.w	r4, r4, ip
 800051e:	429c      	cmp	r4, r3
 8000520:	46ce      	mov	lr, r9
 8000522:	469c      	mov	ip, r3
 8000524:	d351      	bcc.n	80005ca <__udivmoddi4+0x28a>
 8000526:	d04e      	beq.n	80005c6 <__udivmoddi4+0x286>
 8000528:	b155      	cbz	r5, 8000540 <__udivmoddi4+0x200>
 800052a:	ebb8 030e 	subs.w	r3, r8, lr
 800052e:	eb64 040c 	sbc.w	r4, r4, ip
 8000532:	fa04 f606 	lsl.w	r6, r4, r6
 8000536:	40cb      	lsrs	r3, r1
 8000538:	431e      	orrs	r6, r3
 800053a:	40cc      	lsrs	r4, r1
 800053c:	e9c5 6400 	strd	r6, r4, [r5]
 8000540:	2100      	movs	r1, #0
 8000542:	e750      	b.n	80003e6 <__udivmoddi4+0xa6>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f103 	lsr.w	r1, r0, r3
 800054c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000550:	fa24 f303 	lsr.w	r3, r4, r3
 8000554:	4094      	lsls	r4, r2
 8000556:	430c      	orrs	r4, r1
 8000558:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800055c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000560:	fa1f f78c 	uxth.w	r7, ip
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3110 	mls	r1, r8, r0, r3
 800056c:	0c23      	lsrs	r3, r4, #16
 800056e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000572:	fb00 f107 	mul.w	r1, r0, r7
 8000576:	4299      	cmp	r1, r3
 8000578:	d908      	bls.n	800058c <__udivmoddi4+0x24c>
 800057a:	eb1c 0303 	adds.w	r3, ip, r3
 800057e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000582:	d22c      	bcs.n	80005de <__udivmoddi4+0x29e>
 8000584:	4299      	cmp	r1, r3
 8000586:	d92a      	bls.n	80005de <__udivmoddi4+0x29e>
 8000588:	3802      	subs	r0, #2
 800058a:	4463      	add	r3, ip
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b2a4      	uxth	r4, r4
 8000590:	fbb3 f1f8 	udiv	r1, r3, r8
 8000594:	fb08 3311 	mls	r3, r8, r1, r3
 8000598:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800059c:	fb01 f307 	mul.w	r3, r1, r7
 80005a0:	42a3      	cmp	r3, r4
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x276>
 80005a4:	eb1c 0404 	adds.w	r4, ip, r4
 80005a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005ac:	d213      	bcs.n	80005d6 <__udivmoddi4+0x296>
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	d911      	bls.n	80005d6 <__udivmoddi4+0x296>
 80005b2:	3902      	subs	r1, #2
 80005b4:	4464      	add	r4, ip
 80005b6:	1ae4      	subs	r4, r4, r3
 80005b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005bc:	e739      	b.n	8000432 <__udivmoddi4+0xf2>
 80005be:	4604      	mov	r4, r0
 80005c0:	e6f0      	b.n	80003a4 <__udivmoddi4+0x64>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e706      	b.n	80003d4 <__udivmoddi4+0x94>
 80005c6:	45c8      	cmp	r8, r9
 80005c8:	d2ae      	bcs.n	8000528 <__udivmoddi4+0x1e8>
 80005ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80005d2:	3801      	subs	r0, #1
 80005d4:	e7a8      	b.n	8000528 <__udivmoddi4+0x1e8>
 80005d6:	4631      	mov	r1, r6
 80005d8:	e7ed      	b.n	80005b6 <__udivmoddi4+0x276>
 80005da:	4603      	mov	r3, r0
 80005dc:	e799      	b.n	8000512 <__udivmoddi4+0x1d2>
 80005de:	4630      	mov	r0, r6
 80005e0:	e7d4      	b.n	800058c <__udivmoddi4+0x24c>
 80005e2:	46d6      	mov	lr, sl
 80005e4:	e77f      	b.n	80004e6 <__udivmoddi4+0x1a6>
 80005e6:	4463      	add	r3, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e74d      	b.n	8000488 <__udivmoddi4+0x148>
 80005ec:	4606      	mov	r6, r0
 80005ee:	4623      	mov	r3, r4
 80005f0:	4608      	mov	r0, r1
 80005f2:	e70f      	b.n	8000414 <__udivmoddi4+0xd4>
 80005f4:	3e02      	subs	r6, #2
 80005f6:	4463      	add	r3, ip
 80005f8:	e730      	b.n	800045c <__udivmoddi4+0x11c>
 80005fa:	bf00      	nop

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000604:	4b1e      	ldr	r3, [pc, #120]	@ (8000680 <MX_ETH_Init+0x80>)
 8000606:	4a1f      	ldr	r2, [pc, #124]	@ (8000684 <MX_ETH_Init+0x84>)
 8000608:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800060a:	4b1f      	ldr	r3, [pc, #124]	@ (8000688 <MX_ETH_Init+0x88>)
 800060c:	2200      	movs	r2, #0
 800060e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000610:	4b1d      	ldr	r3, [pc, #116]	@ (8000688 <MX_ETH_Init+0x88>)
 8000612:	2280      	movs	r2, #128	@ 0x80
 8000614:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000616:	4b1c      	ldr	r3, [pc, #112]	@ (8000688 <MX_ETH_Init+0x88>)
 8000618:	22e1      	movs	r2, #225	@ 0xe1
 800061a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800061c:	4b1a      	ldr	r3, [pc, #104]	@ (8000688 <MX_ETH_Init+0x88>)
 800061e:	2200      	movs	r2, #0
 8000620:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000622:	4b19      	ldr	r3, [pc, #100]	@ (8000688 <MX_ETH_Init+0x88>)
 8000624:	2200      	movs	r2, #0
 8000626:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000628:	4b17      	ldr	r3, [pc, #92]	@ (8000688 <MX_ETH_Init+0x88>)
 800062a:	2200      	movs	r2, #0
 800062c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800062e:	4b14      	ldr	r3, [pc, #80]	@ (8000680 <MX_ETH_Init+0x80>)
 8000630:	4a15      	ldr	r2, [pc, #84]	@ (8000688 <MX_ETH_Init+0x88>)
 8000632:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000634:	4b12      	ldr	r3, [pc, #72]	@ (8000680 <MX_ETH_Init+0x80>)
 8000636:	2201      	movs	r2, #1
 8000638:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800063a:	4b11      	ldr	r3, [pc, #68]	@ (8000680 <MX_ETH_Init+0x80>)
 800063c:	4a13      	ldr	r2, [pc, #76]	@ (800068c <MX_ETH_Init+0x8c>)
 800063e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000640:	4b0f      	ldr	r3, [pc, #60]	@ (8000680 <MX_ETH_Init+0x80>)
 8000642:	4a13      	ldr	r2, [pc, #76]	@ (8000690 <MX_ETH_Init+0x90>)
 8000644:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000646:	4b0e      	ldr	r3, [pc, #56]	@ (8000680 <MX_ETH_Init+0x80>)
 8000648:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800064c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800064e:	480c      	ldr	r0, [pc, #48]	@ (8000680 <MX_ETH_Init+0x80>)
 8000650:	f002 f8d0 	bl	80027f4 <HAL_ETH_Init>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800065a:	f000 fcc7 	bl	8000fec <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800065e:	2238      	movs	r2, #56	@ 0x38
 8000660:	2100      	movs	r1, #0
 8000662:	480c      	ldr	r0, [pc, #48]	@ (8000694 <MX_ETH_Init+0x94>)
 8000664:	f00b f876 	bl	800b754 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000668:	4b0a      	ldr	r3, [pc, #40]	@ (8000694 <MX_ETH_Init+0x94>)
 800066a:	2221      	movs	r2, #33	@ 0x21
 800066c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800066e:	4b09      	ldr	r3, [pc, #36]	@ (8000694 <MX_ETH_Init+0x94>)
 8000670:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000674:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000676:	4b07      	ldr	r3, [pc, #28]	@ (8000694 <MX_ETH_Init+0x94>)
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	24000184 	.word	0x24000184
 8000684:	40028000 	.word	0x40028000
 8000688:	24000234 	.word	0x24000234
 800068c:	240000d0 	.word	0x240000d0
 8000690:	24000070 	.word	0x24000070
 8000694:	2400014c 	.word	0x2400014c

08000698 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08e      	sub	sp, #56	@ 0x38
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a59      	ldr	r2, [pc, #356]	@ (800081c <HAL_ETH_MspInit+0x184>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	f040 80ab 	bne.w	8000812 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80006bc:	4b58      	ldr	r3, [pc, #352]	@ (8000820 <HAL_ETH_MspInit+0x188>)
 80006be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006c2:	4a57      	ldr	r2, [pc, #348]	@ (8000820 <HAL_ETH_MspInit+0x188>)
 80006c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80006c8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80006cc:	4b54      	ldr	r3, [pc, #336]	@ (8000820 <HAL_ETH_MspInit+0x188>)
 80006ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80006d6:	623b      	str	r3, [r7, #32]
 80006d8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80006da:	4b51      	ldr	r3, [pc, #324]	@ (8000820 <HAL_ETH_MspInit+0x188>)
 80006dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006e0:	4a4f      	ldr	r2, [pc, #316]	@ (8000820 <HAL_ETH_MspInit+0x188>)
 80006e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80006e6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80006ea:	4b4d      	ldr	r3, [pc, #308]	@ (8000820 <HAL_ETH_MspInit+0x188>)
 80006ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80006f4:	61fb      	str	r3, [r7, #28]
 80006f6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80006f8:	4b49      	ldr	r3, [pc, #292]	@ (8000820 <HAL_ETH_MspInit+0x188>)
 80006fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006fe:	4a48      	ldr	r2, [pc, #288]	@ (8000820 <HAL_ETH_MspInit+0x188>)
 8000700:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000704:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000708:	4b45      	ldr	r3, [pc, #276]	@ (8000820 <HAL_ETH_MspInit+0x188>)
 800070a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800070e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000712:	61bb      	str	r3, [r7, #24]
 8000714:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000716:	4b42      	ldr	r3, [pc, #264]	@ (8000820 <HAL_ETH_MspInit+0x188>)
 8000718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800071c:	4a40      	ldr	r2, [pc, #256]	@ (8000820 <HAL_ETH_MspInit+0x188>)
 800071e:	f043 0304 	orr.w	r3, r3, #4
 8000722:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000726:	4b3e      	ldr	r3, [pc, #248]	@ (8000820 <HAL_ETH_MspInit+0x188>)
 8000728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800072c:	f003 0304 	and.w	r3, r3, #4
 8000730:	617b      	str	r3, [r7, #20]
 8000732:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000734:	4b3a      	ldr	r3, [pc, #232]	@ (8000820 <HAL_ETH_MspInit+0x188>)
 8000736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800073a:	4a39      	ldr	r2, [pc, #228]	@ (8000820 <HAL_ETH_MspInit+0x188>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000744:	4b36      	ldr	r3, [pc, #216]	@ (8000820 <HAL_ETH_MspInit+0x188>)
 8000746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	613b      	str	r3, [r7, #16]
 8000750:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000752:	4b33      	ldr	r3, [pc, #204]	@ (8000820 <HAL_ETH_MspInit+0x188>)
 8000754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000758:	4a31      	ldr	r2, [pc, #196]	@ (8000820 <HAL_ETH_MspInit+0x188>)
 800075a:	f043 0302 	orr.w	r3, r3, #2
 800075e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000762:	4b2f      	ldr	r3, [pc, #188]	@ (8000820 <HAL_ETH_MspInit+0x188>)
 8000764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000768:	f003 0302 	and.w	r3, r3, #2
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000770:	4b2b      	ldr	r3, [pc, #172]	@ (8000820 <HAL_ETH_MspInit+0x188>)
 8000772:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000776:	4a2a      	ldr	r2, [pc, #168]	@ (8000820 <HAL_ETH_MspInit+0x188>)
 8000778:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800077c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000780:	4b27      	ldr	r3, [pc, #156]	@ (8000820 <HAL_ETH_MspInit+0x188>)
 8000782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000786:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800078e:	2332      	movs	r3, #50	@ 0x32
 8000790:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000792:	2302      	movs	r3, #2
 8000794:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079a:	2300      	movs	r3, #0
 800079c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800079e:	230b      	movs	r3, #11
 80007a0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007a6:	4619      	mov	r1, r3
 80007a8:	481e      	ldr	r0, [pc, #120]	@ (8000824 <HAL_ETH_MspInit+0x18c>)
 80007aa:	f002 ffbb 	bl	8003724 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80007ae:	2386      	movs	r3, #134	@ 0x86
 80007b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b2:	2302      	movs	r3, #2
 80007b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ba:	2300      	movs	r3, #0
 80007bc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007be:	230b      	movs	r3, #11
 80007c0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007c6:	4619      	mov	r1, r3
 80007c8:	4817      	ldr	r0, [pc, #92]	@ (8000828 <HAL_ETH_MspInit+0x190>)
 80007ca:	f002 ffab 	bl	8003724 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80007ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d4:	2302      	movs	r3, #2
 80007d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007dc:	2300      	movs	r3, #0
 80007de:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007e0:	230b      	movs	r3, #11
 80007e2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80007e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007e8:	4619      	mov	r1, r3
 80007ea:	4810      	ldr	r0, [pc, #64]	@ (800082c <HAL_ETH_MspInit+0x194>)
 80007ec:	f002 ff9a 	bl	8003724 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007f0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80007f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f6:	2302      	movs	r3, #2
 80007f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fe:	2300      	movs	r3, #0
 8000800:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000802:	230b      	movs	r3, #11
 8000804:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000806:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800080a:	4619      	mov	r1, r3
 800080c:	4808      	ldr	r0, [pc, #32]	@ (8000830 <HAL_ETH_MspInit+0x198>)
 800080e:	f002 ff89 	bl	8003724 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000812:	bf00      	nop
 8000814:	3738      	adds	r7, #56	@ 0x38
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40028000 	.word	0x40028000
 8000820:	58024400 	.word	0x58024400
 8000824:	58020800 	.word	0x58020800
 8000828:	58020000 	.word	0x58020000
 800082c:	58020400 	.word	0x58020400
 8000830:	58021800 	.word	0x58021800

08000834 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000838:	4b2e      	ldr	r3, [pc, #184]	@ (80008f4 <MX_FDCAN1_Init+0xc0>)
 800083a:	4a2f      	ldr	r2, [pc, #188]	@ (80008f8 <MX_FDCAN1_Init+0xc4>)
 800083c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800083e:	4b2d      	ldr	r3, [pc, #180]	@ (80008f4 <MX_FDCAN1_Init+0xc0>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000844:	4b2b      	ldr	r3, [pc, #172]	@ (80008f4 <MX_FDCAN1_Init+0xc0>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800084a:	4b2a      	ldr	r3, [pc, #168]	@ (80008f4 <MX_FDCAN1_Init+0xc0>)
 800084c:	2200      	movs	r2, #0
 800084e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000850:	4b28      	ldr	r3, [pc, #160]	@ (80008f4 <MX_FDCAN1_Init+0xc0>)
 8000852:	2200      	movs	r2, #0
 8000854:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000856:	4b27      	ldr	r3, [pc, #156]	@ (80008f4 <MX_FDCAN1_Init+0xc0>)
 8000858:	2200      	movs	r2, #0
 800085a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 800085c:	4b25      	ldr	r3, [pc, #148]	@ (80008f4 <MX_FDCAN1_Init+0xc0>)
 800085e:	2210      	movs	r2, #16
 8000860:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000862:	4b24      	ldr	r3, [pc, #144]	@ (80008f4 <MX_FDCAN1_Init+0xc0>)
 8000864:	2201      	movs	r2, #1
 8000866:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000868:	4b22      	ldr	r3, [pc, #136]	@ (80008f4 <MX_FDCAN1_Init+0xc0>)
 800086a:	2202      	movs	r2, #2
 800086c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800086e:	4b21      	ldr	r3, [pc, #132]	@ (80008f4 <MX_FDCAN1_Init+0xc0>)
 8000870:	2202      	movs	r2, #2
 8000872:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000874:	4b1f      	ldr	r3, [pc, #124]	@ (80008f4 <MX_FDCAN1_Init+0xc0>)
 8000876:	2201      	movs	r2, #1
 8000878:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800087a:	4b1e      	ldr	r3, [pc, #120]	@ (80008f4 <MX_FDCAN1_Init+0xc0>)
 800087c:	2201      	movs	r2, #1
 800087e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000880:	4b1c      	ldr	r3, [pc, #112]	@ (80008f4 <MX_FDCAN1_Init+0xc0>)
 8000882:	2201      	movs	r2, #1
 8000884:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000886:	4b1b      	ldr	r3, [pc, #108]	@ (80008f4 <MX_FDCAN1_Init+0xc0>)
 8000888:	2201      	movs	r2, #1
 800088a:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 800088c:	4b19      	ldr	r3, [pc, #100]	@ (80008f4 <MX_FDCAN1_Init+0xc0>)
 800088e:	2200      	movs	r2, #0
 8000890:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000892:	4b18      	ldr	r3, [pc, #96]	@ (80008f4 <MX_FDCAN1_Init+0xc0>)
 8000894:	2200      	movs	r2, #0
 8000896:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000898:	4b16      	ldr	r3, [pc, #88]	@ (80008f4 <MX_FDCAN1_Init+0xc0>)
 800089a:	2200      	movs	r2, #0
 800089c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 800089e:	4b15      	ldr	r3, [pc, #84]	@ (80008f4 <MX_FDCAN1_Init+0xc0>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80008a4:	4b13      	ldr	r3, [pc, #76]	@ (80008f4 <MX_FDCAN1_Init+0xc0>)
 80008a6:	2204      	movs	r2, #4
 80008a8:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80008aa:	4b12      	ldr	r3, [pc, #72]	@ (80008f4 <MX_FDCAN1_Init+0xc0>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80008b0:	4b10      	ldr	r3, [pc, #64]	@ (80008f4 <MX_FDCAN1_Init+0xc0>)
 80008b2:	2204      	movs	r2, #4
 80008b4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80008b6:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <MX_FDCAN1_Init+0xc0>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80008bc:	4b0d      	ldr	r3, [pc, #52]	@ (80008f4 <MX_FDCAN1_Init+0xc0>)
 80008be:	2204      	movs	r2, #4
 80008c0:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80008c2:	4b0c      	ldr	r3, [pc, #48]	@ (80008f4 <MX_FDCAN1_Init+0xc0>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80008c8:	4b0a      	ldr	r3, [pc, #40]	@ (80008f4 <MX_FDCAN1_Init+0xc0>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 80008ce:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <MX_FDCAN1_Init+0xc0>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80008d4:	4b07      	ldr	r3, [pc, #28]	@ (80008f4 <MX_FDCAN1_Init+0xc0>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80008da:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <MX_FDCAN1_Init+0xc0>)
 80008dc:	2204      	movs	r2, #4
 80008de:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80008e0:	4804      	ldr	r0, [pc, #16]	@ (80008f4 <MX_FDCAN1_Init+0xc0>)
 80008e2:	f002 fbbb 	bl	800305c <HAL_FDCAN_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 80008ec:	f000 fb7e 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	2400023c 	.word	0x2400023c
 80008f8:	4000a000 	.word	0x4000a000

080008fc <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b0b8      	sub	sp, #224	@ 0xe0
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000904:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000914:	f107 0310 	add.w	r3, r7, #16
 8000918:	22b8      	movs	r2, #184	@ 0xb8
 800091a:	2100      	movs	r1, #0
 800091c:	4618      	mov	r0, r3
 800091e:	f00a ff19 	bl	800b754 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a26      	ldr	r2, [pc, #152]	@ (80009c0 <HAL_FDCAN_MspInit+0xc4>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d145      	bne.n	80009b8 <HAL_FDCAN_MspInit+0xbc>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800092c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000930:	f04f 0300 	mov.w	r3, #0
 8000934:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000938:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800093c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800093e:	f107 0310 	add.w	r3, r7, #16
 8000942:	4618      	mov	r0, r3
 8000944:	f005 fc16 	bl	8006174 <HAL_RCCEx_PeriphCLKConfig>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 800094e:	f000 fb4d 	bl	8000fec <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000952:	4b1c      	ldr	r3, [pc, #112]	@ (80009c4 <HAL_FDCAN_MspInit+0xc8>)
 8000954:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000958:	4a1a      	ldr	r2, [pc, #104]	@ (80009c4 <HAL_FDCAN_MspInit+0xc8>)
 800095a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800095e:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8000962:	4b18      	ldr	r3, [pc, #96]	@ (80009c4 <HAL_FDCAN_MspInit+0xc8>)
 8000964:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000968:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000970:	4b14      	ldr	r3, [pc, #80]	@ (80009c4 <HAL_FDCAN_MspInit+0xc8>)
 8000972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000976:	4a13      	ldr	r2, [pc, #76]	@ (80009c4 <HAL_FDCAN_MspInit+0xc8>)
 8000978:	f043 0308 	orr.w	r3, r3, #8
 800097c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000980:	4b10      	ldr	r3, [pc, #64]	@ (80009c4 <HAL_FDCAN_MspInit+0xc8>)
 8000982:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000986:	f003 0308 	and.w	r3, r3, #8
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800098e:	2303      	movs	r3, #3
 8000990:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000994:	2302      	movs	r3, #2
 8000996:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a0:	2300      	movs	r3, #0
 80009a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80009a6:	2309      	movs	r3, #9
 80009a8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ac:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80009b0:	4619      	mov	r1, r3
 80009b2:	4805      	ldr	r0, [pc, #20]	@ (80009c8 <HAL_FDCAN_MspInit+0xcc>)
 80009b4:	f002 feb6 	bl	8003724 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 80009b8:	bf00      	nop
 80009ba:	37e0      	adds	r7, #224	@ 0xe0
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	4000a000 	.word	0x4000a000
 80009c4:	58024400 	.word	0x58024400
 80009c8:	58020c00 	.word	0x58020c00

080009cc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80009cc:	b480      	push	{r7}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	4a07      	ldr	r2, [pc, #28]	@ (80009f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80009dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	4a06      	ldr	r2, [pc, #24]	@ (80009fc <vApplicationGetIdleTaskMemory+0x30>)
 80009e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2280      	movs	r2, #128	@ 0x80
 80009e8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80009ea:	bf00      	nop
 80009ec:	3714      	adds	r7, #20
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	24000310 	.word	0x24000310
 80009fc:	240003b0 	.word	0x240003b0

08000a00 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000a00:	b5b0      	push	{r4, r5, r7, lr}
 8000a02:	b09c      	sub	sp, #112	@ 0x70
 8000a04:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of mpu_task */
  osThreadDef(mpu_task, mpu, osPriorityNormal, 0, 128);
 8000a06:	4b27      	ldr	r3, [pc, #156]	@ (8000aa4 <MX_FREERTOS_Init+0xa4>)
 8000a08:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8000a0c:	461d      	mov	r5, r3
 8000a0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a12:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mpu_taskHandle = osThreadCreate(osThread(mpu_task), NULL);
 8000a1a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a1e:	2100      	movs	r1, #0
 8000a20:	4618      	mov	r0, r3
 8000a22:	f009 fb16 	bl	800a052 <osThreadCreate>
 8000a26:	4603      	mov	r3, r0
 8000a28:	4a1f      	ldr	r2, [pc, #124]	@ (8000aa8 <MX_FREERTOS_Init+0xa8>)
 8000a2a:	6013      	str	r3, [r2, #0]

  /* definition and creation of printf_task */
  osThreadDef(printf_task, print_to_usb, osPriorityLow, 0, 128);
 8000a2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000aac <MX_FREERTOS_Init+0xac>)
 8000a2e:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000a32:	461d      	mov	r5, r3
 8000a34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a38:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  printf_taskHandle = osThreadCreate(osThread(printf_task), NULL);
 8000a40:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a44:	2100      	movs	r1, #0
 8000a46:	4618      	mov	r0, r3
 8000a48:	f009 fb03 	bl	800a052 <osThreadCreate>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	4a18      	ldr	r2, [pc, #96]	@ (8000ab0 <MX_FREERTOS_Init+0xb0>)
 8000a50:	6013      	str	r3, [r2, #0]

  /* definition and creation of hip_motor_task */
  osThreadDef(hip_motor_task, hip_motor, osPriorityNormal, 0, 128);
 8000a52:	4b18      	ldr	r3, [pc, #96]	@ (8000ab4 <MX_FREERTOS_Init+0xb4>)
 8000a54:	f107 041c 	add.w	r4, r7, #28
 8000a58:	461d      	mov	r5, r3
 8000a5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a5e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  hip_motor_taskHandle = osThreadCreate(osThread(hip_motor_task), NULL);
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f009 faf0 	bl	800a052 <osThreadCreate>
 8000a72:	4603      	mov	r3, r0
 8000a74:	4a10      	ldr	r2, [pc, #64]	@ (8000ab8 <MX_FREERTOS_Init+0xb8>)
 8000a76:	6013      	str	r3, [r2, #0]

  /* definition and creation of ankle_motor_tas */
  osThreadDef(ankle_motor_tas, ankle_motor, osPriorityNormal, 0, 128);
 8000a78:	4b10      	ldr	r3, [pc, #64]	@ (8000abc <MX_FREERTOS_Init+0xbc>)
 8000a7a:	463c      	mov	r4, r7
 8000a7c:	461d      	mov	r5, r3
 8000a7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a82:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ankle_motor_tasHandle = osThreadCreate(osThread(ankle_motor_tas), NULL);
 8000a8a:	463b      	mov	r3, r7
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f009 fadf 	bl	800a052 <osThreadCreate>
 8000a94:	4603      	mov	r3, r0
 8000a96:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac0 <MX_FREERTOS_Init+0xc0>)
 8000a98:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000a9a:	bf00      	nop
 8000a9c:	3770      	adds	r7, #112	@ 0x70
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bdb0      	pop	{r4, r5, r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	0800bda8 	.word	0x0800bda8
 8000aa8:	24000300 	.word	0x24000300
 8000aac:	0800bdd0 	.word	0x0800bdd0
 8000ab0:	24000304 	.word	0x24000304
 8000ab4:	0800bdfc 	.word	0x0800bdfc
 8000ab8:	24000308 	.word	0x24000308
 8000abc:	0800be28 	.word	0x0800be28
 8000ac0:	2400030c 	.word	0x2400030c

08000ac4 <mpu>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_mpu */
void mpu(void const * argument)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN mpu */
  /* Infinite loop */
  for(;;)
  {
    printf("mpu_task \r\n");
 8000acc:	4803      	ldr	r0, [pc, #12]	@ (8000adc <mpu+0x18>)
 8000ace:	f00a fd61 	bl	800b594 <puts>
    MPU6050_update_data(&mpu_data);
 8000ad2:	4803      	ldr	r0, [pc, #12]	@ (8000ae0 <mpu+0x1c>)
 8000ad4:	f000 ffbe 	bl	8001a54 <MPU6050_update_data>
  {
 8000ad8:	bf00      	nop
 8000ada:	e7f7      	b.n	8000acc <mpu+0x8>
 8000adc:	0800be44 	.word	0x0800be44
 8000ae0:	240002dc 	.word	0x240002dc

08000ae4 <print_to_usb>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_print_to_usb */
void print_to_usb(void const * argument)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN print_to_usb */
  /* Infinite loop */
  for(;;)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <print_to_usb+0x8>

08000af0 <hip_motor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_hip_motor */
void hip_motor(void const * argument)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN hip_motor */
  /* Infinite loop */
  for(;;)
  {
    printf("hip motor task \r\n");
 8000af8:	4802      	ldr	r0, [pc, #8]	@ (8000b04 <hip_motor+0x14>)
 8000afa:	f00a fd4b 	bl	800b594 <puts>
  {
 8000afe:	bf00      	nop
 8000b00:	e7fa      	b.n	8000af8 <hip_motor+0x8>
 8000b02:	bf00      	nop
 8000b04:	0800be50 	.word	0x0800be50

08000b08 <ankle_motor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ankle_motor */
void ankle_motor(void const * argument)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ankle_motor */
  /* Infinite loop */
  for(;;)
  {
    printf("ankle motor task \r\n");
 8000b10:	4802      	ldr	r0, [pc, #8]	@ (8000b1c <ankle_motor+0x14>)
 8000b12:	f00a fd3f 	bl	800b594 <puts>
  {
 8000b16:	bf00      	nop
 8000b18:	e7fa      	b.n	8000b10 <ankle_motor+0x8>
 8000b1a:	bf00      	nop
 8000b1c:	0800be64 	.word	0x0800be64

08000b20 <MX_GPIO_Init>:
        * EXTI
     PA9   ------> USB_OTG_HS_VBUS
     PA10   ------> USB_OTG_HS_ID
*/
void MX_GPIO_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08c      	sub	sp, #48	@ 0x30
 8000b24:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b26:	f107 031c 	add.w	r3, r7, #28
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]
 8000b34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b36:	4b71      	ldr	r3, [pc, #452]	@ (8000cfc <MX_GPIO_Init+0x1dc>)
 8000b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b3c:	4a6f      	ldr	r2, [pc, #444]	@ (8000cfc <MX_GPIO_Init+0x1dc>)
 8000b3e:	f043 0304 	orr.w	r3, r3, #4
 8000b42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b46:	4b6d      	ldr	r3, [pc, #436]	@ (8000cfc <MX_GPIO_Init+0x1dc>)
 8000b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b4c:	f003 0304 	and.w	r3, r3, #4
 8000b50:	61bb      	str	r3, [r7, #24]
 8000b52:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b54:	4b69      	ldr	r3, [pc, #420]	@ (8000cfc <MX_GPIO_Init+0x1dc>)
 8000b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b5a:	4a68      	ldr	r2, [pc, #416]	@ (8000cfc <MX_GPIO_Init+0x1dc>)
 8000b5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b64:	4b65      	ldr	r3, [pc, #404]	@ (8000cfc <MX_GPIO_Init+0x1dc>)
 8000b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b6e:	617b      	str	r3, [r7, #20]
 8000b70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b72:	4b62      	ldr	r3, [pc, #392]	@ (8000cfc <MX_GPIO_Init+0x1dc>)
 8000b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b78:	4a60      	ldr	r2, [pc, #384]	@ (8000cfc <MX_GPIO_Init+0x1dc>)
 8000b7a:	f043 0301 	orr.w	r3, r3, #1
 8000b7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b82:	4b5e      	ldr	r3, [pc, #376]	@ (8000cfc <MX_GPIO_Init+0x1dc>)
 8000b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b88:	f003 0301 	and.w	r3, r3, #1
 8000b8c:	613b      	str	r3, [r7, #16]
 8000b8e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b90:	4b5a      	ldr	r3, [pc, #360]	@ (8000cfc <MX_GPIO_Init+0x1dc>)
 8000b92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b96:	4a59      	ldr	r2, [pc, #356]	@ (8000cfc <MX_GPIO_Init+0x1dc>)
 8000b98:	f043 0302 	orr.w	r3, r3, #2
 8000b9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ba0:	4b56      	ldr	r3, [pc, #344]	@ (8000cfc <MX_GPIO_Init+0x1dc>)
 8000ba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ba6:	f003 0302 	and.w	r3, r3, #2
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bae:	4b53      	ldr	r3, [pc, #332]	@ (8000cfc <MX_GPIO_Init+0x1dc>)
 8000bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bb4:	4a51      	ldr	r2, [pc, #324]	@ (8000cfc <MX_GPIO_Init+0x1dc>)
 8000bb6:	f043 0308 	orr.w	r3, r3, #8
 8000bba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bbe:	4b4f      	ldr	r3, [pc, #316]	@ (8000cfc <MX_GPIO_Init+0x1dc>)
 8000bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc4:	f003 0308 	and.w	r3, r3, #8
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bcc:	4b4b      	ldr	r3, [pc, #300]	@ (8000cfc <MX_GPIO_Init+0x1dc>)
 8000bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd2:	4a4a      	ldr	r2, [pc, #296]	@ (8000cfc <MX_GPIO_Init+0x1dc>)
 8000bd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bd8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bdc:	4b47      	ldr	r3, [pc, #284]	@ (8000cfc <MX_GPIO_Init+0x1dc>)
 8000bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bea:	4b44      	ldr	r3, [pc, #272]	@ (8000cfc <MX_GPIO_Init+0x1dc>)
 8000bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bf0:	4a42      	ldr	r2, [pc, #264]	@ (8000cfc <MX_GPIO_Init+0x1dc>)
 8000bf2:	f043 0310 	orr.w	r3, r3, #16
 8000bf6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bfa:	4b40      	ldr	r3, [pc, #256]	@ (8000cfc <MX_GPIO_Init+0x1dc>)
 8000bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c00:	f003 0310 	and.w	r3, r3, #16
 8000c04:	603b      	str	r3, [r7, #0]
 8000c06:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000c0e:	483c      	ldr	r0, [pc, #240]	@ (8000d00 <MX_GPIO_Init+0x1e0>)
 8000c10:	f002 ff30 	bl	8003a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000c14:	2200      	movs	r2, #0
 8000c16:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c1a:	483a      	ldr	r0, [pc, #232]	@ (8000d04 <MX_GPIO_Init+0x1e4>)
 8000c1c:	f002 ff2a 	bl	8003a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2102      	movs	r1, #2
 8000c24:	4838      	ldr	r0, [pc, #224]	@ (8000d08 <MX_GPIO_Init+0x1e8>)
 8000c26:	f002 ff25 	bl	8003a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c2a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c30:	2300      	movs	r3, #0
 8000c32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c38:	f107 031c 	add.w	r3, r7, #28
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4833      	ldr	r0, [pc, #204]	@ (8000d0c <MX_GPIO_Init+0x1ec>)
 8000c40:	f002 fd70 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000c44:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000c48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	2300      	movs	r3, #0
 8000c54:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c56:	f107 031c 	add.w	r3, r7, #28
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4828      	ldr	r0, [pc, #160]	@ (8000d00 <MX_GPIO_Init+0x1e0>)
 8000c5e:	f002 fd61 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000c62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c74:	f107 031c 	add.w	r3, r7, #28
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4822      	ldr	r0, [pc, #136]	@ (8000d04 <MX_GPIO_Init+0x1e4>)
 8000c7c:	f002 fd52 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000c80:	2380      	movs	r3, #128	@ 0x80
 8000c82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c84:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000c8e:	f107 031c 	add.w	r3, r7, #28
 8000c92:	4619      	mov	r1, r3
 8000c94:	481e      	ldr	r0, [pc, #120]	@ (8000d10 <MX_GPIO_Init+0x1f0>)
 8000c96:	f002 fd45 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000c9a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ca8:	f107 031c 	add.w	r3, r7, #28
 8000cac:	4619      	mov	r1, r3
 8000cae:	4819      	ldr	r0, [pc, #100]	@ (8000d14 <MX_GPIO_Init+0x1f4>)
 8000cb0:	f002 fd38 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000cb4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000cc6:	230a      	movs	r3, #10
 8000cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000cca:	f107 031c 	add.w	r3, r7, #28
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4810      	ldr	r0, [pc, #64]	@ (8000d14 <MX_GPIO_Init+0x1f4>)
 8000cd2:	f002 fd27 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000ce6:	f107 031c 	add.w	r3, r7, #28
 8000cea:	4619      	mov	r1, r3
 8000cec:	4806      	ldr	r0, [pc, #24]	@ (8000d08 <MX_GPIO_Init+0x1e8>)
 8000cee:	f002 fd19 	bl	8003724 <HAL_GPIO_Init>

}
 8000cf2:	bf00      	nop
 8000cf4:	3730      	adds	r7, #48	@ 0x30
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	58024400 	.word	0x58024400
 8000d00:	58020400 	.word	0x58020400
 8000d04:	58020c00 	.word	0x58020c00
 8000d08:	58021000 	.word	0x58021000
 8000d0c:	58020800 	.word	0x58020800
 8000d10:	58021800 	.word	0x58021800
 8000d14:	58020000 	.word	0x58020000

08000d18 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000d8c <MX_I2C1_Init+0x74>)
 8000d1e:	4a1c      	ldr	r2, [pc, #112]	@ (8000d90 <MX_I2C1_Init+0x78>)
 8000d20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60404E72;
 8000d22:	4b1a      	ldr	r3, [pc, #104]	@ (8000d8c <MX_I2C1_Init+0x74>)
 8000d24:	4a1b      	ldr	r2, [pc, #108]	@ (8000d94 <MX_I2C1_Init+0x7c>)
 8000d26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d28:	4b18      	ldr	r3, [pc, #96]	@ (8000d8c <MX_I2C1_Init+0x74>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d2e:	4b17      	ldr	r3, [pc, #92]	@ (8000d8c <MX_I2C1_Init+0x74>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d34:	4b15      	ldr	r3, [pc, #84]	@ (8000d8c <MX_I2C1_Init+0x74>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d3a:	4b14      	ldr	r3, [pc, #80]	@ (8000d8c <MX_I2C1_Init+0x74>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d40:	4b12      	ldr	r3, [pc, #72]	@ (8000d8c <MX_I2C1_Init+0x74>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d46:	4b11      	ldr	r3, [pc, #68]	@ (8000d8c <MX_I2C1_Init+0x74>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d8c <MX_I2C1_Init+0x74>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d52:	480e      	ldr	r0, [pc, #56]	@ (8000d8c <MX_I2C1_Init+0x74>)
 8000d54:	f002 fea8 	bl	8003aa8 <HAL_I2C_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d5e:	f000 f945 	bl	8000fec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d62:	2100      	movs	r1, #0
 8000d64:	4809      	ldr	r0, [pc, #36]	@ (8000d8c <MX_I2C1_Init+0x74>)
 8000d66:	f004 f98b 	bl	8005080 <HAL_I2CEx_ConfigAnalogFilter>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d70:	f000 f93c 	bl	8000fec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d74:	2100      	movs	r1, #0
 8000d76:	4805      	ldr	r0, [pc, #20]	@ (8000d8c <MX_I2C1_Init+0x74>)
 8000d78:	f004 f9cd 	bl	8005116 <HAL_I2CEx_ConfigDigitalFilter>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d82:	f000 f933 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	240005b0 	.word	0x240005b0
 8000d90:	40005400 	.word	0x40005400
 8000d94:	60404e72 	.word	0x60404e72

08000d98 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b0b8      	sub	sp, #224	@ 0xe0
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000db0:	f107 0310 	add.w	r3, r7, #16
 8000db4:	22b8      	movs	r2, #184	@ 0xb8
 8000db6:	2100      	movs	r1, #0
 8000db8:	4618      	mov	r0, r3
 8000dba:	f00a fccb 	bl	800b754 <memset>
  if(i2cHandle->Instance==I2C1)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a2f      	ldr	r2, [pc, #188]	@ (8000e80 <HAL_I2C_MspInit+0xe8>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d156      	bne.n	8000e76 <HAL_I2C_MspInit+0xde>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000dc8:	f04f 0208 	mov.w	r2, #8
 8000dcc:	f04f 0300 	mov.w	r3, #0
 8000dd0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dda:	f107 0310 	add.w	r3, r7, #16
 8000dde:	4618      	mov	r0, r3
 8000de0:	f005 f9c8 	bl	8006174 <HAL_RCCEx_PeriphCLKConfig>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000dea:	f000 f8ff 	bl	8000fec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dee:	4b25      	ldr	r3, [pc, #148]	@ (8000e84 <HAL_I2C_MspInit+0xec>)
 8000df0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df4:	4a23      	ldr	r2, [pc, #140]	@ (8000e84 <HAL_I2C_MspInit+0xec>)
 8000df6:	f043 0302 	orr.w	r3, r3, #2
 8000dfa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dfe:	4b21      	ldr	r3, [pc, #132]	@ (8000e84 <HAL_I2C_MspInit+0xec>)
 8000e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e04:	f003 0302 	and.w	r3, r3, #2
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e0c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e10:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e14:	2312      	movs	r3, #18
 8000e16:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e26:	2304      	movs	r3, #4
 8000e28:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000e30:	4619      	mov	r1, r3
 8000e32:	4815      	ldr	r0, [pc, #84]	@ (8000e88 <HAL_I2C_MspInit+0xf0>)
 8000e34:	f002 fc76 	bl	8003724 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e38:	4b12      	ldr	r3, [pc, #72]	@ (8000e84 <HAL_I2C_MspInit+0xec>)
 8000e3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e3e:	4a11      	ldr	r2, [pc, #68]	@ (8000e84 <HAL_I2C_MspInit+0xec>)
 8000e40:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e44:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e48:	4b0e      	ldr	r3, [pc, #56]	@ (8000e84 <HAL_I2C_MspInit+0xec>)
 8000e4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e52:	60bb      	str	r3, [r7, #8]
 8000e54:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2105      	movs	r1, #5
 8000e5a:	201f      	movs	r0, #31
 8000e5c:	f000 ff30 	bl	8001cc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000e60:	201f      	movs	r0, #31
 8000e62:	f000 ff47 	bl	8001cf4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2105      	movs	r1, #5
 8000e6a:	2020      	movs	r0, #32
 8000e6c:	f000 ff28 	bl	8001cc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000e70:	2020      	movs	r0, #32
 8000e72:	f000 ff3f 	bl	8001cf4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000e76:	bf00      	nop
 8000e78:	37e0      	adds	r7, #224	@ 0xe0
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40005400 	.word	0x40005400
 8000e84:	58024400 	.word	0x58024400
 8000e88:	58020400 	.word	0x58020400

08000e8c <__io_putchar>:
#ifndef __PRINTF_REDIR_H
#define __PRINTF_REDIR_H

#include "usart.h"

int __io_putchar(int ch){
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000e94:	1d39      	adds	r1, r7, #4
 8000e96:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	4803      	ldr	r0, [pc, #12]	@ (8000eac <__io_putchar+0x20>)
 8000e9e:	f007 fa63 	bl	8008368 <HAL_UART_Transmit>

  return ch;
 8000ea2:	687b      	ldr	r3, [r7, #4]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	2400077c 	.word	0x2400077c

08000eb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb4:	f000 fddc 	bl	8001a70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb8:	f000 f816 	bl	8000ee8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ebc:	f7ff fe30 	bl	8000b20 <MX_GPIO_Init>
  MX_ETH_Init();
 8000ec0:	f7ff fb9e 	bl	8000600 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000ec4:	f000 fb24 	bl	8001510 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000ec8:	f000 fcd2 	bl	8001870 <MX_USB_OTG_HS_USB_Init>
  MX_FDCAN1_Init();
 8000ecc:	f7ff fcb2 	bl	8000834 <MX_FDCAN1_Init>
  MX_I2C1_Init();
 8000ed0:	f7ff ff22 	bl	8000d18 <MX_I2C1_Init>
  MX_UART4_Init();
 8000ed4:	f000 fa84 	bl	80013e0 <MX_UART4_Init>
  MX_UART5_Init();
 8000ed8:	f000 face 	bl	8001478 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000edc:	f7ff fd90 	bl	8000a00 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000ee0:	f009 f8b0 	bl	800a044 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ee4:	bf00      	nop
 8000ee6:	e7fd      	b.n	8000ee4 <main+0x34>

08000ee8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b09c      	sub	sp, #112	@ 0x70
 8000eec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ef2:	224c      	movs	r2, #76	@ 0x4c
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f00a fc2c 	bl	800b754 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000efc:	1d3b      	adds	r3, r7, #4
 8000efe:	2220      	movs	r2, #32
 8000f00:	2100      	movs	r1, #0
 8000f02:	4618      	mov	r0, r3
 8000f04:	f00a fc26 	bl	800b754 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f08:	2002      	movs	r0, #2
 8000f0a:	f004 f951 	bl	80051b0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000f0e:	2300      	movs	r3, #0
 8000f10:	603b      	str	r3, [r7, #0]
 8000f12:	4b2c      	ldr	r3, [pc, #176]	@ (8000fc4 <SystemClock_Config+0xdc>)
 8000f14:	699b      	ldr	r3, [r3, #24]
 8000f16:	4a2b      	ldr	r2, [pc, #172]	@ (8000fc4 <SystemClock_Config+0xdc>)
 8000f18:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f1c:	6193      	str	r3, [r2, #24]
 8000f1e:	4b29      	ldr	r3, [pc, #164]	@ (8000fc4 <SystemClock_Config+0xdc>)
 8000f20:	699b      	ldr	r3, [r3, #24]
 8000f22:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f26:	603b      	str	r3, [r7, #0]
 8000f28:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f2a:	bf00      	nop
 8000f2c:	4b25      	ldr	r3, [pc, #148]	@ (8000fc4 <SystemClock_Config+0xdc>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f38:	d1f8      	bne.n	8000f2c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000f3a:	2321      	movs	r3, #33	@ 0x21
 8000f3c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f3e:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000f42:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000f44:	2301      	movs	r3, #1
 8000f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f50:	2304      	movs	r3, #4
 8000f52:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000f54:	f240 1313 	movw	r3, #275	@ 0x113
 8000f58:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f5e:	2304      	movs	r3, #4
 8000f60:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f62:	2302      	movs	r3, #2
 8000f64:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000f66:	2304      	movs	r3, #4
 8000f68:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f76:	4618      	mov	r0, r3
 8000f78:	f004 f954 	bl	8005224 <HAL_RCC_OscConfig>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000f82:	f000 f833 	bl	8000fec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f86:	233f      	movs	r3, #63	@ 0x3f
 8000f88:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000f92:	2308      	movs	r3, #8
 8000f94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f96:	2340      	movs	r3, #64	@ 0x40
 8000f98:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f9a:	2340      	movs	r3, #64	@ 0x40
 8000f9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fa2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000fa4:	2340      	movs	r3, #64	@ 0x40
 8000fa6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000fa8:	1d3b      	adds	r3, r7, #4
 8000faa:	2103      	movs	r1, #3
 8000fac:	4618      	mov	r0, r3
 8000fae:	f004 fd13 	bl	80059d8 <HAL_RCC_ClockConfig>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000fb8:	f000 f818 	bl	8000fec <Error_Handler>
  }
}
 8000fbc:	bf00      	nop
 8000fbe:	3770      	adds	r7, #112	@ 0x70
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	58024800 	.word	0x58024800

08000fc8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a04      	ldr	r2, [pc, #16]	@ (8000fe8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d101      	bne.n	8000fde <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fda:	f000 fd85 	bl	8001ae8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40001000 	.word	0x40001000

08000fec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff0:	b672      	cpsid	i
}
 8000ff2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ff4:	bf00      	nop
 8000ff6:	e7fd      	b.n	8000ff4 <Error_Handler+0x8>

08000ff8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	@ (8001030 <HAL_MspInit+0x38>)
 8001000:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001004:	4a0a      	ldr	r2, [pc, #40]	@ (8001030 <HAL_MspInit+0x38>)
 8001006:	f043 0302 	orr.w	r3, r3, #2
 800100a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800100e:	4b08      	ldr	r3, [pc, #32]	@ (8001030 <HAL_MspInit+0x38>)
 8001010:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001014:	f003 0302 	and.w	r3, r3, #2
 8001018:	607b      	str	r3, [r7, #4]
 800101a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800101c:	2200      	movs	r2, #0
 800101e:	210f      	movs	r1, #15
 8001020:	f06f 0001 	mvn.w	r0, #1
 8001024:	f000 fe4c 	bl	8001cc0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	58024400 	.word	0x58024400

08001034 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b090      	sub	sp, #64	@ 0x40
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b0f      	cmp	r3, #15
 8001040:	d827      	bhi.n	8001092 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001042:	2200      	movs	r2, #0
 8001044:	6879      	ldr	r1, [r7, #4]
 8001046:	2036      	movs	r0, #54	@ 0x36
 8001048:	f000 fe3a 	bl	8001cc0 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800104c:	2036      	movs	r0, #54	@ 0x36
 800104e:	f000 fe51 	bl	8001cf4 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001052:	4a29      	ldr	r2, [pc, #164]	@ (80010f8 <HAL_InitTick+0xc4>)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001058:	4b28      	ldr	r3, [pc, #160]	@ (80010fc <HAL_InitTick+0xc8>)
 800105a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800105e:	4a27      	ldr	r2, [pc, #156]	@ (80010fc <HAL_InitTick+0xc8>)
 8001060:	f043 0310 	orr.w	r3, r3, #16
 8001064:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001068:	4b24      	ldr	r3, [pc, #144]	@ (80010fc <HAL_InitTick+0xc8>)
 800106a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800106e:	f003 0310 	and.w	r3, r3, #16
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001076:	f107 0210 	add.w	r2, r7, #16
 800107a:	f107 0314 	add.w	r3, r7, #20
 800107e:	4611      	mov	r1, r2
 8001080:	4618      	mov	r0, r3
 8001082:	f005 f835 	bl	80060f0 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001088:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800108a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800108c:	2b00      	cmp	r3, #0
 800108e:	d106      	bne.n	800109e <HAL_InitTick+0x6a>
 8001090:	e001      	b.n	8001096 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e02b      	b.n	80010ee <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001096:	f004 ffff 	bl	8006098 <HAL_RCC_GetPCLK1Freq>
 800109a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800109c:	e004      	b.n	80010a8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800109e:	f004 fffb 	bl	8006098 <HAL_RCC_GetPCLK1Freq>
 80010a2:	4603      	mov	r3, r0
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80010aa:	4a15      	ldr	r2, [pc, #84]	@ (8001100 <HAL_InitTick+0xcc>)
 80010ac:	fba2 2303 	umull	r2, r3, r2, r3
 80010b0:	0c9b      	lsrs	r3, r3, #18
 80010b2:	3b01      	subs	r3, #1
 80010b4:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80010b6:	4b13      	ldr	r3, [pc, #76]	@ (8001104 <HAL_InitTick+0xd0>)
 80010b8:	4a13      	ldr	r2, [pc, #76]	@ (8001108 <HAL_InitTick+0xd4>)
 80010ba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80010bc:	4b11      	ldr	r3, [pc, #68]	@ (8001104 <HAL_InitTick+0xd0>)
 80010be:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80010c2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80010c4:	4a0f      	ldr	r2, [pc, #60]	@ (8001104 <HAL_InitTick+0xd0>)
 80010c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010c8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80010ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001104 <HAL_InitTick+0xd0>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001104 <HAL_InitTick+0xd0>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80010d6:	480b      	ldr	r0, [pc, #44]	@ (8001104 <HAL_InitTick+0xd0>)
 80010d8:	f006 fe0e 	bl	8007cf8 <HAL_TIM_Base_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d104      	bne.n	80010ec <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80010e2:	4808      	ldr	r0, [pc, #32]	@ (8001104 <HAL_InitTick+0xd0>)
 80010e4:	f006 fe6a 	bl	8007dbc <HAL_TIM_Base_Start_IT>
 80010e8:	4603      	mov	r3, r0
 80010ea:	e000      	b.n	80010ee <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3740      	adds	r7, #64	@ 0x40
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	24000008 	.word	0x24000008
 80010fc:	58024400 	.word	0x58024400
 8001100:	431bde83 	.word	0x431bde83
 8001104:	24000604 	.word	0x24000604
 8001108:	40001000 	.word	0x40001000

0800110c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001110:	bf00      	nop
 8001112:	e7fd      	b.n	8001110 <NMI_Handler+0x4>

08001114 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001118:	bf00      	nop
 800111a:	e7fd      	b.n	8001118 <HardFault_Handler+0x4>

0800111c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001120:	bf00      	nop
 8001122:	e7fd      	b.n	8001120 <MemManage_Handler+0x4>

08001124 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001128:	bf00      	nop
 800112a:	e7fd      	b.n	8001128 <BusFault_Handler+0x4>

0800112c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001130:	bf00      	nop
 8001132:	e7fd      	b.n	8001130 <UsageFault_Handler+0x4>

08001134 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
	...

08001144 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001148:	4802      	ldr	r0, [pc, #8]	@ (8001154 <I2C1_EV_IRQHandler+0x10>)
 800114a:	f002 fe63 	bl	8003e14 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	240005b0 	.word	0x240005b0

08001158 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800115c:	4802      	ldr	r0, [pc, #8]	@ (8001168 <I2C1_ER_IRQHandler+0x10>)
 800115e:	f002 fe73 	bl	8003e48 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	240005b0 	.word	0x240005b0

0800116c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001170:	4802      	ldr	r0, [pc, #8]	@ (800117c <UART4_IRQHandler+0x10>)
 8001172:	f007 f987 	bl	8008484 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	24000654 	.word	0x24000654

08001180 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001184:	4802      	ldr	r0, [pc, #8]	@ (8001190 <UART5_IRQHandler+0x10>)
 8001186:	f007 f97d 	bl	8008484 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	240006e8 	.word	0x240006e8

08001194 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001198:	4802      	ldr	r0, [pc, #8]	@ (80011a4 <TIM6_DAC_IRQHandler+0x10>)
 800119a:	f006 fe95 	bl	8007ec8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	24000604 	.word	0x24000604

080011a8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]
 80011b8:	e00a      	b.n	80011d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011ba:	f3af 8000 	nop.w
 80011be:	4601      	mov	r1, r0
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	1c5a      	adds	r2, r3, #1
 80011c4:	60ba      	str	r2, [r7, #8]
 80011c6:	b2ca      	uxtb	r2, r1
 80011c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	3301      	adds	r3, #1
 80011ce:	617b      	str	r3, [r7, #20]
 80011d0:	697a      	ldr	r2, [r7, #20]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	dbf0      	blt.n	80011ba <_read+0x12>
  }

  return len;
 80011d8:	687b      	ldr	r3, [r7, #4]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3718      	adds	r7, #24
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b086      	sub	sp, #24
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	60f8      	str	r0, [r7, #12]
 80011ea:	60b9      	str	r1, [r7, #8]
 80011ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ee:	2300      	movs	r3, #0
 80011f0:	617b      	str	r3, [r7, #20]
 80011f2:	e009      	b.n	8001208 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	1c5a      	adds	r2, r3, #1
 80011f8:	60ba      	str	r2, [r7, #8]
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff fe45 	bl	8000e8c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	3301      	adds	r3, #1
 8001206:	617b      	str	r3, [r7, #20]
 8001208:	697a      	ldr	r2, [r7, #20]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	429a      	cmp	r2, r3
 800120e:	dbf1      	blt.n	80011f4 <_write+0x12>
  }
  return len;
 8001210:	687b      	ldr	r3, [r7, #4]
}
 8001212:	4618      	mov	r0, r3
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <_close>:

int _close(int file)
{
 800121a:	b480      	push	{r7}
 800121c:	b083      	sub	sp, #12
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001222:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001226:	4618      	mov	r0, r3
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001232:	b480      	push	{r7}
 8001234:	b083      	sub	sp, #12
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
 800123a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001242:	605a      	str	r2, [r3, #4]
  return 0;
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <_isatty>:

int _isatty(int file)
{
 8001252:	b480      	push	{r7}
 8001254:	b083      	sub	sp, #12
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800125a:	2301      	movs	r3, #1
}
 800125c:	4618      	mov	r0, r3
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3714      	adds	r7, #20
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
	...

08001284 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800128c:	4a14      	ldr	r2, [pc, #80]	@ (80012e0 <_sbrk+0x5c>)
 800128e:	4b15      	ldr	r3, [pc, #84]	@ (80012e4 <_sbrk+0x60>)
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001298:	4b13      	ldr	r3, [pc, #76]	@ (80012e8 <_sbrk+0x64>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d102      	bne.n	80012a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012a0:	4b11      	ldr	r3, [pc, #68]	@ (80012e8 <_sbrk+0x64>)
 80012a2:	4a12      	ldr	r2, [pc, #72]	@ (80012ec <_sbrk+0x68>)
 80012a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012a6:	4b10      	ldr	r3, [pc, #64]	@ (80012e8 <_sbrk+0x64>)
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d207      	bcs.n	80012c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012b4:	f00a faf2 	bl	800b89c <__errno>
 80012b8:	4603      	mov	r3, r0
 80012ba:	220c      	movs	r2, #12
 80012bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012be:	f04f 33ff 	mov.w	r3, #4294967295
 80012c2:	e009      	b.n	80012d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012c4:	4b08      	ldr	r3, [pc, #32]	@ (80012e8 <_sbrk+0x64>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ca:	4b07      	ldr	r3, [pc, #28]	@ (80012e8 <_sbrk+0x64>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4413      	add	r3, r2
 80012d2:	4a05      	ldr	r2, [pc, #20]	@ (80012e8 <_sbrk+0x64>)
 80012d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012d6:	68fb      	ldr	r3, [r7, #12]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3718      	adds	r7, #24
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	24050000 	.word	0x24050000
 80012e4:	00000400 	.word	0x00000400
 80012e8:	24000650 	.word	0x24000650
 80012ec:	240046b8 	.word	0x240046b8

080012f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012f4:	4b32      	ldr	r3, [pc, #200]	@ (80013c0 <SystemInit+0xd0>)
 80012f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012fa:	4a31      	ldr	r2, [pc, #196]	@ (80013c0 <SystemInit+0xd0>)
 80012fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001300:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001304:	4b2f      	ldr	r3, [pc, #188]	@ (80013c4 <SystemInit+0xd4>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 030f 	and.w	r3, r3, #15
 800130c:	2b06      	cmp	r3, #6
 800130e:	d807      	bhi.n	8001320 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001310:	4b2c      	ldr	r3, [pc, #176]	@ (80013c4 <SystemInit+0xd4>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f023 030f 	bic.w	r3, r3, #15
 8001318:	4a2a      	ldr	r2, [pc, #168]	@ (80013c4 <SystemInit+0xd4>)
 800131a:	f043 0307 	orr.w	r3, r3, #7
 800131e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001320:	4b29      	ldr	r3, [pc, #164]	@ (80013c8 <SystemInit+0xd8>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a28      	ldr	r2, [pc, #160]	@ (80013c8 <SystemInit+0xd8>)
 8001326:	f043 0301 	orr.w	r3, r3, #1
 800132a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800132c:	4b26      	ldr	r3, [pc, #152]	@ (80013c8 <SystemInit+0xd8>)
 800132e:	2200      	movs	r2, #0
 8001330:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001332:	4b25      	ldr	r3, [pc, #148]	@ (80013c8 <SystemInit+0xd8>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	4924      	ldr	r1, [pc, #144]	@ (80013c8 <SystemInit+0xd8>)
 8001338:	4b24      	ldr	r3, [pc, #144]	@ (80013cc <SystemInit+0xdc>)
 800133a:	4013      	ands	r3, r2
 800133c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800133e:	4b21      	ldr	r3, [pc, #132]	@ (80013c4 <SystemInit+0xd4>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0308 	and.w	r3, r3, #8
 8001346:	2b00      	cmp	r3, #0
 8001348:	d007      	beq.n	800135a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800134a:	4b1e      	ldr	r3, [pc, #120]	@ (80013c4 <SystemInit+0xd4>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f023 030f 	bic.w	r3, r3, #15
 8001352:	4a1c      	ldr	r2, [pc, #112]	@ (80013c4 <SystemInit+0xd4>)
 8001354:	f043 0307 	orr.w	r3, r3, #7
 8001358:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800135a:	4b1b      	ldr	r3, [pc, #108]	@ (80013c8 <SystemInit+0xd8>)
 800135c:	2200      	movs	r2, #0
 800135e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001360:	4b19      	ldr	r3, [pc, #100]	@ (80013c8 <SystemInit+0xd8>)
 8001362:	2200      	movs	r2, #0
 8001364:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001366:	4b18      	ldr	r3, [pc, #96]	@ (80013c8 <SystemInit+0xd8>)
 8001368:	2200      	movs	r2, #0
 800136a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800136c:	4b16      	ldr	r3, [pc, #88]	@ (80013c8 <SystemInit+0xd8>)
 800136e:	4a18      	ldr	r2, [pc, #96]	@ (80013d0 <SystemInit+0xe0>)
 8001370:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001372:	4b15      	ldr	r3, [pc, #84]	@ (80013c8 <SystemInit+0xd8>)
 8001374:	4a17      	ldr	r2, [pc, #92]	@ (80013d4 <SystemInit+0xe4>)
 8001376:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001378:	4b13      	ldr	r3, [pc, #76]	@ (80013c8 <SystemInit+0xd8>)
 800137a:	4a17      	ldr	r2, [pc, #92]	@ (80013d8 <SystemInit+0xe8>)
 800137c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800137e:	4b12      	ldr	r3, [pc, #72]	@ (80013c8 <SystemInit+0xd8>)
 8001380:	2200      	movs	r2, #0
 8001382:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001384:	4b10      	ldr	r3, [pc, #64]	@ (80013c8 <SystemInit+0xd8>)
 8001386:	4a14      	ldr	r2, [pc, #80]	@ (80013d8 <SystemInit+0xe8>)
 8001388:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800138a:	4b0f      	ldr	r3, [pc, #60]	@ (80013c8 <SystemInit+0xd8>)
 800138c:	2200      	movs	r2, #0
 800138e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001390:	4b0d      	ldr	r3, [pc, #52]	@ (80013c8 <SystemInit+0xd8>)
 8001392:	4a11      	ldr	r2, [pc, #68]	@ (80013d8 <SystemInit+0xe8>)
 8001394:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001396:	4b0c      	ldr	r3, [pc, #48]	@ (80013c8 <SystemInit+0xd8>)
 8001398:	2200      	movs	r2, #0
 800139a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800139c:	4b0a      	ldr	r3, [pc, #40]	@ (80013c8 <SystemInit+0xd8>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a09      	ldr	r2, [pc, #36]	@ (80013c8 <SystemInit+0xd8>)
 80013a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80013a8:	4b07      	ldr	r3, [pc, #28]	@ (80013c8 <SystemInit+0xd8>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80013ae:	4b0b      	ldr	r3, [pc, #44]	@ (80013dc <SystemInit+0xec>)
 80013b0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80013b4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80013b6:	bf00      	nop
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	e000ed00 	.word	0xe000ed00
 80013c4:	52002000 	.word	0x52002000
 80013c8:	58024400 	.word	0x58024400
 80013cc:	eaf6ed7f 	.word	0xeaf6ed7f
 80013d0:	02020200 	.word	0x02020200
 80013d4:	01ff0000 	.word	0x01ff0000
 80013d8:	01010280 	.word	0x01010280
 80013dc:	52004000 	.word	0x52004000

080013e0 <MX_UART4_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80013e4:	4b22      	ldr	r3, [pc, #136]	@ (8001470 <MX_UART4_Init+0x90>)
 80013e6:	4a23      	ldr	r2, [pc, #140]	@ (8001474 <MX_UART4_Init+0x94>)
 80013e8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80013ea:	4b21      	ldr	r3, [pc, #132]	@ (8001470 <MX_UART4_Init+0x90>)
 80013ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013f0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80013f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001470 <MX_UART4_Init+0x90>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80013f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001470 <MX_UART4_Init+0x90>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80013fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001470 <MX_UART4_Init+0x90>)
 8001400:	2200      	movs	r2, #0
 8001402:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001404:	4b1a      	ldr	r3, [pc, #104]	@ (8001470 <MX_UART4_Init+0x90>)
 8001406:	220c      	movs	r2, #12
 8001408:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800140a:	4b19      	ldr	r3, [pc, #100]	@ (8001470 <MX_UART4_Init+0x90>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001410:	4b17      	ldr	r3, [pc, #92]	@ (8001470 <MX_UART4_Init+0x90>)
 8001412:	2200      	movs	r2, #0
 8001414:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001416:	4b16      	ldr	r3, [pc, #88]	@ (8001470 <MX_UART4_Init+0x90>)
 8001418:	2200      	movs	r2, #0
 800141a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800141c:	4b14      	ldr	r3, [pc, #80]	@ (8001470 <MX_UART4_Init+0x90>)
 800141e:	2200      	movs	r2, #0
 8001420:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001422:	4b13      	ldr	r3, [pc, #76]	@ (8001470 <MX_UART4_Init+0x90>)
 8001424:	2200      	movs	r2, #0
 8001426:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001428:	4811      	ldr	r0, [pc, #68]	@ (8001470 <MX_UART4_Init+0x90>)
 800142a:	f006 ff4d 	bl	80082c8 <HAL_UART_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001434:	f7ff fdda 	bl	8000fec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001438:	2100      	movs	r1, #0
 800143a:	480d      	ldr	r0, [pc, #52]	@ (8001470 <MX_UART4_Init+0x90>)
 800143c:	f008 fd20 	bl	8009e80 <HAL_UARTEx_SetTxFifoThreshold>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001446:	f7ff fdd1 	bl	8000fec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800144a:	2100      	movs	r1, #0
 800144c:	4808      	ldr	r0, [pc, #32]	@ (8001470 <MX_UART4_Init+0x90>)
 800144e:	f008 fd55 	bl	8009efc <HAL_UARTEx_SetRxFifoThreshold>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001458:	f7ff fdc8 	bl	8000fec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800145c:	4804      	ldr	r0, [pc, #16]	@ (8001470 <MX_UART4_Init+0x90>)
 800145e:	f008 fcd6 	bl	8009e0e <HAL_UARTEx_DisableFifoMode>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001468:	f7ff fdc0 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}
 8001470:	24000654 	.word	0x24000654
 8001474:	40004c00 	.word	0x40004c00

08001478 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800147c:	4b22      	ldr	r3, [pc, #136]	@ (8001508 <MX_UART5_Init+0x90>)
 800147e:	4a23      	ldr	r2, [pc, #140]	@ (800150c <MX_UART5_Init+0x94>)
 8001480:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001482:	4b21      	ldr	r3, [pc, #132]	@ (8001508 <MX_UART5_Init+0x90>)
 8001484:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001488:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800148a:	4b1f      	ldr	r3, [pc, #124]	@ (8001508 <MX_UART5_Init+0x90>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001490:	4b1d      	ldr	r3, [pc, #116]	@ (8001508 <MX_UART5_Init+0x90>)
 8001492:	2200      	movs	r2, #0
 8001494:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001496:	4b1c      	ldr	r3, [pc, #112]	@ (8001508 <MX_UART5_Init+0x90>)
 8001498:	2200      	movs	r2, #0
 800149a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800149c:	4b1a      	ldr	r3, [pc, #104]	@ (8001508 <MX_UART5_Init+0x90>)
 800149e:	220c      	movs	r2, #12
 80014a0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014a2:	4b19      	ldr	r3, [pc, #100]	@ (8001508 <MX_UART5_Init+0x90>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a8:	4b17      	ldr	r3, [pc, #92]	@ (8001508 <MX_UART5_Init+0x90>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ae:	4b16      	ldr	r3, [pc, #88]	@ (8001508 <MX_UART5_Init+0x90>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014b4:	4b14      	ldr	r3, [pc, #80]	@ (8001508 <MX_UART5_Init+0x90>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014ba:	4b13      	ldr	r3, [pc, #76]	@ (8001508 <MX_UART5_Init+0x90>)
 80014bc:	2200      	movs	r2, #0
 80014be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80014c0:	4811      	ldr	r0, [pc, #68]	@ (8001508 <MX_UART5_Init+0x90>)
 80014c2:	f006 ff01 	bl	80082c8 <HAL_UART_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 80014cc:	f7ff fd8e 	bl	8000fec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014d0:	2100      	movs	r1, #0
 80014d2:	480d      	ldr	r0, [pc, #52]	@ (8001508 <MX_UART5_Init+0x90>)
 80014d4:	f008 fcd4 	bl	8009e80 <HAL_UARTEx_SetTxFifoThreshold>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 80014de:	f7ff fd85 	bl	8000fec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014e2:	2100      	movs	r1, #0
 80014e4:	4808      	ldr	r0, [pc, #32]	@ (8001508 <MX_UART5_Init+0x90>)
 80014e6:	f008 fd09 	bl	8009efc <HAL_UARTEx_SetRxFifoThreshold>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80014f0:	f7ff fd7c 	bl	8000fec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80014f4:	4804      	ldr	r0, [pc, #16]	@ (8001508 <MX_UART5_Init+0x90>)
 80014f6:	f008 fc8a 	bl	8009e0e <HAL_UARTEx_DisableFifoMode>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001500:	f7ff fd74 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}
 8001508:	240006e8 	.word	0x240006e8
 800150c:	40005000 	.word	0x40005000

08001510 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001514:	4b22      	ldr	r3, [pc, #136]	@ (80015a0 <MX_USART3_UART_Init+0x90>)
 8001516:	4a23      	ldr	r2, [pc, #140]	@ (80015a4 <MX_USART3_UART_Init+0x94>)
 8001518:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800151a:	4b21      	ldr	r3, [pc, #132]	@ (80015a0 <MX_USART3_UART_Init+0x90>)
 800151c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001520:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001522:	4b1f      	ldr	r3, [pc, #124]	@ (80015a0 <MX_USART3_UART_Init+0x90>)
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001528:	4b1d      	ldr	r3, [pc, #116]	@ (80015a0 <MX_USART3_UART_Init+0x90>)
 800152a:	2200      	movs	r2, #0
 800152c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800152e:	4b1c      	ldr	r3, [pc, #112]	@ (80015a0 <MX_USART3_UART_Init+0x90>)
 8001530:	2200      	movs	r2, #0
 8001532:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001534:	4b1a      	ldr	r3, [pc, #104]	@ (80015a0 <MX_USART3_UART_Init+0x90>)
 8001536:	220c      	movs	r2, #12
 8001538:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800153a:	4b19      	ldr	r3, [pc, #100]	@ (80015a0 <MX_USART3_UART_Init+0x90>)
 800153c:	2200      	movs	r2, #0
 800153e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001540:	4b17      	ldr	r3, [pc, #92]	@ (80015a0 <MX_USART3_UART_Init+0x90>)
 8001542:	2200      	movs	r2, #0
 8001544:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001546:	4b16      	ldr	r3, [pc, #88]	@ (80015a0 <MX_USART3_UART_Init+0x90>)
 8001548:	2200      	movs	r2, #0
 800154a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800154c:	4b14      	ldr	r3, [pc, #80]	@ (80015a0 <MX_USART3_UART_Init+0x90>)
 800154e:	2200      	movs	r2, #0
 8001550:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001552:	4b13      	ldr	r3, [pc, #76]	@ (80015a0 <MX_USART3_UART_Init+0x90>)
 8001554:	2200      	movs	r2, #0
 8001556:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001558:	4811      	ldr	r0, [pc, #68]	@ (80015a0 <MX_USART3_UART_Init+0x90>)
 800155a:	f006 feb5 	bl	80082c8 <HAL_UART_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001564:	f7ff fd42 	bl	8000fec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001568:	2100      	movs	r1, #0
 800156a:	480d      	ldr	r0, [pc, #52]	@ (80015a0 <MX_USART3_UART_Init+0x90>)
 800156c:	f008 fc88 	bl	8009e80 <HAL_UARTEx_SetTxFifoThreshold>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001576:	f7ff fd39 	bl	8000fec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800157a:	2100      	movs	r1, #0
 800157c:	4808      	ldr	r0, [pc, #32]	@ (80015a0 <MX_USART3_UART_Init+0x90>)
 800157e:	f008 fcbd 	bl	8009efc <HAL_UARTEx_SetRxFifoThreshold>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001588:	f7ff fd30 	bl	8000fec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800158c:	4804      	ldr	r0, [pc, #16]	@ (80015a0 <MX_USART3_UART_Init+0x90>)
 800158e:	f008 fc3e 	bl	8009e0e <HAL_UARTEx_DisableFifoMode>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001598:	f7ff fd28 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800159c:	bf00      	nop
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	2400077c 	.word	0x2400077c
 80015a4:	40004800 	.word	0x40004800

080015a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b0be      	sub	sp, #248	@ 0xf8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015c0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015c4:	22b8      	movs	r2, #184	@ 0xb8
 80015c6:	2100      	movs	r1, #0
 80015c8:	4618      	mov	r0, r3
 80015ca:	f00a f8c3 	bl	800b754 <memset>
  if(uartHandle->Instance==UART4)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4aa0      	ldr	r2, [pc, #640]	@ (8001854 <HAL_UART_MspInit+0x2ac>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d173      	bne.n	80016c0 <HAL_UART_MspInit+0x118>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80015d8:	f04f 0202 	mov.w	r2, #2
 80015dc:	f04f 0300 	mov.w	r3, #0
 80015e0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80015e4:	2300      	movs	r3, #0
 80015e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015ee:	4618      	mov	r0, r3
 80015f0:	f004 fdc0 	bl	8006174 <HAL_RCCEx_PeriphCLKConfig>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80015fa:	f7ff fcf7 	bl	8000fec <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80015fe:	4b96      	ldr	r3, [pc, #600]	@ (8001858 <HAL_UART_MspInit+0x2b0>)
 8001600:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001604:	4a94      	ldr	r2, [pc, #592]	@ (8001858 <HAL_UART_MspInit+0x2b0>)
 8001606:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800160a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800160e:	4b92      	ldr	r3, [pc, #584]	@ (8001858 <HAL_UART_MspInit+0x2b0>)
 8001610:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001614:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001618:	627b      	str	r3, [r7, #36]	@ 0x24
 800161a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161c:	4b8e      	ldr	r3, [pc, #568]	@ (8001858 <HAL_UART_MspInit+0x2b0>)
 800161e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001622:	4a8d      	ldr	r2, [pc, #564]	@ (8001858 <HAL_UART_MspInit+0x2b0>)
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800162c:	4b8a      	ldr	r3, [pc, #552]	@ (8001858 <HAL_UART_MspInit+0x2b0>)
 800162e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	623b      	str	r3, [r7, #32]
 8001638:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800163a:	4b87      	ldr	r3, [pc, #540]	@ (8001858 <HAL_UART_MspInit+0x2b0>)
 800163c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001640:	4a85      	ldr	r2, [pc, #532]	@ (8001858 <HAL_UART_MspInit+0x2b0>)
 8001642:	f043 0304 	orr.w	r3, r3, #4
 8001646:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800164a:	4b83      	ldr	r3, [pc, #524]	@ (8001858 <HAL_UART_MspInit+0x2b0>)
 800164c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001650:	f003 0304 	and.w	r3, r3, #4
 8001654:	61fb      	str	r3, [r7, #28]
 8001656:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001658:	2301      	movs	r3, #1
 800165a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165e:	2302      	movs	r3, #2
 8001660:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166a:	2300      	movs	r3, #0
 800166c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001670:	2308      	movs	r3, #8
 8001672:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001676:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800167a:	4619      	mov	r1, r3
 800167c:	4877      	ldr	r0, [pc, #476]	@ (800185c <HAL_UART_MspInit+0x2b4>)
 800167e:	f002 f851 	bl	8003724 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001682:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001686:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168a:	2302      	movs	r3, #2
 800168c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001696:	2300      	movs	r3, #0
 8001698:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800169c:	2308      	movs	r3, #8
 800169e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016a2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80016a6:	4619      	mov	r1, r3
 80016a8:	486d      	ldr	r0, [pc, #436]	@ (8001860 <HAL_UART_MspInit+0x2b8>)
 80016aa:	f002 f83b 	bl	8003724 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2105      	movs	r1, #5
 80016b2:	2034      	movs	r0, #52	@ 0x34
 80016b4:	f000 fb04 	bl	8001cc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80016b8:	2034      	movs	r0, #52	@ 0x34
 80016ba:	f000 fb1b 	bl	8001cf4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80016be:	e0c4      	b.n	800184a <HAL_UART_MspInit+0x2a2>
  else if(uartHandle->Instance==UART5)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a67      	ldr	r2, [pc, #412]	@ (8001864 <HAL_UART_MspInit+0x2bc>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d173      	bne.n	80017b2 <HAL_UART_MspInit+0x20a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80016ca:	f04f 0202 	mov.w	r2, #2
 80016ce:	f04f 0300 	mov.w	r3, #0
 80016d2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80016d6:	2300      	movs	r3, #0
 80016d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016e0:	4618      	mov	r0, r3
 80016e2:	f004 fd47 	bl	8006174 <HAL_RCCEx_PeriphCLKConfig>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <HAL_UART_MspInit+0x148>
      Error_Handler();
 80016ec:	f7ff fc7e 	bl	8000fec <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80016f0:	4b59      	ldr	r3, [pc, #356]	@ (8001858 <HAL_UART_MspInit+0x2b0>)
 80016f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016f6:	4a58      	ldr	r2, [pc, #352]	@ (8001858 <HAL_UART_MspInit+0x2b0>)
 80016f8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80016fc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001700:	4b55      	ldr	r3, [pc, #340]	@ (8001858 <HAL_UART_MspInit+0x2b0>)
 8001702:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001706:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800170a:	61bb      	str	r3, [r7, #24]
 800170c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800170e:	4b52      	ldr	r3, [pc, #328]	@ (8001858 <HAL_UART_MspInit+0x2b0>)
 8001710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001714:	4a50      	ldr	r2, [pc, #320]	@ (8001858 <HAL_UART_MspInit+0x2b0>)
 8001716:	f043 0304 	orr.w	r3, r3, #4
 800171a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800171e:	4b4e      	ldr	r3, [pc, #312]	@ (8001858 <HAL_UART_MspInit+0x2b0>)
 8001720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001724:	f003 0304 	and.w	r3, r3, #4
 8001728:	617b      	str	r3, [r7, #20]
 800172a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800172c:	4b4a      	ldr	r3, [pc, #296]	@ (8001858 <HAL_UART_MspInit+0x2b0>)
 800172e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001732:	4a49      	ldr	r2, [pc, #292]	@ (8001858 <HAL_UART_MspInit+0x2b0>)
 8001734:	f043 0308 	orr.w	r3, r3, #8
 8001738:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800173c:	4b46      	ldr	r3, [pc, #280]	@ (8001858 <HAL_UART_MspInit+0x2b0>)
 800173e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001742:	f003 0308 	and.w	r3, r3, #8
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800174a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800174e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175e:	2300      	movs	r3, #0
 8001760:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001764:	2308      	movs	r3, #8
 8001766:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800176a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800176e:	4619      	mov	r1, r3
 8001770:	483b      	ldr	r0, [pc, #236]	@ (8001860 <HAL_UART_MspInit+0x2b8>)
 8001772:	f001 ffd7 	bl	8003724 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001776:	2304      	movs	r3, #4
 8001778:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177c:	2302      	movs	r3, #2
 800177e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001788:	2300      	movs	r3, #0
 800178a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800178e:	2308      	movs	r3, #8
 8001790:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001794:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001798:	4619      	mov	r1, r3
 800179a:	4833      	ldr	r0, [pc, #204]	@ (8001868 <HAL_UART_MspInit+0x2c0>)
 800179c:	f001 ffc2 	bl	8003724 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 80017a0:	2200      	movs	r2, #0
 80017a2:	2105      	movs	r1, #5
 80017a4:	2035      	movs	r0, #53	@ 0x35
 80017a6:	f000 fa8b 	bl	8001cc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80017aa:	2035      	movs	r0, #53	@ 0x35
 80017ac:	f000 faa2 	bl	8001cf4 <HAL_NVIC_EnableIRQ>
}
 80017b0:	e04b      	b.n	800184a <HAL_UART_MspInit+0x2a2>
  else if(uartHandle->Instance==USART3)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a2d      	ldr	r2, [pc, #180]	@ (800186c <HAL_UART_MspInit+0x2c4>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d146      	bne.n	800184a <HAL_UART_MspInit+0x2a2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80017bc:	f04f 0202 	mov.w	r2, #2
 80017c0:	f04f 0300 	mov.w	r3, #0
 80017c4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80017c8:	2300      	movs	r3, #0
 80017ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017d2:	4618      	mov	r0, r3
 80017d4:	f004 fcce 	bl	8006174 <HAL_RCCEx_PeriphCLKConfig>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_UART_MspInit+0x23a>
      Error_Handler();
 80017de:	f7ff fc05 	bl	8000fec <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80017e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001858 <HAL_UART_MspInit+0x2b0>)
 80017e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001858 <HAL_UART_MspInit+0x2b0>)
 80017ea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017ee:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80017f2:	4b19      	ldr	r3, [pc, #100]	@ (8001858 <HAL_UART_MspInit+0x2b0>)
 80017f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001800:	4b15      	ldr	r3, [pc, #84]	@ (8001858 <HAL_UART_MspInit+0x2b0>)
 8001802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001806:	4a14      	ldr	r2, [pc, #80]	@ (8001858 <HAL_UART_MspInit+0x2b0>)
 8001808:	f043 0308 	orr.w	r3, r3, #8
 800180c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001810:	4b11      	ldr	r3, [pc, #68]	@ (8001858 <HAL_UART_MspInit+0x2b0>)
 8001812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001816:	f003 0308 	and.w	r3, r3, #8
 800181a:	60bb      	str	r3, [r7, #8]
 800181c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 800181e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001822:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001826:	2302      	movs	r3, #2
 8001828:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001832:	2300      	movs	r3, #0
 8001834:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001838:	2307      	movs	r3, #7
 800183a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800183e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001842:	4619      	mov	r1, r3
 8001844:	4808      	ldr	r0, [pc, #32]	@ (8001868 <HAL_UART_MspInit+0x2c0>)
 8001846:	f001 ff6d 	bl	8003724 <HAL_GPIO_Init>
}
 800184a:	bf00      	nop
 800184c:	37f8      	adds	r7, #248	@ 0xf8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40004c00 	.word	0x40004c00
 8001858:	58024400 	.word	0x58024400
 800185c:	58020000 	.word	0x58020000
 8001860:	58020800 	.word	0x58020800
 8001864:	40005000 	.word	0x40005000
 8001868:	58020c00 	.word	0x58020c00
 800186c:	40004800 	.word	0x40004800

08001870 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
	...

08001880 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001880:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001884:	f7ff fd34 	bl	80012f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001888:	480c      	ldr	r0, [pc, #48]	@ (80018bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800188a:	490d      	ldr	r1, [pc, #52]	@ (80018c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800188c:	4a0d      	ldr	r2, [pc, #52]	@ (80018c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800188e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001890:	e002      	b.n	8001898 <LoopCopyDataInit>

08001892 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001892:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001894:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001896:	3304      	adds	r3, #4

08001898 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001898:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800189a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800189c:	d3f9      	bcc.n	8001892 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800189e:	4a0a      	ldr	r2, [pc, #40]	@ (80018c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018a0:	4c0a      	ldr	r4, [pc, #40]	@ (80018cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80018a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018a4:	e001      	b.n	80018aa <LoopFillZerobss>

080018a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018a8:	3204      	adds	r2, #4

080018aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018ac:	d3fb      	bcc.n	80018a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018ae:	f009 fffb 	bl	800b8a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018b2:	f7ff fafd 	bl	8000eb0 <main>
  bx  lr
 80018b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018b8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80018bc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80018c0:	24000070 	.word	0x24000070
  ldr r2, =_sidata
 80018c4:	0800bf14 	.word	0x0800bf14
  ldr r2, =_sbss
 80018c8:	24000130 	.word	0x24000130
  ldr r4, =_ebss
 80018cc:	240046b4 	.word	0x240046b4

080018d0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018d0:	e7fe      	b.n	80018d0 <ADC3_IRQHandler>
	...

080018d4 <MPU6050_Read_Accel>:
/**
 * @brief 
 * 
 */
void MPU6050_Read_Accel (mpu6050_data *mpu_data)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b088      	sub	sp, #32
 80018d8:	af04      	add	r7, sp, #16
 80018da:	6078      	str	r0, [r7, #4]
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H (0x3B) register
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, 0x3B, 1, Rec_Data, 6, 1000);
 80018dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018e0:	9302      	str	r3, [sp, #8]
 80018e2:	2306      	movs	r3, #6
 80018e4:	9301      	str	r3, [sp, #4]
 80018e6:	f107 0308 	add.w	r3, r7, #8
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	2301      	movs	r3, #1
 80018ee:	223b      	movs	r2, #59	@ 0x3b
 80018f0:	21d0      	movs	r1, #208	@ 0xd0
 80018f2:	4826      	ldr	r0, [pc, #152]	@ (800198c <MPU6050_Read_Accel+0xb8>)
 80018f4:	f002 f974 	bl	8003be0 <HAL_I2C_Mem_Read>

	mpu_data->Accel_X_RAW = (uint16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 80018f8:	7a3b      	ldrb	r3, [r7, #8]
 80018fa:	021b      	lsls	r3, r3, #8
 80018fc:	b21a      	sxth	r2, r3
 80018fe:	7a7b      	ldrb	r3, [r7, #9]
 8001900:	b21b      	sxth	r3, r3
 8001902:	4313      	orrs	r3, r2
 8001904:	b21b      	sxth	r3, r3
 8001906:	b29a      	uxth	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	801a      	strh	r2, [r3, #0]
	mpu_data->Accel_Y_RAW = (uint16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 800190c:	7abb      	ldrb	r3, [r7, #10]
 800190e:	021b      	lsls	r3, r3, #8
 8001910:	b21a      	sxth	r2, r3
 8001912:	7afb      	ldrb	r3, [r7, #11]
 8001914:	b21b      	sxth	r3, r3
 8001916:	4313      	orrs	r3, r2
 8001918:	b21b      	sxth	r3, r3
 800191a:	b29a      	uxth	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	805a      	strh	r2, [r3, #2]
	mpu_data->Accel_Z_RAW = (uint16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8001920:	7b3b      	ldrb	r3, [r7, #12]
 8001922:	021b      	lsls	r3, r3, #8
 8001924:	b21a      	sxth	r2, r3
 8001926:	7b7b      	ldrb	r3, [r7, #13]
 8001928:	b21b      	sxth	r3, r3
 800192a:	4313      	orrs	r3, r2
 800192c:	b21b      	sxth	r3, r3
 800192e:	b29a      	uxth	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	809a      	strh	r2, [r3, #4]

	mpu_data->Ax = (float)mpu_data->Accel_X_RAW/16384.0;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	881b      	ldrh	r3, [r3, #0]
 8001938:	ee07 3a90 	vmov	s15, r3
 800193c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001940:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8001990 <MPU6050_Read_Accel+0xbc>
 8001944:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	edc3 7a03 	vstr	s15, [r3, #12]
	mpu_data->Ay = (float)mpu_data->Accel_Y_RAW/16384.0;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	885b      	ldrh	r3, [r3, #2]
 8001952:	ee07 3a90 	vmov	s15, r3
 8001956:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800195a:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8001990 <MPU6050_Read_Accel+0xbc>
 800195e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	edc3 7a04 	vstr	s15, [r3, #16]
	mpu_data->Az = (float)mpu_data->Accel_Z_RAW/16384.0;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	889b      	ldrh	r3, [r3, #4]
 800196c:	ee07 3a90 	vmov	s15, r3
 8001970:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001974:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8001990 <MPU6050_Read_Accel+0xbc>
 8001978:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8001982:	bf00      	nop
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	240005b0 	.word	0x240005b0
 8001990:	46800000 	.word	0x46800000

08001994 <MPU6050_Read_Gyro>:
/**
 * @brief 
 * 
 */
void MPU6050_Read_Gyro (mpu6050_data *mpu_data)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b088      	sub	sp, #32
 8001998:	af04      	add	r7, sp, #16
 800199a:	6078      	str	r0, [r7, #4]
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, 0x43, 1, Rec_Data, 6, 1000);
 800199c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019a0:	9302      	str	r3, [sp, #8]
 80019a2:	2306      	movs	r3, #6
 80019a4:	9301      	str	r3, [sp, #4]
 80019a6:	f107 0308 	add.w	r3, r7, #8
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	2301      	movs	r3, #1
 80019ae:	2243      	movs	r2, #67	@ 0x43
 80019b0:	21d0      	movs	r1, #208	@ 0xd0
 80019b2:	4826      	ldr	r0, [pc, #152]	@ (8001a4c <MPU6050_Read_Gyro+0xb8>)
 80019b4:	f002 f914 	bl	8003be0 <HAL_I2C_Mem_Read>

	mpu_data->Gyro_X_RAW = (uint16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 80019b8:	7a3b      	ldrb	r3, [r7, #8]
 80019ba:	021b      	lsls	r3, r3, #8
 80019bc:	b21a      	sxth	r2, r3
 80019be:	7a7b      	ldrb	r3, [r7, #9]
 80019c0:	b21b      	sxth	r3, r3
 80019c2:	4313      	orrs	r3, r2
 80019c4:	b21b      	sxth	r3, r3
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	80da      	strh	r2, [r3, #6]
	mpu_data->Gyro_Y_RAW = (uint16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 80019cc:	7abb      	ldrb	r3, [r7, #10]
 80019ce:	021b      	lsls	r3, r3, #8
 80019d0:	b21a      	sxth	r2, r3
 80019d2:	7afb      	ldrb	r3, [r7, #11]
 80019d4:	b21b      	sxth	r3, r3
 80019d6:	4313      	orrs	r3, r2
 80019d8:	b21b      	sxth	r3, r3
 80019da:	b29a      	uxth	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	811a      	strh	r2, [r3, #8]
	mpu_data->Gyro_Z_RAW = (uint16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 80019e0:	7b3b      	ldrb	r3, [r7, #12]
 80019e2:	021b      	lsls	r3, r3, #8
 80019e4:	b21a      	sxth	r2, r3
 80019e6:	7b7b      	ldrb	r3, [r7, #13]
 80019e8:	b21b      	sxth	r3, r3
 80019ea:	4313      	orrs	r3, r2
 80019ec:	b21b      	sxth	r3, r3
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	815a      	strh	r2, [r3, #10]

	mpu_data->Gx = (float)mpu_data->Gyro_X_RAW/131.0;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	88db      	ldrh	r3, [r3, #6]
 80019f8:	ee07 3a90 	vmov	s15, r3
 80019fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a00:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8001a50 <MPU6050_Read_Gyro+0xbc>
 8001a04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	edc3 7a06 	vstr	s15, [r3, #24]
	mpu_data->Gy = (float)mpu_data->Gyro_Y_RAW/131.0;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	891b      	ldrh	r3, [r3, #8]
 8001a12:	ee07 3a90 	vmov	s15, r3
 8001a16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a1a:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8001a50 <MPU6050_Read_Gyro+0xbc>
 8001a1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	edc3 7a07 	vstr	s15, [r3, #28]
	mpu_data->Gz = (float)mpu_data->Gyro_Z_RAW/131.0;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	895b      	ldrh	r3, [r3, #10]
 8001a2c:	ee07 3a90 	vmov	s15, r3
 8001a30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a34:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8001a50 <MPU6050_Read_Gyro+0xbc>
 8001a38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8001a42:	bf00      	nop
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	240005b0 	.word	0x240005b0
 8001a50:	43030000 	.word	0x43030000

08001a54 <MPU6050_update_data>:

void MPU6050_update_data(mpu6050_data *mpu_data){
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
      MPU6050_Read_Accel(mpu_data);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff ff39 	bl	80018d4 <MPU6050_Read_Accel>
      MPU6050_Read_Gyro(mpu_data);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7ff ff96 	bl	8001994 <MPU6050_Read_Gyro>
 8001a68:	bf00      	nop
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a76:	2003      	movs	r0, #3
 8001a78:	f000 f917 	bl	8001caa <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a7c:	f004 f962 	bl	8005d44 <HAL_RCC_GetSysClockFreq>
 8001a80:	4602      	mov	r2, r0
 8001a82:	4b15      	ldr	r3, [pc, #84]	@ (8001ad8 <HAL_Init+0x68>)
 8001a84:	699b      	ldr	r3, [r3, #24]
 8001a86:	0a1b      	lsrs	r3, r3, #8
 8001a88:	f003 030f 	and.w	r3, r3, #15
 8001a8c:	4913      	ldr	r1, [pc, #76]	@ (8001adc <HAL_Init+0x6c>)
 8001a8e:	5ccb      	ldrb	r3, [r1, r3]
 8001a90:	f003 031f 	and.w	r3, r3, #31
 8001a94:	fa22 f303 	lsr.w	r3, r2, r3
 8001a98:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a9a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad8 <HAL_Init+0x68>)
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	f003 030f 	and.w	r3, r3, #15
 8001aa2:	4a0e      	ldr	r2, [pc, #56]	@ (8001adc <HAL_Init+0x6c>)
 8001aa4:	5cd3      	ldrb	r3, [r2, r3]
 8001aa6:	f003 031f 	and.w	r3, r3, #31
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab0:	4a0b      	ldr	r2, [pc, #44]	@ (8001ae0 <HAL_Init+0x70>)
 8001ab2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ab4:	4a0b      	ldr	r2, [pc, #44]	@ (8001ae4 <HAL_Init+0x74>)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001aba:	200f      	movs	r0, #15
 8001abc:	f7ff faba 	bl	8001034 <HAL_InitTick>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e002      	b.n	8001ad0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001aca:	f7ff fa95 	bl	8000ff8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	58024400 	.word	0x58024400
 8001adc:	0800becc 	.word	0x0800becc
 8001ae0:	24000004 	.word	0x24000004
 8001ae4:	24000000 	.word	0x24000000

08001ae8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001aec:	4b06      	ldr	r3, [pc, #24]	@ (8001b08 <HAL_IncTick+0x20>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	461a      	mov	r2, r3
 8001af2:	4b06      	ldr	r3, [pc, #24]	@ (8001b0c <HAL_IncTick+0x24>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4413      	add	r3, r2
 8001af8:	4a04      	ldr	r2, [pc, #16]	@ (8001b0c <HAL_IncTick+0x24>)
 8001afa:	6013      	str	r3, [r2, #0]
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	2400000c 	.word	0x2400000c
 8001b0c:	24000810 	.word	0x24000810

08001b10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  return uwTick;
 8001b14:	4b03      	ldr	r3, [pc, #12]	@ (8001b24 <HAL_GetTick+0x14>)
 8001b16:	681b      	ldr	r3, [r3, #0]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	24000810 	.word	0x24000810

08001b28 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001b30:	4b06      	ldr	r3, [pc, #24]	@ (8001b4c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001b38:	4904      	ldr	r1, [pc, #16]	@ (8001b4c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	604b      	str	r3, [r1, #4]
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	58000400 	.word	0x58000400

08001b50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b60:	4b0b      	ldr	r3, [pc, #44]	@ (8001b90 <__NVIC_SetPriorityGrouping+0x40>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b66:	68ba      	ldr	r2, [r7, #8]
 8001b68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b78:	4b06      	ldr	r3, [pc, #24]	@ (8001b94 <__NVIC_SetPriorityGrouping+0x44>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b7e:	4a04      	ldr	r2, [pc, #16]	@ (8001b90 <__NVIC_SetPriorityGrouping+0x40>)
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	60d3      	str	r3, [r2, #12]
}
 8001b84:	bf00      	nop
 8001b86:	3714      	adds	r7, #20
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	e000ed00 	.word	0xe000ed00
 8001b94:	05fa0000 	.word	0x05fa0000

08001b98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b9c:	4b04      	ldr	r3, [pc, #16]	@ (8001bb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	0a1b      	lsrs	r3, r3, #8
 8001ba2:	f003 0307 	and.w	r3, r3, #7
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	e000ed00 	.word	0xe000ed00

08001bb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001bbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	db0b      	blt.n	8001bde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bc6:	88fb      	ldrh	r3, [r7, #6]
 8001bc8:	f003 021f 	and.w	r2, r3, #31
 8001bcc:	4907      	ldr	r1, [pc, #28]	@ (8001bec <__NVIC_EnableIRQ+0x38>)
 8001bce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bd2:	095b      	lsrs	r3, r3, #5
 8001bd4:	2001      	movs	r0, #1
 8001bd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	e000e100 	.word	0xe000e100

08001bf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	6039      	str	r1, [r7, #0]
 8001bfa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001bfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	db0a      	blt.n	8001c1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	490c      	ldr	r1, [pc, #48]	@ (8001c3c <__NVIC_SetPriority+0x4c>)
 8001c0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c0e:	0112      	lsls	r2, r2, #4
 8001c10:	b2d2      	uxtb	r2, r2
 8001c12:	440b      	add	r3, r1
 8001c14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c18:	e00a      	b.n	8001c30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	4908      	ldr	r1, [pc, #32]	@ (8001c40 <__NVIC_SetPriority+0x50>)
 8001c20:	88fb      	ldrh	r3, [r7, #6]
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	3b04      	subs	r3, #4
 8001c28:	0112      	lsls	r2, r2, #4
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	440b      	add	r3, r1
 8001c2e:	761a      	strb	r2, [r3, #24]
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	e000e100 	.word	0xe000e100
 8001c40:	e000ed00 	.word	0xe000ed00

08001c44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b089      	sub	sp, #36	@ 0x24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	f1c3 0307 	rsb	r3, r3, #7
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	bf28      	it	cs
 8001c62:	2304      	movcs	r3, #4
 8001c64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	3304      	adds	r3, #4
 8001c6a:	2b06      	cmp	r3, #6
 8001c6c:	d902      	bls.n	8001c74 <NVIC_EncodePriority+0x30>
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	3b03      	subs	r3, #3
 8001c72:	e000      	b.n	8001c76 <NVIC_EncodePriority+0x32>
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c78:	f04f 32ff 	mov.w	r2, #4294967295
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	43da      	mvns	r2, r3
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	401a      	ands	r2, r3
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	fa01 f303 	lsl.w	r3, r1, r3
 8001c96:	43d9      	mvns	r1, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c9c:	4313      	orrs	r3, r2
         );
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3724      	adds	r7, #36	@ 0x24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7ff ff4c 	bl	8001b50 <__NVIC_SetPriorityGrouping>
}
 8001cb8:	bf00      	nop
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
 8001ccc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cce:	f7ff ff63 	bl	8001b98 <__NVIC_GetPriorityGrouping>
 8001cd2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	68b9      	ldr	r1, [r7, #8]
 8001cd8:	6978      	ldr	r0, [r7, #20]
 8001cda:	f7ff ffb3 	bl	8001c44 <NVIC_EncodePriority>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ce4:	4611      	mov	r1, r2
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff ff82 	bl	8001bf0 <__NVIC_SetPriority>
}
 8001cec:	bf00      	nop
 8001cee:	3718      	adds	r7, #24
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff ff56 	bl	8001bb4 <__NVIC_EnableIRQ>
}
 8001d08:	bf00      	nop
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001d18:	f7ff fefa 	bl	8001b10 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d101      	bne.n	8001d28 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e2dc      	b.n	80022e2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d008      	beq.n	8001d46 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2280      	movs	r2, #128	@ 0x80
 8001d38:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e2cd      	b.n	80022e2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a76      	ldr	r2, [pc, #472]	@ (8001f24 <HAL_DMA_Abort+0x214>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d04a      	beq.n	8001de6 <HAL_DMA_Abort+0xd6>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a74      	ldr	r2, [pc, #464]	@ (8001f28 <HAL_DMA_Abort+0x218>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d045      	beq.n	8001de6 <HAL_DMA_Abort+0xd6>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a73      	ldr	r2, [pc, #460]	@ (8001f2c <HAL_DMA_Abort+0x21c>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d040      	beq.n	8001de6 <HAL_DMA_Abort+0xd6>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a71      	ldr	r2, [pc, #452]	@ (8001f30 <HAL_DMA_Abort+0x220>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d03b      	beq.n	8001de6 <HAL_DMA_Abort+0xd6>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a70      	ldr	r2, [pc, #448]	@ (8001f34 <HAL_DMA_Abort+0x224>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d036      	beq.n	8001de6 <HAL_DMA_Abort+0xd6>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a6e      	ldr	r2, [pc, #440]	@ (8001f38 <HAL_DMA_Abort+0x228>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d031      	beq.n	8001de6 <HAL_DMA_Abort+0xd6>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a6d      	ldr	r2, [pc, #436]	@ (8001f3c <HAL_DMA_Abort+0x22c>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d02c      	beq.n	8001de6 <HAL_DMA_Abort+0xd6>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a6b      	ldr	r2, [pc, #428]	@ (8001f40 <HAL_DMA_Abort+0x230>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d027      	beq.n	8001de6 <HAL_DMA_Abort+0xd6>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a6a      	ldr	r2, [pc, #424]	@ (8001f44 <HAL_DMA_Abort+0x234>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d022      	beq.n	8001de6 <HAL_DMA_Abort+0xd6>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a68      	ldr	r2, [pc, #416]	@ (8001f48 <HAL_DMA_Abort+0x238>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d01d      	beq.n	8001de6 <HAL_DMA_Abort+0xd6>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a67      	ldr	r2, [pc, #412]	@ (8001f4c <HAL_DMA_Abort+0x23c>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d018      	beq.n	8001de6 <HAL_DMA_Abort+0xd6>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a65      	ldr	r2, [pc, #404]	@ (8001f50 <HAL_DMA_Abort+0x240>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d013      	beq.n	8001de6 <HAL_DMA_Abort+0xd6>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a64      	ldr	r2, [pc, #400]	@ (8001f54 <HAL_DMA_Abort+0x244>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d00e      	beq.n	8001de6 <HAL_DMA_Abort+0xd6>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a62      	ldr	r2, [pc, #392]	@ (8001f58 <HAL_DMA_Abort+0x248>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d009      	beq.n	8001de6 <HAL_DMA_Abort+0xd6>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a61      	ldr	r2, [pc, #388]	@ (8001f5c <HAL_DMA_Abort+0x24c>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d004      	beq.n	8001de6 <HAL_DMA_Abort+0xd6>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a5f      	ldr	r2, [pc, #380]	@ (8001f60 <HAL_DMA_Abort+0x250>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d101      	bne.n	8001dea <HAL_DMA_Abort+0xda>
 8001de6:	2301      	movs	r3, #1
 8001de8:	e000      	b.n	8001dec <HAL_DMA_Abort+0xdc>
 8001dea:	2300      	movs	r3, #0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d013      	beq.n	8001e18 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f022 021e 	bic.w	r2, r2, #30
 8001dfe:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	695a      	ldr	r2, [r3, #20]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e0e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	617b      	str	r3, [r7, #20]
 8001e16:	e00a      	b.n	8001e2e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 020e 	bic.w	r2, r2, #14
 8001e26:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a3c      	ldr	r2, [pc, #240]	@ (8001f24 <HAL_DMA_Abort+0x214>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d072      	beq.n	8001f1e <HAL_DMA_Abort+0x20e>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a3a      	ldr	r2, [pc, #232]	@ (8001f28 <HAL_DMA_Abort+0x218>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d06d      	beq.n	8001f1e <HAL_DMA_Abort+0x20e>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a39      	ldr	r2, [pc, #228]	@ (8001f2c <HAL_DMA_Abort+0x21c>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d068      	beq.n	8001f1e <HAL_DMA_Abort+0x20e>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a37      	ldr	r2, [pc, #220]	@ (8001f30 <HAL_DMA_Abort+0x220>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d063      	beq.n	8001f1e <HAL_DMA_Abort+0x20e>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a36      	ldr	r2, [pc, #216]	@ (8001f34 <HAL_DMA_Abort+0x224>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d05e      	beq.n	8001f1e <HAL_DMA_Abort+0x20e>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a34      	ldr	r2, [pc, #208]	@ (8001f38 <HAL_DMA_Abort+0x228>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d059      	beq.n	8001f1e <HAL_DMA_Abort+0x20e>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a33      	ldr	r2, [pc, #204]	@ (8001f3c <HAL_DMA_Abort+0x22c>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d054      	beq.n	8001f1e <HAL_DMA_Abort+0x20e>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a31      	ldr	r2, [pc, #196]	@ (8001f40 <HAL_DMA_Abort+0x230>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d04f      	beq.n	8001f1e <HAL_DMA_Abort+0x20e>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a30      	ldr	r2, [pc, #192]	@ (8001f44 <HAL_DMA_Abort+0x234>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d04a      	beq.n	8001f1e <HAL_DMA_Abort+0x20e>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a2e      	ldr	r2, [pc, #184]	@ (8001f48 <HAL_DMA_Abort+0x238>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d045      	beq.n	8001f1e <HAL_DMA_Abort+0x20e>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a2d      	ldr	r2, [pc, #180]	@ (8001f4c <HAL_DMA_Abort+0x23c>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d040      	beq.n	8001f1e <HAL_DMA_Abort+0x20e>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a2b      	ldr	r2, [pc, #172]	@ (8001f50 <HAL_DMA_Abort+0x240>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d03b      	beq.n	8001f1e <HAL_DMA_Abort+0x20e>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a2a      	ldr	r2, [pc, #168]	@ (8001f54 <HAL_DMA_Abort+0x244>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d036      	beq.n	8001f1e <HAL_DMA_Abort+0x20e>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a28      	ldr	r2, [pc, #160]	@ (8001f58 <HAL_DMA_Abort+0x248>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d031      	beq.n	8001f1e <HAL_DMA_Abort+0x20e>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a27      	ldr	r2, [pc, #156]	@ (8001f5c <HAL_DMA_Abort+0x24c>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d02c      	beq.n	8001f1e <HAL_DMA_Abort+0x20e>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a25      	ldr	r2, [pc, #148]	@ (8001f60 <HAL_DMA_Abort+0x250>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d027      	beq.n	8001f1e <HAL_DMA_Abort+0x20e>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a24      	ldr	r2, [pc, #144]	@ (8001f64 <HAL_DMA_Abort+0x254>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d022      	beq.n	8001f1e <HAL_DMA_Abort+0x20e>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a22      	ldr	r2, [pc, #136]	@ (8001f68 <HAL_DMA_Abort+0x258>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d01d      	beq.n	8001f1e <HAL_DMA_Abort+0x20e>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a21      	ldr	r2, [pc, #132]	@ (8001f6c <HAL_DMA_Abort+0x25c>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d018      	beq.n	8001f1e <HAL_DMA_Abort+0x20e>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a1f      	ldr	r2, [pc, #124]	@ (8001f70 <HAL_DMA_Abort+0x260>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d013      	beq.n	8001f1e <HAL_DMA_Abort+0x20e>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a1e      	ldr	r2, [pc, #120]	@ (8001f74 <HAL_DMA_Abort+0x264>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d00e      	beq.n	8001f1e <HAL_DMA_Abort+0x20e>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a1c      	ldr	r2, [pc, #112]	@ (8001f78 <HAL_DMA_Abort+0x268>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d009      	beq.n	8001f1e <HAL_DMA_Abort+0x20e>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a1b      	ldr	r2, [pc, #108]	@ (8001f7c <HAL_DMA_Abort+0x26c>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d004      	beq.n	8001f1e <HAL_DMA_Abort+0x20e>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a19      	ldr	r2, [pc, #100]	@ (8001f80 <HAL_DMA_Abort+0x270>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d132      	bne.n	8001f84 <HAL_DMA_Abort+0x274>
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e031      	b.n	8001f86 <HAL_DMA_Abort+0x276>
 8001f22:	bf00      	nop
 8001f24:	40020010 	.word	0x40020010
 8001f28:	40020028 	.word	0x40020028
 8001f2c:	40020040 	.word	0x40020040
 8001f30:	40020058 	.word	0x40020058
 8001f34:	40020070 	.word	0x40020070
 8001f38:	40020088 	.word	0x40020088
 8001f3c:	400200a0 	.word	0x400200a0
 8001f40:	400200b8 	.word	0x400200b8
 8001f44:	40020410 	.word	0x40020410
 8001f48:	40020428 	.word	0x40020428
 8001f4c:	40020440 	.word	0x40020440
 8001f50:	40020458 	.word	0x40020458
 8001f54:	40020470 	.word	0x40020470
 8001f58:	40020488 	.word	0x40020488
 8001f5c:	400204a0 	.word	0x400204a0
 8001f60:	400204b8 	.word	0x400204b8
 8001f64:	58025408 	.word	0x58025408
 8001f68:	5802541c 	.word	0x5802541c
 8001f6c:	58025430 	.word	0x58025430
 8001f70:	58025444 	.word	0x58025444
 8001f74:	58025458 	.word	0x58025458
 8001f78:	5802546c 	.word	0x5802546c
 8001f7c:	58025480 	.word	0x58025480
 8001f80:	58025494 	.word	0x58025494
 8001f84:	2300      	movs	r3, #0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d007      	beq.n	8001f9a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f98:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a6d      	ldr	r2, [pc, #436]	@ (8002154 <HAL_DMA_Abort+0x444>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d04a      	beq.n	800203a <HAL_DMA_Abort+0x32a>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a6b      	ldr	r2, [pc, #428]	@ (8002158 <HAL_DMA_Abort+0x448>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d045      	beq.n	800203a <HAL_DMA_Abort+0x32a>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a6a      	ldr	r2, [pc, #424]	@ (800215c <HAL_DMA_Abort+0x44c>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d040      	beq.n	800203a <HAL_DMA_Abort+0x32a>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a68      	ldr	r2, [pc, #416]	@ (8002160 <HAL_DMA_Abort+0x450>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d03b      	beq.n	800203a <HAL_DMA_Abort+0x32a>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a67      	ldr	r2, [pc, #412]	@ (8002164 <HAL_DMA_Abort+0x454>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d036      	beq.n	800203a <HAL_DMA_Abort+0x32a>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a65      	ldr	r2, [pc, #404]	@ (8002168 <HAL_DMA_Abort+0x458>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d031      	beq.n	800203a <HAL_DMA_Abort+0x32a>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a64      	ldr	r2, [pc, #400]	@ (800216c <HAL_DMA_Abort+0x45c>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d02c      	beq.n	800203a <HAL_DMA_Abort+0x32a>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a62      	ldr	r2, [pc, #392]	@ (8002170 <HAL_DMA_Abort+0x460>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d027      	beq.n	800203a <HAL_DMA_Abort+0x32a>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a61      	ldr	r2, [pc, #388]	@ (8002174 <HAL_DMA_Abort+0x464>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d022      	beq.n	800203a <HAL_DMA_Abort+0x32a>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a5f      	ldr	r2, [pc, #380]	@ (8002178 <HAL_DMA_Abort+0x468>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d01d      	beq.n	800203a <HAL_DMA_Abort+0x32a>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a5e      	ldr	r2, [pc, #376]	@ (800217c <HAL_DMA_Abort+0x46c>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d018      	beq.n	800203a <HAL_DMA_Abort+0x32a>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a5c      	ldr	r2, [pc, #368]	@ (8002180 <HAL_DMA_Abort+0x470>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d013      	beq.n	800203a <HAL_DMA_Abort+0x32a>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a5b      	ldr	r2, [pc, #364]	@ (8002184 <HAL_DMA_Abort+0x474>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d00e      	beq.n	800203a <HAL_DMA_Abort+0x32a>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a59      	ldr	r2, [pc, #356]	@ (8002188 <HAL_DMA_Abort+0x478>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d009      	beq.n	800203a <HAL_DMA_Abort+0x32a>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a58      	ldr	r2, [pc, #352]	@ (800218c <HAL_DMA_Abort+0x47c>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d004      	beq.n	800203a <HAL_DMA_Abort+0x32a>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a56      	ldr	r2, [pc, #344]	@ (8002190 <HAL_DMA_Abort+0x480>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d108      	bne.n	800204c <HAL_DMA_Abort+0x33c>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 0201 	bic.w	r2, r2, #1
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	e007      	b.n	800205c <HAL_DMA_Abort+0x34c>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f022 0201 	bic.w	r2, r2, #1
 800205a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800205c:	e013      	b.n	8002086 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800205e:	f7ff fd57 	bl	8001b10 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b05      	cmp	r3, #5
 800206a:	d90c      	bls.n	8002086 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2220      	movs	r2, #32
 8002070:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2203      	movs	r2, #3
 8002076:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e12d      	b.n	80022e2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1e5      	bne.n	800205e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a2f      	ldr	r2, [pc, #188]	@ (8002154 <HAL_DMA_Abort+0x444>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d04a      	beq.n	8002132 <HAL_DMA_Abort+0x422>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a2d      	ldr	r2, [pc, #180]	@ (8002158 <HAL_DMA_Abort+0x448>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d045      	beq.n	8002132 <HAL_DMA_Abort+0x422>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a2c      	ldr	r2, [pc, #176]	@ (800215c <HAL_DMA_Abort+0x44c>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d040      	beq.n	8002132 <HAL_DMA_Abort+0x422>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a2a      	ldr	r2, [pc, #168]	@ (8002160 <HAL_DMA_Abort+0x450>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d03b      	beq.n	8002132 <HAL_DMA_Abort+0x422>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a29      	ldr	r2, [pc, #164]	@ (8002164 <HAL_DMA_Abort+0x454>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d036      	beq.n	8002132 <HAL_DMA_Abort+0x422>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a27      	ldr	r2, [pc, #156]	@ (8002168 <HAL_DMA_Abort+0x458>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d031      	beq.n	8002132 <HAL_DMA_Abort+0x422>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a26      	ldr	r2, [pc, #152]	@ (800216c <HAL_DMA_Abort+0x45c>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d02c      	beq.n	8002132 <HAL_DMA_Abort+0x422>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a24      	ldr	r2, [pc, #144]	@ (8002170 <HAL_DMA_Abort+0x460>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d027      	beq.n	8002132 <HAL_DMA_Abort+0x422>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a23      	ldr	r2, [pc, #140]	@ (8002174 <HAL_DMA_Abort+0x464>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d022      	beq.n	8002132 <HAL_DMA_Abort+0x422>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a21      	ldr	r2, [pc, #132]	@ (8002178 <HAL_DMA_Abort+0x468>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d01d      	beq.n	8002132 <HAL_DMA_Abort+0x422>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a20      	ldr	r2, [pc, #128]	@ (800217c <HAL_DMA_Abort+0x46c>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d018      	beq.n	8002132 <HAL_DMA_Abort+0x422>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a1e      	ldr	r2, [pc, #120]	@ (8002180 <HAL_DMA_Abort+0x470>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d013      	beq.n	8002132 <HAL_DMA_Abort+0x422>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a1d      	ldr	r2, [pc, #116]	@ (8002184 <HAL_DMA_Abort+0x474>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d00e      	beq.n	8002132 <HAL_DMA_Abort+0x422>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a1b      	ldr	r2, [pc, #108]	@ (8002188 <HAL_DMA_Abort+0x478>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d009      	beq.n	8002132 <HAL_DMA_Abort+0x422>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a1a      	ldr	r2, [pc, #104]	@ (800218c <HAL_DMA_Abort+0x47c>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d004      	beq.n	8002132 <HAL_DMA_Abort+0x422>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a18      	ldr	r2, [pc, #96]	@ (8002190 <HAL_DMA_Abort+0x480>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d101      	bne.n	8002136 <HAL_DMA_Abort+0x426>
 8002132:	2301      	movs	r3, #1
 8002134:	e000      	b.n	8002138 <HAL_DMA_Abort+0x428>
 8002136:	2300      	movs	r3, #0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d02b      	beq.n	8002194 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002140:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002146:	f003 031f 	and.w	r3, r3, #31
 800214a:	223f      	movs	r2, #63	@ 0x3f
 800214c:	409a      	lsls	r2, r3
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	609a      	str	r2, [r3, #8]
 8002152:	e02a      	b.n	80021aa <HAL_DMA_Abort+0x49a>
 8002154:	40020010 	.word	0x40020010
 8002158:	40020028 	.word	0x40020028
 800215c:	40020040 	.word	0x40020040
 8002160:	40020058 	.word	0x40020058
 8002164:	40020070 	.word	0x40020070
 8002168:	40020088 	.word	0x40020088
 800216c:	400200a0 	.word	0x400200a0
 8002170:	400200b8 	.word	0x400200b8
 8002174:	40020410 	.word	0x40020410
 8002178:	40020428 	.word	0x40020428
 800217c:	40020440 	.word	0x40020440
 8002180:	40020458 	.word	0x40020458
 8002184:	40020470 	.word	0x40020470
 8002188:	40020488 	.word	0x40020488
 800218c:	400204a0 	.word	0x400204a0
 8002190:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002198:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800219e:	f003 031f 	and.w	r3, r3, #31
 80021a2:	2201      	movs	r2, #1
 80021a4:	409a      	lsls	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a4f      	ldr	r2, [pc, #316]	@ (80022ec <HAL_DMA_Abort+0x5dc>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d072      	beq.n	800229a <HAL_DMA_Abort+0x58a>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a4d      	ldr	r2, [pc, #308]	@ (80022f0 <HAL_DMA_Abort+0x5e0>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d06d      	beq.n	800229a <HAL_DMA_Abort+0x58a>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a4c      	ldr	r2, [pc, #304]	@ (80022f4 <HAL_DMA_Abort+0x5e4>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d068      	beq.n	800229a <HAL_DMA_Abort+0x58a>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a4a      	ldr	r2, [pc, #296]	@ (80022f8 <HAL_DMA_Abort+0x5e8>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d063      	beq.n	800229a <HAL_DMA_Abort+0x58a>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a49      	ldr	r2, [pc, #292]	@ (80022fc <HAL_DMA_Abort+0x5ec>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d05e      	beq.n	800229a <HAL_DMA_Abort+0x58a>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a47      	ldr	r2, [pc, #284]	@ (8002300 <HAL_DMA_Abort+0x5f0>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d059      	beq.n	800229a <HAL_DMA_Abort+0x58a>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a46      	ldr	r2, [pc, #280]	@ (8002304 <HAL_DMA_Abort+0x5f4>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d054      	beq.n	800229a <HAL_DMA_Abort+0x58a>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a44      	ldr	r2, [pc, #272]	@ (8002308 <HAL_DMA_Abort+0x5f8>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d04f      	beq.n	800229a <HAL_DMA_Abort+0x58a>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a43      	ldr	r2, [pc, #268]	@ (800230c <HAL_DMA_Abort+0x5fc>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d04a      	beq.n	800229a <HAL_DMA_Abort+0x58a>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a41      	ldr	r2, [pc, #260]	@ (8002310 <HAL_DMA_Abort+0x600>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d045      	beq.n	800229a <HAL_DMA_Abort+0x58a>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a40      	ldr	r2, [pc, #256]	@ (8002314 <HAL_DMA_Abort+0x604>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d040      	beq.n	800229a <HAL_DMA_Abort+0x58a>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a3e      	ldr	r2, [pc, #248]	@ (8002318 <HAL_DMA_Abort+0x608>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d03b      	beq.n	800229a <HAL_DMA_Abort+0x58a>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a3d      	ldr	r2, [pc, #244]	@ (800231c <HAL_DMA_Abort+0x60c>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d036      	beq.n	800229a <HAL_DMA_Abort+0x58a>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a3b      	ldr	r2, [pc, #236]	@ (8002320 <HAL_DMA_Abort+0x610>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d031      	beq.n	800229a <HAL_DMA_Abort+0x58a>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a3a      	ldr	r2, [pc, #232]	@ (8002324 <HAL_DMA_Abort+0x614>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d02c      	beq.n	800229a <HAL_DMA_Abort+0x58a>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a38      	ldr	r2, [pc, #224]	@ (8002328 <HAL_DMA_Abort+0x618>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d027      	beq.n	800229a <HAL_DMA_Abort+0x58a>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a37      	ldr	r2, [pc, #220]	@ (800232c <HAL_DMA_Abort+0x61c>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d022      	beq.n	800229a <HAL_DMA_Abort+0x58a>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a35      	ldr	r2, [pc, #212]	@ (8002330 <HAL_DMA_Abort+0x620>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d01d      	beq.n	800229a <HAL_DMA_Abort+0x58a>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a34      	ldr	r2, [pc, #208]	@ (8002334 <HAL_DMA_Abort+0x624>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d018      	beq.n	800229a <HAL_DMA_Abort+0x58a>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a32      	ldr	r2, [pc, #200]	@ (8002338 <HAL_DMA_Abort+0x628>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d013      	beq.n	800229a <HAL_DMA_Abort+0x58a>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a31      	ldr	r2, [pc, #196]	@ (800233c <HAL_DMA_Abort+0x62c>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d00e      	beq.n	800229a <HAL_DMA_Abort+0x58a>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a2f      	ldr	r2, [pc, #188]	@ (8002340 <HAL_DMA_Abort+0x630>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d009      	beq.n	800229a <HAL_DMA_Abort+0x58a>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a2e      	ldr	r2, [pc, #184]	@ (8002344 <HAL_DMA_Abort+0x634>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d004      	beq.n	800229a <HAL_DMA_Abort+0x58a>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a2c      	ldr	r2, [pc, #176]	@ (8002348 <HAL_DMA_Abort+0x638>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d101      	bne.n	800229e <HAL_DMA_Abort+0x58e>
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <HAL_DMA_Abort+0x590>
 800229e:	2300      	movs	r3, #0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d015      	beq.n	80022d0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80022ac:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00c      	beq.n	80022d0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022c4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80022ce:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3718      	adds	r7, #24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40020010 	.word	0x40020010
 80022f0:	40020028 	.word	0x40020028
 80022f4:	40020040 	.word	0x40020040
 80022f8:	40020058 	.word	0x40020058
 80022fc:	40020070 	.word	0x40020070
 8002300:	40020088 	.word	0x40020088
 8002304:	400200a0 	.word	0x400200a0
 8002308:	400200b8 	.word	0x400200b8
 800230c:	40020410 	.word	0x40020410
 8002310:	40020428 	.word	0x40020428
 8002314:	40020440 	.word	0x40020440
 8002318:	40020458 	.word	0x40020458
 800231c:	40020470 	.word	0x40020470
 8002320:	40020488 	.word	0x40020488
 8002324:	400204a0 	.word	0x400204a0
 8002328:	400204b8 	.word	0x400204b8
 800232c:	58025408 	.word	0x58025408
 8002330:	5802541c 	.word	0x5802541c
 8002334:	58025430 	.word	0x58025430
 8002338:	58025444 	.word	0x58025444
 800233c:	58025458 	.word	0x58025458
 8002340:	5802546c 	.word	0x5802546c
 8002344:	58025480 	.word	0x58025480
 8002348:	58025494 	.word	0x58025494

0800234c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e237      	b.n	80027ce <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d004      	beq.n	8002374 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2280      	movs	r2, #128	@ 0x80
 800236e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e22c      	b.n	80027ce <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a5c      	ldr	r2, [pc, #368]	@ (80024ec <HAL_DMA_Abort_IT+0x1a0>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d04a      	beq.n	8002414 <HAL_DMA_Abort_IT+0xc8>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a5b      	ldr	r2, [pc, #364]	@ (80024f0 <HAL_DMA_Abort_IT+0x1a4>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d045      	beq.n	8002414 <HAL_DMA_Abort_IT+0xc8>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a59      	ldr	r2, [pc, #356]	@ (80024f4 <HAL_DMA_Abort_IT+0x1a8>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d040      	beq.n	8002414 <HAL_DMA_Abort_IT+0xc8>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a58      	ldr	r2, [pc, #352]	@ (80024f8 <HAL_DMA_Abort_IT+0x1ac>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d03b      	beq.n	8002414 <HAL_DMA_Abort_IT+0xc8>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a56      	ldr	r2, [pc, #344]	@ (80024fc <HAL_DMA_Abort_IT+0x1b0>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d036      	beq.n	8002414 <HAL_DMA_Abort_IT+0xc8>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a55      	ldr	r2, [pc, #340]	@ (8002500 <HAL_DMA_Abort_IT+0x1b4>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d031      	beq.n	8002414 <HAL_DMA_Abort_IT+0xc8>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a53      	ldr	r2, [pc, #332]	@ (8002504 <HAL_DMA_Abort_IT+0x1b8>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d02c      	beq.n	8002414 <HAL_DMA_Abort_IT+0xc8>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a52      	ldr	r2, [pc, #328]	@ (8002508 <HAL_DMA_Abort_IT+0x1bc>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d027      	beq.n	8002414 <HAL_DMA_Abort_IT+0xc8>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a50      	ldr	r2, [pc, #320]	@ (800250c <HAL_DMA_Abort_IT+0x1c0>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d022      	beq.n	8002414 <HAL_DMA_Abort_IT+0xc8>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a4f      	ldr	r2, [pc, #316]	@ (8002510 <HAL_DMA_Abort_IT+0x1c4>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d01d      	beq.n	8002414 <HAL_DMA_Abort_IT+0xc8>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a4d      	ldr	r2, [pc, #308]	@ (8002514 <HAL_DMA_Abort_IT+0x1c8>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d018      	beq.n	8002414 <HAL_DMA_Abort_IT+0xc8>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a4c      	ldr	r2, [pc, #304]	@ (8002518 <HAL_DMA_Abort_IT+0x1cc>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d013      	beq.n	8002414 <HAL_DMA_Abort_IT+0xc8>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a4a      	ldr	r2, [pc, #296]	@ (800251c <HAL_DMA_Abort_IT+0x1d0>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d00e      	beq.n	8002414 <HAL_DMA_Abort_IT+0xc8>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a49      	ldr	r2, [pc, #292]	@ (8002520 <HAL_DMA_Abort_IT+0x1d4>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d009      	beq.n	8002414 <HAL_DMA_Abort_IT+0xc8>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a47      	ldr	r2, [pc, #284]	@ (8002524 <HAL_DMA_Abort_IT+0x1d8>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d004      	beq.n	8002414 <HAL_DMA_Abort_IT+0xc8>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a46      	ldr	r2, [pc, #280]	@ (8002528 <HAL_DMA_Abort_IT+0x1dc>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d101      	bne.n	8002418 <HAL_DMA_Abort_IT+0xcc>
 8002414:	2301      	movs	r3, #1
 8002416:	e000      	b.n	800241a <HAL_DMA_Abort_IT+0xce>
 8002418:	2300      	movs	r3, #0
 800241a:	2b00      	cmp	r3, #0
 800241c:	f000 8086 	beq.w	800252c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2204      	movs	r2, #4
 8002424:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a2f      	ldr	r2, [pc, #188]	@ (80024ec <HAL_DMA_Abort_IT+0x1a0>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d04a      	beq.n	80024c8 <HAL_DMA_Abort_IT+0x17c>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a2e      	ldr	r2, [pc, #184]	@ (80024f0 <HAL_DMA_Abort_IT+0x1a4>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d045      	beq.n	80024c8 <HAL_DMA_Abort_IT+0x17c>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a2c      	ldr	r2, [pc, #176]	@ (80024f4 <HAL_DMA_Abort_IT+0x1a8>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d040      	beq.n	80024c8 <HAL_DMA_Abort_IT+0x17c>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a2b      	ldr	r2, [pc, #172]	@ (80024f8 <HAL_DMA_Abort_IT+0x1ac>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d03b      	beq.n	80024c8 <HAL_DMA_Abort_IT+0x17c>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a29      	ldr	r2, [pc, #164]	@ (80024fc <HAL_DMA_Abort_IT+0x1b0>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d036      	beq.n	80024c8 <HAL_DMA_Abort_IT+0x17c>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a28      	ldr	r2, [pc, #160]	@ (8002500 <HAL_DMA_Abort_IT+0x1b4>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d031      	beq.n	80024c8 <HAL_DMA_Abort_IT+0x17c>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a26      	ldr	r2, [pc, #152]	@ (8002504 <HAL_DMA_Abort_IT+0x1b8>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d02c      	beq.n	80024c8 <HAL_DMA_Abort_IT+0x17c>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a25      	ldr	r2, [pc, #148]	@ (8002508 <HAL_DMA_Abort_IT+0x1bc>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d027      	beq.n	80024c8 <HAL_DMA_Abort_IT+0x17c>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a23      	ldr	r2, [pc, #140]	@ (800250c <HAL_DMA_Abort_IT+0x1c0>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d022      	beq.n	80024c8 <HAL_DMA_Abort_IT+0x17c>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a22      	ldr	r2, [pc, #136]	@ (8002510 <HAL_DMA_Abort_IT+0x1c4>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d01d      	beq.n	80024c8 <HAL_DMA_Abort_IT+0x17c>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a20      	ldr	r2, [pc, #128]	@ (8002514 <HAL_DMA_Abort_IT+0x1c8>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d018      	beq.n	80024c8 <HAL_DMA_Abort_IT+0x17c>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a1f      	ldr	r2, [pc, #124]	@ (8002518 <HAL_DMA_Abort_IT+0x1cc>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d013      	beq.n	80024c8 <HAL_DMA_Abort_IT+0x17c>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a1d      	ldr	r2, [pc, #116]	@ (800251c <HAL_DMA_Abort_IT+0x1d0>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d00e      	beq.n	80024c8 <HAL_DMA_Abort_IT+0x17c>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a1c      	ldr	r2, [pc, #112]	@ (8002520 <HAL_DMA_Abort_IT+0x1d4>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d009      	beq.n	80024c8 <HAL_DMA_Abort_IT+0x17c>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a1a      	ldr	r2, [pc, #104]	@ (8002524 <HAL_DMA_Abort_IT+0x1d8>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d004      	beq.n	80024c8 <HAL_DMA_Abort_IT+0x17c>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a19      	ldr	r2, [pc, #100]	@ (8002528 <HAL_DMA_Abort_IT+0x1dc>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d108      	bne.n	80024da <HAL_DMA_Abort_IT+0x18e>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 0201 	bic.w	r2, r2, #1
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	e178      	b.n	80027cc <HAL_DMA_Abort_IT+0x480>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f022 0201 	bic.w	r2, r2, #1
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	e16f      	b.n	80027cc <HAL_DMA_Abort_IT+0x480>
 80024ec:	40020010 	.word	0x40020010
 80024f0:	40020028 	.word	0x40020028
 80024f4:	40020040 	.word	0x40020040
 80024f8:	40020058 	.word	0x40020058
 80024fc:	40020070 	.word	0x40020070
 8002500:	40020088 	.word	0x40020088
 8002504:	400200a0 	.word	0x400200a0
 8002508:	400200b8 	.word	0x400200b8
 800250c:	40020410 	.word	0x40020410
 8002510:	40020428 	.word	0x40020428
 8002514:	40020440 	.word	0x40020440
 8002518:	40020458 	.word	0x40020458
 800251c:	40020470 	.word	0x40020470
 8002520:	40020488 	.word	0x40020488
 8002524:	400204a0 	.word	0x400204a0
 8002528:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 020e 	bic.w	r2, r2, #14
 800253a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a6c      	ldr	r2, [pc, #432]	@ (80026f4 <HAL_DMA_Abort_IT+0x3a8>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d04a      	beq.n	80025dc <HAL_DMA_Abort_IT+0x290>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a6b      	ldr	r2, [pc, #428]	@ (80026f8 <HAL_DMA_Abort_IT+0x3ac>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d045      	beq.n	80025dc <HAL_DMA_Abort_IT+0x290>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a69      	ldr	r2, [pc, #420]	@ (80026fc <HAL_DMA_Abort_IT+0x3b0>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d040      	beq.n	80025dc <HAL_DMA_Abort_IT+0x290>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a68      	ldr	r2, [pc, #416]	@ (8002700 <HAL_DMA_Abort_IT+0x3b4>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d03b      	beq.n	80025dc <HAL_DMA_Abort_IT+0x290>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a66      	ldr	r2, [pc, #408]	@ (8002704 <HAL_DMA_Abort_IT+0x3b8>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d036      	beq.n	80025dc <HAL_DMA_Abort_IT+0x290>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a65      	ldr	r2, [pc, #404]	@ (8002708 <HAL_DMA_Abort_IT+0x3bc>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d031      	beq.n	80025dc <HAL_DMA_Abort_IT+0x290>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a63      	ldr	r2, [pc, #396]	@ (800270c <HAL_DMA_Abort_IT+0x3c0>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d02c      	beq.n	80025dc <HAL_DMA_Abort_IT+0x290>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a62      	ldr	r2, [pc, #392]	@ (8002710 <HAL_DMA_Abort_IT+0x3c4>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d027      	beq.n	80025dc <HAL_DMA_Abort_IT+0x290>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a60      	ldr	r2, [pc, #384]	@ (8002714 <HAL_DMA_Abort_IT+0x3c8>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d022      	beq.n	80025dc <HAL_DMA_Abort_IT+0x290>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a5f      	ldr	r2, [pc, #380]	@ (8002718 <HAL_DMA_Abort_IT+0x3cc>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d01d      	beq.n	80025dc <HAL_DMA_Abort_IT+0x290>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a5d      	ldr	r2, [pc, #372]	@ (800271c <HAL_DMA_Abort_IT+0x3d0>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d018      	beq.n	80025dc <HAL_DMA_Abort_IT+0x290>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a5c      	ldr	r2, [pc, #368]	@ (8002720 <HAL_DMA_Abort_IT+0x3d4>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d013      	beq.n	80025dc <HAL_DMA_Abort_IT+0x290>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a5a      	ldr	r2, [pc, #360]	@ (8002724 <HAL_DMA_Abort_IT+0x3d8>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d00e      	beq.n	80025dc <HAL_DMA_Abort_IT+0x290>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a59      	ldr	r2, [pc, #356]	@ (8002728 <HAL_DMA_Abort_IT+0x3dc>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d009      	beq.n	80025dc <HAL_DMA_Abort_IT+0x290>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a57      	ldr	r2, [pc, #348]	@ (800272c <HAL_DMA_Abort_IT+0x3e0>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d004      	beq.n	80025dc <HAL_DMA_Abort_IT+0x290>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a56      	ldr	r2, [pc, #344]	@ (8002730 <HAL_DMA_Abort_IT+0x3e4>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d108      	bne.n	80025ee <HAL_DMA_Abort_IT+0x2a2>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 0201 	bic.w	r2, r2, #1
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	e007      	b.n	80025fe <HAL_DMA_Abort_IT+0x2b2>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 0201 	bic.w	r2, r2, #1
 80025fc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a3c      	ldr	r2, [pc, #240]	@ (80026f4 <HAL_DMA_Abort_IT+0x3a8>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d072      	beq.n	80026ee <HAL_DMA_Abort_IT+0x3a2>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a3a      	ldr	r2, [pc, #232]	@ (80026f8 <HAL_DMA_Abort_IT+0x3ac>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d06d      	beq.n	80026ee <HAL_DMA_Abort_IT+0x3a2>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a39      	ldr	r2, [pc, #228]	@ (80026fc <HAL_DMA_Abort_IT+0x3b0>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d068      	beq.n	80026ee <HAL_DMA_Abort_IT+0x3a2>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a37      	ldr	r2, [pc, #220]	@ (8002700 <HAL_DMA_Abort_IT+0x3b4>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d063      	beq.n	80026ee <HAL_DMA_Abort_IT+0x3a2>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a36      	ldr	r2, [pc, #216]	@ (8002704 <HAL_DMA_Abort_IT+0x3b8>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d05e      	beq.n	80026ee <HAL_DMA_Abort_IT+0x3a2>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a34      	ldr	r2, [pc, #208]	@ (8002708 <HAL_DMA_Abort_IT+0x3bc>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d059      	beq.n	80026ee <HAL_DMA_Abort_IT+0x3a2>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a33      	ldr	r2, [pc, #204]	@ (800270c <HAL_DMA_Abort_IT+0x3c0>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d054      	beq.n	80026ee <HAL_DMA_Abort_IT+0x3a2>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a31      	ldr	r2, [pc, #196]	@ (8002710 <HAL_DMA_Abort_IT+0x3c4>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d04f      	beq.n	80026ee <HAL_DMA_Abort_IT+0x3a2>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a30      	ldr	r2, [pc, #192]	@ (8002714 <HAL_DMA_Abort_IT+0x3c8>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d04a      	beq.n	80026ee <HAL_DMA_Abort_IT+0x3a2>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a2e      	ldr	r2, [pc, #184]	@ (8002718 <HAL_DMA_Abort_IT+0x3cc>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d045      	beq.n	80026ee <HAL_DMA_Abort_IT+0x3a2>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a2d      	ldr	r2, [pc, #180]	@ (800271c <HAL_DMA_Abort_IT+0x3d0>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d040      	beq.n	80026ee <HAL_DMA_Abort_IT+0x3a2>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a2b      	ldr	r2, [pc, #172]	@ (8002720 <HAL_DMA_Abort_IT+0x3d4>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d03b      	beq.n	80026ee <HAL_DMA_Abort_IT+0x3a2>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a2a      	ldr	r2, [pc, #168]	@ (8002724 <HAL_DMA_Abort_IT+0x3d8>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d036      	beq.n	80026ee <HAL_DMA_Abort_IT+0x3a2>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a28      	ldr	r2, [pc, #160]	@ (8002728 <HAL_DMA_Abort_IT+0x3dc>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d031      	beq.n	80026ee <HAL_DMA_Abort_IT+0x3a2>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a27      	ldr	r2, [pc, #156]	@ (800272c <HAL_DMA_Abort_IT+0x3e0>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d02c      	beq.n	80026ee <HAL_DMA_Abort_IT+0x3a2>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a25      	ldr	r2, [pc, #148]	@ (8002730 <HAL_DMA_Abort_IT+0x3e4>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d027      	beq.n	80026ee <HAL_DMA_Abort_IT+0x3a2>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a24      	ldr	r2, [pc, #144]	@ (8002734 <HAL_DMA_Abort_IT+0x3e8>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d022      	beq.n	80026ee <HAL_DMA_Abort_IT+0x3a2>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a22      	ldr	r2, [pc, #136]	@ (8002738 <HAL_DMA_Abort_IT+0x3ec>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d01d      	beq.n	80026ee <HAL_DMA_Abort_IT+0x3a2>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a21      	ldr	r2, [pc, #132]	@ (800273c <HAL_DMA_Abort_IT+0x3f0>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d018      	beq.n	80026ee <HAL_DMA_Abort_IT+0x3a2>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a1f      	ldr	r2, [pc, #124]	@ (8002740 <HAL_DMA_Abort_IT+0x3f4>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d013      	beq.n	80026ee <HAL_DMA_Abort_IT+0x3a2>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a1e      	ldr	r2, [pc, #120]	@ (8002744 <HAL_DMA_Abort_IT+0x3f8>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d00e      	beq.n	80026ee <HAL_DMA_Abort_IT+0x3a2>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a1c      	ldr	r2, [pc, #112]	@ (8002748 <HAL_DMA_Abort_IT+0x3fc>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d009      	beq.n	80026ee <HAL_DMA_Abort_IT+0x3a2>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a1b      	ldr	r2, [pc, #108]	@ (800274c <HAL_DMA_Abort_IT+0x400>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d004      	beq.n	80026ee <HAL_DMA_Abort_IT+0x3a2>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a19      	ldr	r2, [pc, #100]	@ (8002750 <HAL_DMA_Abort_IT+0x404>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d132      	bne.n	8002754 <HAL_DMA_Abort_IT+0x408>
 80026ee:	2301      	movs	r3, #1
 80026f0:	e031      	b.n	8002756 <HAL_DMA_Abort_IT+0x40a>
 80026f2:	bf00      	nop
 80026f4:	40020010 	.word	0x40020010
 80026f8:	40020028 	.word	0x40020028
 80026fc:	40020040 	.word	0x40020040
 8002700:	40020058 	.word	0x40020058
 8002704:	40020070 	.word	0x40020070
 8002708:	40020088 	.word	0x40020088
 800270c:	400200a0 	.word	0x400200a0
 8002710:	400200b8 	.word	0x400200b8
 8002714:	40020410 	.word	0x40020410
 8002718:	40020428 	.word	0x40020428
 800271c:	40020440 	.word	0x40020440
 8002720:	40020458 	.word	0x40020458
 8002724:	40020470 	.word	0x40020470
 8002728:	40020488 	.word	0x40020488
 800272c:	400204a0 	.word	0x400204a0
 8002730:	400204b8 	.word	0x400204b8
 8002734:	58025408 	.word	0x58025408
 8002738:	5802541c 	.word	0x5802541c
 800273c:	58025430 	.word	0x58025430
 8002740:	58025444 	.word	0x58025444
 8002744:	58025458 	.word	0x58025458
 8002748:	5802546c 	.word	0x5802546c
 800274c:	58025480 	.word	0x58025480
 8002750:	58025494 	.word	0x58025494
 8002754:	2300      	movs	r3, #0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d028      	beq.n	80027ac <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002764:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002768:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800276e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002774:	f003 031f 	and.w	r3, r3, #31
 8002778:	2201      	movs	r2, #1
 800277a:	409a      	lsls	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002788:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00c      	beq.n	80027ac <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800279c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027a0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80027aa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d003      	beq.n	80027cc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop

080027d8 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027e6:	b2db      	uxtb	r3, r3
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e0e3      	b.n	80029ce <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800280c:	2b00      	cmp	r3, #0
 800280e:	d106      	bne.n	800281e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2223      	movs	r2, #35	@ 0x23
 8002814:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f7fd ff3d 	bl	8000698 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800281e:	4b6e      	ldr	r3, [pc, #440]	@ (80029d8 <HAL_ETH_Init+0x1e4>)
 8002820:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002824:	4a6c      	ldr	r2, [pc, #432]	@ (80029d8 <HAL_ETH_Init+0x1e4>)
 8002826:	f043 0302 	orr.w	r3, r3, #2
 800282a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800282e:	4b6a      	ldr	r3, [pc, #424]	@ (80029d8 <HAL_ETH_Init+0x1e4>)
 8002830:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	60bb      	str	r3, [r7, #8]
 800283a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	7a1b      	ldrb	r3, [r3, #8]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d103      	bne.n	800284c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002844:	2000      	movs	r0, #0
 8002846:	f7ff f96f 	bl	8001b28 <HAL_SYSCFG_ETHInterfaceSelect>
 800284a:	e003      	b.n	8002854 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800284c:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002850:	f7ff f96a 	bl	8001b28 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8002854:	4b61      	ldr	r3, [pc, #388]	@ (80029dc <HAL_ETH_Init+0x1e8>)
 8002856:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	6812      	ldr	r2, [r2, #0]
 8002866:	f043 0301 	orr.w	r3, r3, #1
 800286a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800286e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002870:	f7ff f94e 	bl	8001b10 <HAL_GetTick>
 8002874:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002876:	e011      	b.n	800289c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002878:	f7ff f94a 	bl	8001b10 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002886:	d909      	bls.n	800289c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2204      	movs	r2, #4
 800288c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	22e0      	movs	r2, #224	@ 0xe0
 8002894:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e098      	b.n	80029ce <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1e4      	bne.n	8002878 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 f89e 	bl	80029f0 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80028b4:	f003 fbc0 	bl	8006038 <HAL_RCC_GetHCLKFreq>
 80028b8:	4603      	mov	r3, r0
 80028ba:	4a49      	ldr	r2, [pc, #292]	@ (80029e0 <HAL_ETH_Init+0x1ec>)
 80028bc:	fba2 2303 	umull	r2, r3, r2, r3
 80028c0:	0c9a      	lsrs	r2, r3, #18
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	3a01      	subs	r2, #1
 80028c8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f000 fa81 	bl	8002dd4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028da:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80028de:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	6812      	ldr	r2, [r2, #0]
 80028e6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80028ea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80028ee:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d009      	beq.n	8002912 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	22e0      	movs	r2, #224	@ 0xe0
 800290a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e05d      	b.n	80029ce <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800291a:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800291e:	4b31      	ldr	r3, [pc, #196]	@ (80029e4 <HAL_ETH_Init+0x1f0>)
 8002920:	4013      	ands	r3, r2
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6952      	ldr	r2, [r2, #20]
 8002926:	0051      	lsls	r1, r2, #1
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6812      	ldr	r2, [r2, #0]
 800292c:	430b      	orrs	r3, r1
 800292e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002932:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 fae9 	bl	8002f0e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 fb2f 	bl	8002fa0 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	3305      	adds	r3, #5
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	021a      	lsls	r2, r3, #8
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	3304      	adds	r3, #4
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	4619      	mov	r1, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	430a      	orrs	r2, r1
 800295c:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	3303      	adds	r3, #3
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	061a      	lsls	r2, r3, #24
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	3302      	adds	r3, #2
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	041b      	lsls	r3, r3, #16
 8002974:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	3301      	adds	r3, #1
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002980:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800298e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002990:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	4b11      	ldr	r3, [pc, #68]	@ (80029e8 <HAL_ETH_Init+0x1f4>)
 80029a2:	430b      	orrs	r3, r1
 80029a4:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	4b0d      	ldr	r3, [pc, #52]	@ (80029ec <HAL_ETH_Init+0x1f8>)
 80029b6:	430b      	orrs	r3, r1
 80029b8:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2210      	movs	r2, #16
 80029c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	58024400 	.word	0x58024400
 80029dc:	58000400 	.word	0x58000400
 80029e0:	431bde83 	.word	0x431bde83
 80029e4:	ffff8001 	.word	0xffff8001
 80029e8:	0c020060 	.word	0x0c020060
 80029ec:	0c20c000 	.word	0x0c20c000

080029f0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002a00:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002a08:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002a0a:	f003 fb15 	bl	8006038 <HAL_RCC_GetHCLKFreq>
 8002a0e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	4a1a      	ldr	r2, [pc, #104]	@ (8002a7c <HAL_ETH_SetMDIOClockRange+0x8c>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d804      	bhi.n	8002a22 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	e022      	b.n	8002a68 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	4a16      	ldr	r2, [pc, #88]	@ (8002a80 <HAL_ETH_SetMDIOClockRange+0x90>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d204      	bcs.n	8002a34 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	e019      	b.n	8002a68 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	4a13      	ldr	r2, [pc, #76]	@ (8002a84 <HAL_ETH_SetMDIOClockRange+0x94>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d915      	bls.n	8002a68 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	4a12      	ldr	r2, [pc, #72]	@ (8002a88 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d804      	bhi.n	8002a4e <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	e00c      	b.n	8002a68 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	4a0e      	ldr	r2, [pc, #56]	@ (8002a8c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d804      	bhi.n	8002a60 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	e003      	b.n	8002a68 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8002a66:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8002a72:	bf00      	nop
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	02160ebf 	.word	0x02160ebf
 8002a80:	03938700 	.word	0x03938700
 8002a84:	05f5e0ff 	.word	0x05f5e0ff
 8002a88:	08f0d17f 	.word	0x08f0d17f
 8002a8c:	0ee6b27f 	.word	0x0ee6b27f

08002a90 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002aa2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	791b      	ldrb	r3, [r3, #4]
 8002aa8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002aaa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	7b1b      	ldrb	r3, [r3, #12]
 8002ab0:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002ab2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	7b5b      	ldrb	r3, [r3, #13]
 8002ab8:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002aba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	7b9b      	ldrb	r3, [r3, #14]
 8002ac0:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002ac2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	7bdb      	ldrb	r3, [r3, #15]
 8002ac8:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002aca:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002acc:	683a      	ldr	r2, [r7, #0]
 8002ace:	7c12      	ldrb	r2, [r2, #16]
 8002ad0:	2a00      	cmp	r2, #0
 8002ad2:	d102      	bne.n	8002ada <ETH_SetMACConfig+0x4a>
 8002ad4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002ad8:	e000      	b.n	8002adc <ETH_SetMACConfig+0x4c>
 8002ada:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002adc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	7c52      	ldrb	r2, [r2, #17]
 8002ae2:	2a00      	cmp	r2, #0
 8002ae4:	d102      	bne.n	8002aec <ETH_SetMACConfig+0x5c>
 8002ae6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002aea:	e000      	b.n	8002aee <ETH_SetMACConfig+0x5e>
 8002aec:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002aee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	7c9b      	ldrb	r3, [r3, #18]
 8002af4:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002af6:	431a      	orrs	r2, r3
               macconf->Speed |
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002afc:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002b02:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	7f1b      	ldrb	r3, [r3, #28]
 8002b08:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002b0a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	7f5b      	ldrb	r3, [r3, #29]
 8002b10:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002b12:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	7f92      	ldrb	r2, [r2, #30]
 8002b18:	2a00      	cmp	r2, #0
 8002b1a:	d102      	bne.n	8002b22 <ETH_SetMACConfig+0x92>
 8002b1c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b20:	e000      	b.n	8002b24 <ETH_SetMACConfig+0x94>
 8002b22:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002b24:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	7fdb      	ldrb	r3, [r3, #31]
 8002b2a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002b2c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002b34:	2a00      	cmp	r2, #0
 8002b36:	d102      	bne.n	8002b3e <ETH_SetMACConfig+0xae>
 8002b38:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b3c:	e000      	b.n	8002b40 <ETH_SetMACConfig+0xb0>
 8002b3e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002b40:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002b46:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002b4e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002b50:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002b56:	4313      	orrs	r3, r2
 8002b58:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	4b56      	ldr	r3, [pc, #344]	@ (8002cbc <ETH_SetMACConfig+0x22c>)
 8002b62:	4013      	ands	r3, r2
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	6812      	ldr	r2, [r2, #0]
 8002b68:	68f9      	ldr	r1, [r7, #12]
 8002b6a:	430b      	orrs	r3, r1
 8002b6c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b72:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002b7a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002b7c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002b84:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002b86:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002b8e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002b90:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8002b98:	2a00      	cmp	r2, #0
 8002b9a:	d102      	bne.n	8002ba2 <ETH_SetMACConfig+0x112>
 8002b9c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002ba0:	e000      	b.n	8002ba4 <ETH_SetMACConfig+0x114>
 8002ba2:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002ba4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002baa:	4313      	orrs	r3, r2
 8002bac:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	4b42      	ldr	r3, [pc, #264]	@ (8002cc0 <ETH_SetMACConfig+0x230>)
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	6812      	ldr	r2, [r2, #0]
 8002bbc:	68f9      	ldr	r1, [r7, #12]
 8002bbe:	430b      	orrs	r3, r1
 8002bc0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bc8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68da      	ldr	r2, [r3, #12]
 8002bd8:	4b3a      	ldr	r3, [pc, #232]	@ (8002cc4 <ETH_SetMACConfig+0x234>)
 8002bda:	4013      	ands	r3, r2
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6812      	ldr	r2, [r2, #0]
 8002be0:	68f9      	ldr	r1, [r7, #12]
 8002be2:	430b      	orrs	r3, r1
 8002be4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002bec:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002bf2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002bfa:	2a00      	cmp	r2, #0
 8002bfc:	d101      	bne.n	8002c02 <ETH_SetMACConfig+0x172>
 8002bfe:	2280      	movs	r2, #128	@ 0x80
 8002c00:	e000      	b.n	8002c04 <ETH_SetMACConfig+0x174>
 8002c02:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002c04:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c0a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002c16:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6812      	ldr	r2, [r2, #0]
 8002c20:	68f9      	ldr	r1, [r7, #12]
 8002c22:	430b      	orrs	r3, r1
 8002c24:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8002c2c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8002c34:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002c36:	4313      	orrs	r3, r2
 8002c38:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c42:	f023 0103 	bic.w	r1, r3, #3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8002c5a:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	430a      	orrs	r2, r1
 8002c68:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8002c76:	2a00      	cmp	r2, #0
 8002c78:	d101      	bne.n	8002c7e <ETH_SetMACConfig+0x1ee>
 8002c7a:	2240      	movs	r2, #64	@ 0x40
 8002c7c:	e000      	b.n	8002c80 <ETH_SetMACConfig+0x1f0>
 8002c7e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002c80:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8002c88:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002c8a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8002c92:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002c94:	4313      	orrs	r3, r2
 8002c96:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002ca0:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	430a      	orrs	r2, r1
 8002cac:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8002cb0:	bf00      	nop
 8002cb2:	3714      	adds	r7, #20
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr
 8002cbc:	00048083 	.word	0x00048083
 8002cc0:	c0f88000 	.word	0xc0f88000
 8002cc4:	fffffef0 	.word	0xfffffef0

08002cc8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	4b38      	ldr	r3, [pc, #224]	@ (8002dc0 <ETH_SetDMAConfig+0xf8>)
 8002cde:	4013      	ands	r3, r2
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	6811      	ldr	r1, [r2, #0]
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	6812      	ldr	r2, [r2, #0]
 8002ce8:	430b      	orrs	r3, r1
 8002cea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002cee:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	791b      	ldrb	r3, [r3, #4]
 8002cf4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002cfa:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	7b1b      	ldrb	r3, [r3, #12]
 8002d00:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002d02:	4313      	orrs	r3, r2
 8002d04:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	4b2c      	ldr	r3, [pc, #176]	@ (8002dc4 <ETH_SetDMAConfig+0xfc>)
 8002d12:	4013      	ands	r3, r2
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	6812      	ldr	r2, [r2, #0]
 8002d18:	68f9      	ldr	r1, [r7, #12]
 8002d1a:	430b      	orrs	r3, r1
 8002d1c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d20:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	7b5b      	ldrb	r3, [r3, #13]
 8002d26:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d38:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8002d3c:	4b22      	ldr	r3, [pc, #136]	@ (8002dc8 <ETH_SetDMAConfig+0x100>)
 8002d3e:	4013      	ands	r3, r2
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	6812      	ldr	r2, [r2, #0]
 8002d44:	68f9      	ldr	r1, [r7, #12]
 8002d46:	430b      	orrs	r3, r1
 8002d48:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d4c:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	7d1b      	ldrb	r3, [r3, #20]
 8002d58:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002d5a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	7f5b      	ldrb	r3, [r3, #29]
 8002d60:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002d62:	4313      	orrs	r3, r2
 8002d64:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d6e:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8002d72:	4b16      	ldr	r3, [pc, #88]	@ (8002dcc <ETH_SetDMAConfig+0x104>)
 8002d74:	4013      	ands	r3, r2
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	6812      	ldr	r2, [r2, #0]
 8002d7a:	68f9      	ldr	r1, [r7, #12]
 8002d7c:	430b      	orrs	r3, r1
 8002d7e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d82:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	7f1b      	ldrb	r3, [r3, #28]
 8002d8a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002d90:	4313      	orrs	r3, r2
 8002d92:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d9c:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8002da0:	4b0b      	ldr	r3, [pc, #44]	@ (8002dd0 <ETH_SetDMAConfig+0x108>)
 8002da2:	4013      	ands	r3, r2
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6812      	ldr	r2, [r2, #0]
 8002da8:	68f9      	ldr	r1, [r7, #12]
 8002daa:	430b      	orrs	r3, r1
 8002dac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002db0:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8002db4:	bf00      	nop
 8002db6:	3714      	adds	r7, #20
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr
 8002dc0:	ffff87fd 	.word	0xffff87fd
 8002dc4:	ffff2ffe 	.word	0xffff2ffe
 8002dc8:	fffec000 	.word	0xfffec000
 8002dcc:	ffc0efef 	.word	0xffc0efef
 8002dd0:	7fc0ffff 	.word	0x7fc0ffff

08002dd4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b0a4      	sub	sp, #144	@ 0x90
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002de2:	2300      	movs	r3, #0
 8002de4:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002de6:	2300      	movs	r3, #0
 8002de8:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002dec:	2300      	movs	r3, #0
 8002dee:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002df2:	2301      	movs	r3, #1
 8002df4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002e04:	2300      	movs	r3, #0
 8002e06:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002e10:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e14:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002e16:	2300      	movs	r3, #0
 8002e18:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002e20:	2300      	movs	r3, #0
 8002e22:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002e26:	2300      	movs	r3, #0
 8002e28:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8002e2c:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8002e30:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002e32:	2300      	movs	r3, #0
 8002e34:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002e42:	2300      	movs	r3, #0
 8002e44:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8002e52:	2300      	movs	r3, #0
 8002e54:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002e56:	2300      	movs	r3, #0
 8002e58:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002e60:	2300      	movs	r3, #0
 8002e62:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002e66:	2301      	movs	r3, #1
 8002e68:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002e6c:	2320      	movs	r3, #32
 8002e6e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002e72:	2301      	movs	r3, #1
 8002e74:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002e7e:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8002e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002e84:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002e88:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002e90:	2302      	movs	r3, #2
 8002e92:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002e96:	2300      	movs	r3, #0
 8002e98:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002eb8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7ff fde6 	bl	8002a90 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002eda:	2300      	movs	r3, #0
 8002edc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002ede:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002ee2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002ee8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002eec:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002ef4:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8002ef8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002efa:	f107 0308 	add.w	r3, r7, #8
 8002efe:	4619      	mov	r1, r3
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f7ff fee1 	bl	8002cc8 <ETH_SetDMAConfig>
}
 8002f06:	bf00      	nop
 8002f08:	3790      	adds	r7, #144	@ 0x90
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b085      	sub	sp, #20
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002f16:	2300      	movs	r3, #0
 8002f18:	60fb      	str	r3, [r7, #12]
 8002f1a:	e01d      	b.n	8002f58 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	68d9      	ldr	r1, [r3, #12]
 8002f20:	68fa      	ldr	r2, [r7, #12]
 8002f22:	4613      	mov	r3, r2
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	4413      	add	r3, r2
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	440b      	add	r3, r1
 8002f2c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	2200      	movs	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	2200      	movs	r2, #0
 8002f38:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	2200      	movs	r2, #0
 8002f44:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002f46:	68b9      	ldr	r1, [r7, #8]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	3206      	adds	r2, #6
 8002f4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	3301      	adds	r3, #1
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2b03      	cmp	r3, #3
 8002f5c:	d9de      	bls.n	8002f1c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	2303      	movs	r3, #3
 8002f70:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	68da      	ldr	r2, [r3, #12]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f80:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68da      	ldr	r2, [r3, #12]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f90:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8002f94:	bf00      	nop
 8002f96:	3714      	adds	r7, #20
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002fa8:	2300      	movs	r3, #0
 8002faa:	60fb      	str	r3, [r7, #12]
 8002fac:	e023      	b.n	8002ff6 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6919      	ldr	r1, [r3, #16]
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	4413      	add	r3, r2
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	440b      	add	r3, r1
 8002fbe:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002fe4:	68b9      	ldr	r1, [r7, #8]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	3212      	adds	r2, #18
 8002fec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	60fb      	str	r3, [r7, #12]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2b03      	cmp	r3, #3
 8002ffa:	d9d8      	bls.n	8002fae <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003022:	461a      	mov	r2, r3
 8003024:	2303      	movs	r3, #3
 8003026:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	691a      	ldr	r2, [r3, #16]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003036:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800304a:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 800304e:	bf00      	nop
 8003050:	3714      	adds	r7, #20
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
	...

0800305c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b098      	sub	sp, #96	@ 0x60
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8003064:	4a84      	ldr	r2, [pc, #528]	@ (8003278 <HAL_FDCAN_Init+0x21c>)
 8003066:	f107 030c 	add.w	r3, r7, #12
 800306a:	4611      	mov	r1, r2
 800306c:	224c      	movs	r2, #76	@ 0x4c
 800306e:	4618      	mov	r0, r3
 8003070:	f008 fc41 	bl	800b8f6 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e1c6      	b.n	800340c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a7e      	ldr	r2, [pc, #504]	@ (800327c <HAL_FDCAN_Init+0x220>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d106      	bne.n	8003096 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003090:	461a      	mov	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d106      	bne.n	80030b0 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f7fd fc26 	bl	80008fc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	699a      	ldr	r2, [r3, #24]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f022 0210 	bic.w	r2, r2, #16
 80030be:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030c0:	f7fe fd26 	bl	8001b10 <HAL_GetTick>
 80030c4:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80030c6:	e014      	b.n	80030f2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80030c8:	f7fe fd22 	bl	8001b10 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b0a      	cmp	r3, #10
 80030d4:	d90d      	bls.n	80030f2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80030dc:	f043 0201 	orr.w	r2, r3, #1
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2203      	movs	r2, #3
 80030ea:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e18c      	b.n	800340c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	f003 0308 	and.w	r3, r3, #8
 80030fc:	2b08      	cmp	r3, #8
 80030fe:	d0e3      	beq.n	80030c8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	699a      	ldr	r2, [r3, #24]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f042 0201 	orr.w	r2, r2, #1
 800310e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003110:	f7fe fcfe 	bl	8001b10 <HAL_GetTick>
 8003114:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003116:	e014      	b.n	8003142 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003118:	f7fe fcfa 	bl	8001b10 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b0a      	cmp	r3, #10
 8003124:	d90d      	bls.n	8003142 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800312c:	f043 0201 	orr.w	r2, r3, #1
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2203      	movs	r2, #3
 800313a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e164      	b.n	800340c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	2b00      	cmp	r3, #0
 800314e:	d0e3      	beq.n	8003118 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	699a      	ldr	r2, [r3, #24]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f042 0202 	orr.w	r2, r2, #2
 800315e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	7c1b      	ldrb	r3, [r3, #16]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d108      	bne.n	800317a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	699a      	ldr	r2, [r3, #24]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003176:	619a      	str	r2, [r3, #24]
 8003178:	e007      	b.n	800318a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	699a      	ldr	r2, [r3, #24]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003188:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	7c5b      	ldrb	r3, [r3, #17]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d108      	bne.n	80031a4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	699a      	ldr	r2, [r3, #24]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80031a0:	619a      	str	r2, [r3, #24]
 80031a2:	e007      	b.n	80031b4 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	699a      	ldr	r2, [r3, #24]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80031b2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	7c9b      	ldrb	r3, [r3, #18]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d108      	bne.n	80031ce <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	699a      	ldr	r2, [r3, #24]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80031ca:	619a      	str	r2, [r3, #24]
 80031cc:	e007      	b.n	80031de <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	699a      	ldr	r2, [r3, #24]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80031dc:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	699a      	ldr	r2, [r3, #24]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8003202:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	691a      	ldr	r2, [r3, #16]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 0210 	bic.w	r2, r2, #16
 8003212:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d108      	bne.n	800322e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	699a      	ldr	r2, [r3, #24]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f042 0204 	orr.w	r2, r2, #4
 800322a:	619a      	str	r2, [r3, #24]
 800322c:	e030      	b.n	8003290 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d02c      	beq.n	8003290 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	2b02      	cmp	r3, #2
 800323c:	d020      	beq.n	8003280 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	699a      	ldr	r2, [r3, #24]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800324c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	691a      	ldr	r2, [r3, #16]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f042 0210 	orr.w	r2, r2, #16
 800325c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	2b03      	cmp	r3, #3
 8003264:	d114      	bne.n	8003290 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	699a      	ldr	r2, [r3, #24]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f042 0220 	orr.w	r2, r2, #32
 8003274:	619a      	str	r2, [r3, #24]
 8003276:	e00b      	b.n	8003290 <HAL_FDCAN_Init+0x234>
 8003278:	0800be78 	.word	0x0800be78
 800327c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	699a      	ldr	r2, [r3, #24]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f042 0220 	orr.w	r2, r2, #32
 800328e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	3b01      	subs	r3, #1
 8003296:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	69db      	ldr	r3, [r3, #28]
 800329c:	3b01      	subs	r3, #1
 800329e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80032a0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80032a8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	695b      	ldr	r3, [r3, #20]
 80032b0:	3b01      	subs	r3, #1
 80032b2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80032b8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80032ba:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032c4:	d115      	bne.n	80032f2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ca:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d0:	3b01      	subs	r3, #1
 80032d2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80032d4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032da:	3b01      	subs	r3, #1
 80032dc:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80032de:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e6:	3b01      	subs	r3, #1
 80032e8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80032ee:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80032f0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00a      	beq.n	8003310 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	430a      	orrs	r2, r1
 800330c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003318:	4413      	add	r3, r2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d011      	beq.n	8003342 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003326:	f023 0107 	bic.w	r1, r3, #7
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	3360      	adds	r3, #96	@ 0x60
 8003332:	443b      	add	r3, r7
 8003334:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	430a      	orrs	r2, r1
 800333e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003346:	2b00      	cmp	r3, #0
 8003348:	d011      	beq.n	800336e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003352:	f023 0107 	bic.w	r1, r3, #7
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	3360      	adds	r3, #96	@ 0x60
 800335e:	443b      	add	r3, r7
 8003360:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	430a      	orrs	r2, r1
 800336a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003372:	2b00      	cmp	r3, #0
 8003374:	d012      	beq.n	800339c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800337e:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	3360      	adds	r3, #96	@ 0x60
 800338a:	443b      	add	r3, r7
 800338c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003390:	011a      	lsls	r2, r3, #4
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	430a      	orrs	r2, r1
 8003398:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d012      	beq.n	80033ca <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80033ac:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	3360      	adds	r3, #96	@ 0x60
 80033b8:	443b      	add	r3, r7
 80033ba:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80033be:	021a      	lsls	r2, r3, #8
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	430a      	orrs	r2, r1
 80033c6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a11      	ldr	r2, [pc, #68]	@ (8003414 <HAL_FDCAN_Init+0x3b8>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d107      	bne.n	80033e4 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	689a      	ldr	r2, [r3, #8]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f022 0203 	bic.w	r2, r2, #3
 80033e2:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 f80b 	bl	8003418 <FDCAN_CalcultateRamBlockAddresses>
 8003402:	4603      	mov	r3, r0
 8003404:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8003408:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 800340c:	4618      	mov	r0, r3
 800340e:	3760      	adds	r7, #96	@ 0x60
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	4000a000 	.word	0x4000a000

08003418 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003424:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800342e:	4ba7      	ldr	r3, [pc, #668]	@ (80036cc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003430:	4013      	ands	r3, r2
 8003432:	68ba      	ldr	r2, [r7, #8]
 8003434:	0091      	lsls	r1, r2, #2
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	6812      	ldr	r2, [r2, #0]
 800343a:	430b      	orrs	r3, r1
 800343c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003448:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003450:	041a      	lsls	r2, r3, #16
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003460:	68ba      	ldr	r2, [r7, #8]
 8003462:	4413      	add	r3, r2
 8003464:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800346e:	4b97      	ldr	r3, [pc, #604]	@ (80036cc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003470:	4013      	ands	r3, r2
 8003472:	68ba      	ldr	r2, [r7, #8]
 8003474:	0091      	lsls	r1, r2, #2
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6812      	ldr	r2, [r2, #0]
 800347a:	430b      	orrs	r3, r1
 800347c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003488:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003490:	041a      	lsls	r2, r3, #16
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	4413      	add	r3, r2
 80034a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80034b0:	4b86      	ldr	r3, [pc, #536]	@ (80036cc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80034b2:	4013      	ands	r3, r2
 80034b4:	68ba      	ldr	r2, [r7, #8]
 80034b6:	0091      	lsls	r1, r2, #2
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	6812      	ldr	r2, [r2, #0]
 80034bc:	430b      	orrs	r3, r1
 80034be:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80034ca:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d2:	041a      	lsls	r2, r3, #16
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	430a      	orrs	r2, r1
 80034da:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80034e6:	fb02 f303 	mul.w	r3, r2, r3
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	4413      	add	r3, r2
 80034ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80034f8:	4b74      	ldr	r3, [pc, #464]	@ (80036cc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80034fa:	4013      	ands	r3, r2
 80034fc:	68ba      	ldr	r2, [r7, #8]
 80034fe:	0091      	lsls	r1, r2, #2
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	6812      	ldr	r2, [r2, #0]
 8003504:	430b      	orrs	r3, r1
 8003506:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003512:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800351a:	041a      	lsls	r2, r3, #16
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800352e:	fb02 f303 	mul.w	r3, r2, r3
 8003532:	68ba      	ldr	r2, [r7, #8]
 8003534:	4413      	add	r3, r2
 8003536:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8003540:	4b62      	ldr	r3, [pc, #392]	@ (80036cc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003542:	4013      	ands	r3, r2
 8003544:	68ba      	ldr	r2, [r7, #8]
 8003546:	0091      	lsls	r1, r2, #2
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	6812      	ldr	r2, [r2, #0]
 800354c:	430b      	orrs	r3, r1
 800354e:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800355a:	fb02 f303 	mul.w	r3, r2, r3
 800355e:	68ba      	ldr	r2, [r7, #8]
 8003560:	4413      	add	r3, r2
 8003562:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800356c:	4b57      	ldr	r3, [pc, #348]	@ (80036cc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800356e:	4013      	ands	r3, r2
 8003570:	68ba      	ldr	r2, [r7, #8]
 8003572:	0091      	lsls	r1, r2, #2
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	6812      	ldr	r2, [r2, #0]
 8003578:	430b      	orrs	r3, r1
 800357a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003586:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800358e:	041a      	lsls	r2, r3, #16
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	430a      	orrs	r2, r1
 8003596:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	68ba      	ldr	r2, [r7, #8]
 80035a2:	4413      	add	r3, r2
 80035a4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80035ae:	4b47      	ldr	r3, [pc, #284]	@ (80036cc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80035b0:	4013      	ands	r3, r2
 80035b2:	68ba      	ldr	r2, [r7, #8]
 80035b4:	0091      	lsls	r1, r2, #2
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	6812      	ldr	r2, [r2, #0]
 80035ba:	430b      	orrs	r3, r1
 80035bc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80035c8:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035d0:	041a      	lsls	r2, r3, #16
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80035e4:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035ec:	061a      	lsls	r2, r3, #24
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035fc:	4b34      	ldr	r3, [pc, #208]	@ (80036d0 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80035fe:	4413      	add	r3, r2
 8003600:	009a      	lsls	r2, r3, #2
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	441a      	add	r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	441a      	add	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362e:	6879      	ldr	r1, [r7, #4]
 8003630:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8003632:	fb01 f303 	mul.w	r3, r1, r3
 8003636:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8003638:	441a      	add	r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 800364a:	fb01 f303 	mul.w	r3, r1, r3
 800364e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8003650:	441a      	add	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800365e:	6879      	ldr	r1, [r7, #4]
 8003660:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8003662:	fb01 f303 	mul.w	r3, r1, r3
 8003666:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8003668:	441a      	add	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	441a      	add	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800368e:	6879      	ldr	r1, [r7, #4]
 8003690:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8003692:	fb01 f303 	mul.w	r3, r1, r3
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	441a      	add	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80036ae:	fb01 f303 	mul.w	r3, r1, r3
 80036b2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80036b4:	441a      	add	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036c2:	4a04      	ldr	r2, [pc, #16]	@ (80036d4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d915      	bls.n	80036f4 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80036c8:	e006      	b.n	80036d8 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80036ca:	bf00      	nop
 80036cc:	ffff0003 	.word	0xffff0003
 80036d0:	10002b00 	.word	0x10002b00
 80036d4:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80036de:	f043 0220 	orr.w	r2, r3, #32
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2203      	movs	r2, #3
 80036ec:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e010      	b.n	8003716 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036f8:	60fb      	str	r3, [r7, #12]
 80036fa:	e005      	b.n	8003708 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	3304      	adds	r3, #4
 8003706:	60fb      	str	r3, [r7, #12]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	429a      	cmp	r2, r3
 8003712:	d3f3      	bcc.n	80036fc <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3714      	adds	r7, #20
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop

08003724 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003724:	b480      	push	{r7}
 8003726:	b089      	sub	sp, #36	@ 0x24
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800372e:	2300      	movs	r3, #0
 8003730:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003732:	4b86      	ldr	r3, [pc, #536]	@ (800394c <HAL_GPIO_Init+0x228>)
 8003734:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003736:	e18c      	b.n	8003a52 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	2101      	movs	r1, #1
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	fa01 f303 	lsl.w	r3, r1, r3
 8003744:	4013      	ands	r3, r2
 8003746:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	2b00      	cmp	r3, #0
 800374c:	f000 817e 	beq.w	8003a4c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f003 0303 	and.w	r3, r3, #3
 8003758:	2b01      	cmp	r3, #1
 800375a:	d005      	beq.n	8003768 <HAL_GPIO_Init+0x44>
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f003 0303 	and.w	r3, r3, #3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d130      	bne.n	80037ca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	2203      	movs	r2, #3
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	43db      	mvns	r3, r3
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	4013      	ands	r3, r2
 800377e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	68da      	ldr	r2, [r3, #12]
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	4313      	orrs	r3, r2
 8003790:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800379e:	2201      	movs	r2, #1
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	fa02 f303 	lsl.w	r3, r2, r3
 80037a6:	43db      	mvns	r3, r3
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	4013      	ands	r3, r2
 80037ac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	091b      	lsrs	r3, r3, #4
 80037b4:	f003 0201 	and.w	r2, r3, #1
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	fa02 f303 	lsl.w	r3, r2, r3
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f003 0303 	and.w	r3, r3, #3
 80037d2:	2b03      	cmp	r3, #3
 80037d4:	d017      	beq.n	8003806 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	005b      	lsls	r3, r3, #1
 80037e0:	2203      	movs	r2, #3
 80037e2:	fa02 f303 	lsl.w	r3, r2, r3
 80037e6:	43db      	mvns	r3, r3
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	4013      	ands	r3, r2
 80037ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	689a      	ldr	r2, [r3, #8]
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	fa02 f303 	lsl.w	r3, r2, r3
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f003 0303 	and.w	r3, r3, #3
 800380e:	2b02      	cmp	r3, #2
 8003810:	d123      	bne.n	800385a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	08da      	lsrs	r2, r3, #3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	3208      	adds	r2, #8
 800381a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800381e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	f003 0307 	and.w	r3, r3, #7
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	220f      	movs	r2, #15
 800382a:	fa02 f303 	lsl.w	r3, r2, r3
 800382e:	43db      	mvns	r3, r3
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	4013      	ands	r3, r2
 8003834:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	691a      	ldr	r2, [r3, #16]
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	f003 0307 	and.w	r3, r3, #7
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	fa02 f303 	lsl.w	r3, r2, r3
 8003846:	69ba      	ldr	r2, [r7, #24]
 8003848:	4313      	orrs	r3, r2
 800384a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	08da      	lsrs	r2, r3, #3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	3208      	adds	r2, #8
 8003854:	69b9      	ldr	r1, [r7, #24]
 8003856:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	005b      	lsls	r3, r3, #1
 8003864:	2203      	movs	r2, #3
 8003866:	fa02 f303 	lsl.w	r3, r2, r3
 800386a:	43db      	mvns	r3, r3
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	4013      	ands	r3, r2
 8003870:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f003 0203 	and.w	r2, r3, #3
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	fa02 f303 	lsl.w	r3, r2, r3
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	4313      	orrs	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003896:	2b00      	cmp	r3, #0
 8003898:	f000 80d8 	beq.w	8003a4c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800389c:	4b2c      	ldr	r3, [pc, #176]	@ (8003950 <HAL_GPIO_Init+0x22c>)
 800389e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80038a2:	4a2b      	ldr	r2, [pc, #172]	@ (8003950 <HAL_GPIO_Init+0x22c>)
 80038a4:	f043 0302 	orr.w	r3, r3, #2
 80038a8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80038ac:	4b28      	ldr	r3, [pc, #160]	@ (8003950 <HAL_GPIO_Init+0x22c>)
 80038ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	60fb      	str	r3, [r7, #12]
 80038b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038ba:	4a26      	ldr	r2, [pc, #152]	@ (8003954 <HAL_GPIO_Init+0x230>)
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	089b      	lsrs	r3, r3, #2
 80038c0:	3302      	adds	r3, #2
 80038c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	f003 0303 	and.w	r3, r3, #3
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	220f      	movs	r2, #15
 80038d2:	fa02 f303 	lsl.w	r3, r2, r3
 80038d6:	43db      	mvns	r3, r3
 80038d8:	69ba      	ldr	r2, [r7, #24]
 80038da:	4013      	ands	r3, r2
 80038dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a1d      	ldr	r2, [pc, #116]	@ (8003958 <HAL_GPIO_Init+0x234>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d04a      	beq.n	800397c <HAL_GPIO_Init+0x258>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a1c      	ldr	r2, [pc, #112]	@ (800395c <HAL_GPIO_Init+0x238>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d02b      	beq.n	8003946 <HAL_GPIO_Init+0x222>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a1b      	ldr	r2, [pc, #108]	@ (8003960 <HAL_GPIO_Init+0x23c>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d025      	beq.n	8003942 <HAL_GPIO_Init+0x21e>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a1a      	ldr	r2, [pc, #104]	@ (8003964 <HAL_GPIO_Init+0x240>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d01f      	beq.n	800393e <HAL_GPIO_Init+0x21a>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a19      	ldr	r2, [pc, #100]	@ (8003968 <HAL_GPIO_Init+0x244>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d019      	beq.n	800393a <HAL_GPIO_Init+0x216>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a18      	ldr	r2, [pc, #96]	@ (800396c <HAL_GPIO_Init+0x248>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d013      	beq.n	8003936 <HAL_GPIO_Init+0x212>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a17      	ldr	r2, [pc, #92]	@ (8003970 <HAL_GPIO_Init+0x24c>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d00d      	beq.n	8003932 <HAL_GPIO_Init+0x20e>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a16      	ldr	r2, [pc, #88]	@ (8003974 <HAL_GPIO_Init+0x250>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d007      	beq.n	800392e <HAL_GPIO_Init+0x20a>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a15      	ldr	r2, [pc, #84]	@ (8003978 <HAL_GPIO_Init+0x254>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d101      	bne.n	800392a <HAL_GPIO_Init+0x206>
 8003926:	2309      	movs	r3, #9
 8003928:	e029      	b.n	800397e <HAL_GPIO_Init+0x25a>
 800392a:	230a      	movs	r3, #10
 800392c:	e027      	b.n	800397e <HAL_GPIO_Init+0x25a>
 800392e:	2307      	movs	r3, #7
 8003930:	e025      	b.n	800397e <HAL_GPIO_Init+0x25a>
 8003932:	2306      	movs	r3, #6
 8003934:	e023      	b.n	800397e <HAL_GPIO_Init+0x25a>
 8003936:	2305      	movs	r3, #5
 8003938:	e021      	b.n	800397e <HAL_GPIO_Init+0x25a>
 800393a:	2304      	movs	r3, #4
 800393c:	e01f      	b.n	800397e <HAL_GPIO_Init+0x25a>
 800393e:	2303      	movs	r3, #3
 8003940:	e01d      	b.n	800397e <HAL_GPIO_Init+0x25a>
 8003942:	2302      	movs	r3, #2
 8003944:	e01b      	b.n	800397e <HAL_GPIO_Init+0x25a>
 8003946:	2301      	movs	r3, #1
 8003948:	e019      	b.n	800397e <HAL_GPIO_Init+0x25a>
 800394a:	bf00      	nop
 800394c:	58000080 	.word	0x58000080
 8003950:	58024400 	.word	0x58024400
 8003954:	58000400 	.word	0x58000400
 8003958:	58020000 	.word	0x58020000
 800395c:	58020400 	.word	0x58020400
 8003960:	58020800 	.word	0x58020800
 8003964:	58020c00 	.word	0x58020c00
 8003968:	58021000 	.word	0x58021000
 800396c:	58021400 	.word	0x58021400
 8003970:	58021800 	.word	0x58021800
 8003974:	58021c00 	.word	0x58021c00
 8003978:	58022400 	.word	0x58022400
 800397c:	2300      	movs	r3, #0
 800397e:	69fa      	ldr	r2, [r7, #28]
 8003980:	f002 0203 	and.w	r2, r2, #3
 8003984:	0092      	lsls	r2, r2, #2
 8003986:	4093      	lsls	r3, r2
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	4313      	orrs	r3, r2
 800398c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800398e:	4938      	ldr	r1, [pc, #224]	@ (8003a70 <HAL_GPIO_Init+0x34c>)
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	089b      	lsrs	r3, r3, #2
 8003994:	3302      	adds	r3, #2
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800399c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	43db      	mvns	r3, r3
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	4013      	ands	r3, r2
 80039ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	4313      	orrs	r3, r2
 80039c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80039c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80039ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	43db      	mvns	r3, r3
 80039d6:	69ba      	ldr	r2, [r7, #24]
 80039d8:	4013      	ands	r3, r2
 80039da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d003      	beq.n	80039f0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80039f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	43db      	mvns	r3, r3
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	4013      	ands	r3, r2
 8003a06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d003      	beq.n	8003a1c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	69ba      	ldr	r2, [r7, #24]
 8003a20:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	43db      	mvns	r3, r3
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	4013      	ands	r3, r2
 8003a30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d003      	beq.n	8003a46 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	3301      	adds	r3, #1
 8003a50:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	fa22 f303 	lsr.w	r3, r2, r3
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f47f ae6b 	bne.w	8003738 <HAL_GPIO_Init+0x14>
  }
}
 8003a62:	bf00      	nop
 8003a64:	bf00      	nop
 8003a66:	3724      	adds	r7, #36	@ 0x24
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr
 8003a70:	58000400 	.word	0x58000400

08003a74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	807b      	strh	r3, [r7, #2]
 8003a80:	4613      	mov	r3, r2
 8003a82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a84:	787b      	ldrb	r3, [r7, #1]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d003      	beq.n	8003a92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a8a:	887a      	ldrh	r2, [r7, #2]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003a90:	e003      	b.n	8003a9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003a92:	887b      	ldrh	r3, [r7, #2]
 8003a94:	041a      	lsls	r2, r3, #16
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	619a      	str	r2, [r3, #24]
}
 8003a9a:	bf00      	nop
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
	...

08003aa8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e08b      	b.n	8003bd2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d106      	bne.n	8003ad4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7fd f962 	bl	8000d98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2224      	movs	r2, #36	@ 0x24
 8003ad8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f022 0201 	bic.w	r2, r2, #1
 8003aea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685a      	ldr	r2, [r3, #4]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003af8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689a      	ldr	r2, [r3, #8]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b08:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d107      	bne.n	8003b22 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	689a      	ldr	r2, [r3, #8]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b1e:	609a      	str	r2, [r3, #8]
 8003b20:	e006      	b.n	8003b30 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	689a      	ldr	r2, [r3, #8]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003b2e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d108      	bne.n	8003b4a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b46:	605a      	str	r2, [r3, #4]
 8003b48:	e007      	b.n	8003b5a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b58:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	6859      	ldr	r1, [r3, #4]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	4b1d      	ldr	r3, [pc, #116]	@ (8003bdc <HAL_I2C_Init+0x134>)
 8003b66:	430b      	orrs	r3, r1
 8003b68:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68da      	ldr	r2, [r3, #12]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b78:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	691a      	ldr	r2, [r3, #16]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	69d9      	ldr	r1, [r3, #28]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a1a      	ldr	r2, [r3, #32]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f042 0201 	orr.w	r2, r2, #1
 8003bb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2220      	movs	r2, #32
 8003bbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	02008000 	.word	0x02008000

08003be0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b088      	sub	sp, #32
 8003be4:	af02      	add	r7, sp, #8
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	4608      	mov	r0, r1
 8003bea:	4611      	mov	r1, r2
 8003bec:	461a      	mov	r2, r3
 8003bee:	4603      	mov	r3, r0
 8003bf0:	817b      	strh	r3, [r7, #10]
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	813b      	strh	r3, [r7, #8]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b20      	cmp	r3, #32
 8003c04:	f040 80fd 	bne.w	8003e02 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c08:	6a3b      	ldr	r3, [r7, #32]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d002      	beq.n	8003c14 <HAL_I2C_Mem_Read+0x34>
 8003c0e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d105      	bne.n	8003c20 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c1a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e0f1      	b.n	8003e04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d101      	bne.n	8003c2e <HAL_I2C_Mem_Read+0x4e>
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	e0ea      	b.n	8003e04 <HAL_I2C_Mem_Read+0x224>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c36:	f7fd ff6b 	bl	8001b10 <HAL_GetTick>
 8003c3a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	9300      	str	r3, [sp, #0]
 8003c40:	2319      	movs	r3, #25
 8003c42:	2201      	movs	r2, #1
 8003c44:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f000 ffc6 	bl	8004bda <I2C_WaitOnFlagUntilTimeout>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d001      	beq.n	8003c58 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e0d5      	b.n	8003e04 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2222      	movs	r2, #34	@ 0x22
 8003c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2240      	movs	r2, #64	@ 0x40
 8003c64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6a3a      	ldr	r2, [r7, #32]
 8003c72:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003c78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c80:	88f8      	ldrh	r0, [r7, #6]
 8003c82:	893a      	ldrh	r2, [r7, #8]
 8003c84:	8979      	ldrh	r1, [r7, #10]
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	9301      	str	r3, [sp, #4]
 8003c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c8c:	9300      	str	r3, [sp, #0]
 8003c8e:	4603      	mov	r3, r0
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f000 fa6d 	bl	8004170 <I2C_RequestMemoryRead>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d005      	beq.n	8003ca8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e0ad      	b.n	8003e04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	2bff      	cmp	r3, #255	@ 0xff
 8003cb0:	d90e      	bls.n	8003cd0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	22ff      	movs	r2, #255	@ 0xff
 8003cb6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cbc:	b2da      	uxtb	r2, r3
 8003cbe:	8979      	ldrh	r1, [r7, #10]
 8003cc0:	4b52      	ldr	r3, [pc, #328]	@ (8003e0c <HAL_I2C_Mem_Read+0x22c>)
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f001 f949 	bl	8004f60 <I2C_TransferConfig>
 8003cce:	e00f      	b.n	8003cf0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cde:	b2da      	uxtb	r2, r3
 8003ce0:	8979      	ldrh	r1, [r7, #10]
 8003ce2:	4b4a      	ldr	r3, [pc, #296]	@ (8003e0c <HAL_I2C_Mem_Read+0x22c>)
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f001 f938 	bl	8004f60 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	9300      	str	r3, [sp, #0]
 8003cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	2104      	movs	r1, #4
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f000 ff6d 	bl	8004bda <I2C_WaitOnFlagUntilTimeout>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e07c      	b.n	8003e04 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d14:	b2d2      	uxtb	r2, r2
 8003d16:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d1c:	1c5a      	adds	r2, r3, #1
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d26:	3b01      	subs	r3, #1
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	3b01      	subs	r3, #1
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d034      	beq.n	8003db0 <HAL_I2C_Mem_Read+0x1d0>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d130      	bne.n	8003db0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	9300      	str	r3, [sp, #0]
 8003d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d54:	2200      	movs	r2, #0
 8003d56:	2180      	movs	r1, #128	@ 0x80
 8003d58:	68f8      	ldr	r0, [r7, #12]
 8003d5a:	f000 ff3e 	bl	8004bda <I2C_WaitOnFlagUntilTimeout>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d001      	beq.n	8003d68 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e04d      	b.n	8003e04 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	2bff      	cmp	r3, #255	@ 0xff
 8003d70:	d90e      	bls.n	8003d90 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	22ff      	movs	r2, #255	@ 0xff
 8003d76:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d7c:	b2da      	uxtb	r2, r3
 8003d7e:	8979      	ldrh	r1, [r7, #10]
 8003d80:	2300      	movs	r3, #0
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f001 f8e9 	bl	8004f60 <I2C_TransferConfig>
 8003d8e:	e00f      	b.n	8003db0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d9e:	b2da      	uxtb	r2, r3
 8003da0:	8979      	ldrh	r1, [r7, #10]
 8003da2:	2300      	movs	r3, #0
 8003da4:	9300      	str	r3, [sp, #0]
 8003da6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f001 f8d8 	bl	8004f60 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d19a      	bne.n	8003cf0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f000 ffab 	bl	8004d1a <I2C_WaitOnSTOPFlagUntilTimeout>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e01a      	b.n	8003e04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	6859      	ldr	r1, [r3, #4]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	4b0b      	ldr	r3, [pc, #44]	@ (8003e10 <HAL_I2C_Mem_Read+0x230>)
 8003de2:	400b      	ands	r3, r1
 8003de4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2220      	movs	r2, #32
 8003dea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	e000      	b.n	8003e04 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003e02:	2302      	movs	r3, #2
  }
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3718      	adds	r7, #24
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	80002400 	.word	0x80002400
 8003e10:	fe00e800 	.word	0xfe00e800

08003e14 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d005      	beq.n	8003e40 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e38:	68ba      	ldr	r2, [r7, #8]
 8003e3a:	68f9      	ldr	r1, [r7, #12]
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	4798      	blx	r3
  }
}
 8003e40:	bf00      	nop
 8003e42:	3710      	adds	r7, #16
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b086      	sub	sp, #24
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00f      	beq.n	8003e8a <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00a      	beq.n	8003e8a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e78:	f043 0201 	orr.w	r2, r3, #1
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003e88:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00f      	beq.n	8003eb4 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00a      	beq.n	8003eb4 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ea2:	f043 0208 	orr.w	r2, r3, #8
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003eb2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00f      	beq.n	8003ede <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00a      	beq.n	8003ede <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ecc:	f043 0202 	orr.w	r2, r3, #2
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003edc:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ee2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f003 030b 	and.w	r3, r3, #11
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d003      	beq.n	8003ef6 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8003eee:	68f9      	ldr	r1, [r7, #12]
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 fd19 	bl	8004928 <I2C_ITError>
  }
}
 8003ef6:	bf00      	nop
 8003ef8:	3718      	adds	r7, #24
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003efe:	b480      	push	{r7}
 8003f00:	b083      	sub	sp, #12
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003f06:	bf00      	nop
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr

08003f12 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f12:	b480      	push	{r7}
 8003f14:	b083      	sub	sp, #12
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003f1a:	bf00      	nop
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr

08003f26 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003f26:	b480      	push	{r7}
 8003f28:	b083      	sub	sp, #12
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
 8003f2e:	460b      	mov	r3, r1
 8003f30:	70fb      	strb	r3, [r7, #3]
 8003f32:	4613      	mov	r3, r2
 8003f34:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003f36:	bf00      	nop
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f42:	b480      	push	{r7}
 8003f44:	b083      	sub	sp, #12
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003f4a:	bf00      	nop
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr

08003f56 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003f56:	b480      	push	{r7}
 8003f58:	b083      	sub	sp, #12
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003f5e:	bf00      	nop
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr

08003f6a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b083      	sub	sp, #12
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003f72:	bf00      	nop
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b086      	sub	sp, #24
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	60f8      	str	r0, [r7, #12]
 8003f86:	60b9      	str	r1, [r7, #8]
 8003f88:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f8e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d101      	bne.n	8003fa2 <I2C_Slave_ISR_IT+0x24>
 8003f9e:	2302      	movs	r3, #2
 8003fa0:	e0e2      	b.n	8004168 <I2C_Slave_ISR_IT+0x1ea>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	f003 0320 	and.w	r3, r3, #32
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d009      	beq.n	8003fc8 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d004      	beq.n	8003fc8 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003fbe:	6939      	ldr	r1, [r7, #16]
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f000 fa09 	bl	80043d8 <I2C_ITSlaveCplt>
 8003fc6:	e0ca      	b.n	800415e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	f003 0310 	and.w	r3, r3, #16
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d04b      	beq.n	800406a <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d046      	beq.n	800406a <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d128      	bne.n	8004038 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b28      	cmp	r3, #40	@ 0x28
 8003ff0:	d108      	bne.n	8004004 <I2C_Slave_ISR_IT+0x86>
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ff8:	d104      	bne.n	8004004 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003ffa:	6939      	ldr	r1, [r7, #16]
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f000 fc3f 	bl	8004880 <I2C_ITListenCplt>
 8004002:	e031      	b.n	8004068 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800400a:	b2db      	uxtb	r3, r3
 800400c:	2b29      	cmp	r3, #41	@ 0x29
 800400e:	d10e      	bne.n	800402e <I2C_Slave_ISR_IT+0xb0>
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004016:	d00a      	beq.n	800402e <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2210      	movs	r2, #16
 800401e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f000 fd98 	bl	8004b56 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f000 f97a 	bl	8004320 <I2C_ITSlaveSeqCplt>
 800402c:	e01c      	b.n	8004068 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2210      	movs	r2, #16
 8004034:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004036:	e08f      	b.n	8004158 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2210      	movs	r2, #16
 800403e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004044:	f043 0204 	orr.w	r2, r3, #4
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d003      	beq.n	800405a <I2C_Slave_ISR_IT+0xdc>
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004058:	d17e      	bne.n	8004158 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800405e:	4619      	mov	r1, r3
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f000 fc61 	bl	8004928 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004066:	e077      	b.n	8004158 <I2C_Slave_ISR_IT+0x1da>
 8004068:	e076      	b.n	8004158 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	f003 0304 	and.w	r3, r3, #4
 8004070:	2b00      	cmp	r3, #0
 8004072:	d02f      	beq.n	80040d4 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800407a:	2b00      	cmp	r3, #0
 800407c:	d02a      	beq.n	80040d4 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004082:	b29b      	uxth	r3, r3
 8004084:	2b00      	cmp	r3, #0
 8004086:	d018      	beq.n	80040ba <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004092:	b2d2      	uxtb	r2, r2
 8004094:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409a:	1c5a      	adds	r2, r3, #1
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040a4:	3b01      	subs	r3, #1
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	3b01      	subs	r3, #1
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040be:	b29b      	uxth	r3, r3
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d14b      	bne.n	800415c <I2C_Slave_ISR_IT+0x1de>
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80040ca:	d047      	beq.n	800415c <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f000 f927 	bl	8004320 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80040d2:	e043      	b.n	800415c <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	f003 0308 	and.w	r3, r3, #8
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d009      	beq.n	80040f2 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d004      	beq.n	80040f2 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80040e8:	6939      	ldr	r1, [r7, #16]
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f000 f894 	bl	8004218 <I2C_ITAddrCplt>
 80040f0:	e035      	b.n	800415e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d030      	beq.n	800415e <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004102:	2b00      	cmp	r3, #0
 8004104:	d02b      	beq.n	800415e <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800410a:	b29b      	uxth	r3, r3
 800410c:	2b00      	cmp	r3, #0
 800410e:	d018      	beq.n	8004142 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004114:	781a      	ldrb	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004120:	1c5a      	adds	r2, r3, #1
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800412a:	b29b      	uxth	r3, r3
 800412c:	3b01      	subs	r3, #1
 800412e:	b29a      	uxth	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004138:	3b01      	subs	r3, #1
 800413a:	b29a      	uxth	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004140:	e00d      	b.n	800415e <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004148:	d002      	beq.n	8004150 <I2C_Slave_ISR_IT+0x1d2>
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d106      	bne.n	800415e <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f000 f8e5 	bl	8004320 <I2C_ITSlaveSeqCplt>
 8004156:	e002      	b.n	800415e <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8004158:	bf00      	nop
 800415a:	e000      	b.n	800415e <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800415c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3718      	adds	r7, #24
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af02      	add	r7, sp, #8
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	4608      	mov	r0, r1
 800417a:	4611      	mov	r1, r2
 800417c:	461a      	mov	r2, r3
 800417e:	4603      	mov	r3, r0
 8004180:	817b      	strh	r3, [r7, #10]
 8004182:	460b      	mov	r3, r1
 8004184:	813b      	strh	r3, [r7, #8]
 8004186:	4613      	mov	r3, r2
 8004188:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800418a:	88fb      	ldrh	r3, [r7, #6]
 800418c:	b2da      	uxtb	r2, r3
 800418e:	8979      	ldrh	r1, [r7, #10]
 8004190:	4b20      	ldr	r3, [pc, #128]	@ (8004214 <I2C_RequestMemoryRead+0xa4>)
 8004192:	9300      	str	r3, [sp, #0]
 8004194:	2300      	movs	r3, #0
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	f000 fee2 	bl	8004f60 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800419c:	69fa      	ldr	r2, [r7, #28]
 800419e:	69b9      	ldr	r1, [r7, #24]
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	f000 fd73 	bl	8004c8c <I2C_WaitOnTXISFlagUntilTimeout>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d001      	beq.n	80041b0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e02c      	b.n	800420a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041b0:	88fb      	ldrh	r3, [r7, #6]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d105      	bne.n	80041c2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041b6:	893b      	ldrh	r3, [r7, #8]
 80041b8:	b2da      	uxtb	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	629a      	str	r2, [r3, #40]	@ 0x28
 80041c0:	e015      	b.n	80041ee <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80041c2:	893b      	ldrh	r3, [r7, #8]
 80041c4:	0a1b      	lsrs	r3, r3, #8
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	b2da      	uxtb	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041d0:	69fa      	ldr	r2, [r7, #28]
 80041d2:	69b9      	ldr	r1, [r7, #24]
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f000 fd59 	bl	8004c8c <I2C_WaitOnTXISFlagUntilTimeout>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d001      	beq.n	80041e4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e012      	b.n	800420a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041e4:	893b      	ldrh	r3, [r7, #8]
 80041e6:	b2da      	uxtb	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	9300      	str	r3, [sp, #0]
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	2200      	movs	r2, #0
 80041f6:	2140      	movs	r1, #64	@ 0x40
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f000 fcee 	bl	8004bda <I2C_WaitOnFlagUntilTimeout>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d001      	beq.n	8004208 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e000      	b.n	800420a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	80002000 	.word	0x80002000

08004218 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004228:	b2db      	uxtb	r3, r3
 800422a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800422e:	2b28      	cmp	r3, #40	@ 0x28
 8004230:	d16a      	bne.n	8004308 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	0c1b      	lsrs	r3, r3, #16
 800423a:	b2db      	uxtb	r3, r3
 800423c:	f003 0301 	and.w	r3, r3, #1
 8004240:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	0c1b      	lsrs	r3, r3, #16
 800424a:	b29b      	uxth	r3, r3
 800424c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004250:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	b29b      	uxth	r3, r3
 800425a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800425e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	b29b      	uxth	r3, r3
 8004268:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800426c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	2b02      	cmp	r3, #2
 8004274:	d138      	bne.n	80042e8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004276:	897b      	ldrh	r3, [r7, #10]
 8004278:	09db      	lsrs	r3, r3, #7
 800427a:	b29a      	uxth	r2, r3
 800427c:	89bb      	ldrh	r3, [r7, #12]
 800427e:	4053      	eors	r3, r2
 8004280:	b29b      	uxth	r3, r3
 8004282:	f003 0306 	and.w	r3, r3, #6
 8004286:	2b00      	cmp	r3, #0
 8004288:	d11c      	bne.n	80042c4 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800428a:	897b      	ldrh	r3, [r7, #10]
 800428c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004292:	1c5a      	adds	r2, r3, #1
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800429c:	2b02      	cmp	r3, #2
 800429e:	d13b      	bne.n	8004318 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2208      	movs	r2, #8
 80042ac:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80042b6:	89ba      	ldrh	r2, [r7, #12]
 80042b8:	7bfb      	ldrb	r3, [r7, #15]
 80042ba:	4619      	mov	r1, r3
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f7ff fe32 	bl	8003f26 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80042c2:	e029      	b.n	8004318 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80042c4:	893b      	ldrh	r3, [r7, #8]
 80042c6:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80042c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 fe79 	bl	8004fc4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80042da:	89ba      	ldrh	r2, [r7, #12]
 80042dc:	7bfb      	ldrb	r3, [r7, #15]
 80042de:	4619      	mov	r1, r3
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f7ff fe20 	bl	8003f26 <HAL_I2C_AddrCallback>
}
 80042e6:	e017      	b.n	8004318 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80042e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 fe69 	bl	8004fc4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80042fa:	89ba      	ldrh	r2, [r7, #12]
 80042fc:	7bfb      	ldrb	r3, [r7, #15]
 80042fe:	4619      	mov	r1, r3
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f7ff fe10 	bl	8003f26 <HAL_I2C_AddrCallback>
}
 8004306:	e007      	b.n	8004318 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2208      	movs	r2, #8
 800430e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8004318:	bf00      	nop
 800431a:	3710      	adds	r7, #16
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d008      	beq.n	8004354 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004350:	601a      	str	r2, [r3, #0]
 8004352:	e00c      	b.n	800436e <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d007      	beq.n	800436e <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800436c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b29      	cmp	r3, #41	@ 0x29
 8004378:	d112      	bne.n	80043a0 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2228      	movs	r2, #40	@ 0x28
 800437e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2221      	movs	r2, #33	@ 0x21
 8004386:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004388:	2101      	movs	r1, #1
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 fe1a 	bl	8004fc4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f7ff fdb0 	bl	8003efe <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800439e:	e017      	b.n	80043d0 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80043aa:	d111      	bne.n	80043d0 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2228      	movs	r2, #40	@ 0x28
 80043b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2222      	movs	r2, #34	@ 0x22
 80043b8:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80043ba:	2102      	movs	r1, #2
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 fe01 	bl	8004fc4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f7ff fda1 	bl	8003f12 <HAL_I2C_SlaveRxCpltCallback>
}
 80043d0:	bf00      	nop
 80043d2:	3710      	adds	r7, #16
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043f2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043fa:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2220      	movs	r2, #32
 8004402:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004404:	7afb      	ldrb	r3, [r7, #11]
 8004406:	2b21      	cmp	r3, #33	@ 0x21
 8004408:	d002      	beq.n	8004410 <I2C_ITSlaveCplt+0x38>
 800440a:	7afb      	ldrb	r3, [r7, #11]
 800440c:	2b29      	cmp	r3, #41	@ 0x29
 800440e:	d108      	bne.n	8004422 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004410:	f248 0101 	movw	r1, #32769	@ 0x8001
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 fdd5 	bl	8004fc4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2221      	movs	r2, #33	@ 0x21
 800441e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004420:	e019      	b.n	8004456 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004422:	7afb      	ldrb	r3, [r7, #11]
 8004424:	2b22      	cmp	r3, #34	@ 0x22
 8004426:	d002      	beq.n	800442e <I2C_ITSlaveCplt+0x56>
 8004428:	7afb      	ldrb	r3, [r7, #11]
 800442a:	2b2a      	cmp	r3, #42	@ 0x2a
 800442c:	d108      	bne.n	8004440 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800442e:	f248 0102 	movw	r1, #32770	@ 0x8002
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 fdc6 	bl	8004fc4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2222      	movs	r2, #34	@ 0x22
 800443c:	631a      	str	r2, [r3, #48]	@ 0x30
 800443e:	e00a      	b.n	8004456 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8004440:	7afb      	ldrb	r3, [r7, #11]
 8004442:	2b28      	cmp	r3, #40	@ 0x28
 8004444:	d107      	bne.n	8004456 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8004446:	f248 0103 	movw	r1, #32771	@ 0x8003
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 fdba 	bl	8004fc4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	685a      	ldr	r2, [r3, #4]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004464:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	6859      	ldr	r1, [r3, #4]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	4b7f      	ldr	r3, [pc, #508]	@ (8004670 <I2C_ITSlaveCplt+0x298>)
 8004472:	400b      	ands	r3, r1
 8004474:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 fb6d 	bl	8004b56 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d07a      	beq.n	800457c <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004494:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800449a:	2b00      	cmp	r3, #0
 800449c:	f000 8111 	beq.w	80046c2 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a73      	ldr	r2, [pc, #460]	@ (8004674 <I2C_ITSlaveCplt+0x29c>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d059      	beq.n	8004560 <I2C_ITSlaveCplt+0x188>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a71      	ldr	r2, [pc, #452]	@ (8004678 <I2C_ITSlaveCplt+0x2a0>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d053      	beq.n	8004560 <I2C_ITSlaveCplt+0x188>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a6f      	ldr	r2, [pc, #444]	@ (800467c <I2C_ITSlaveCplt+0x2a4>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d04d      	beq.n	8004560 <I2C_ITSlaveCplt+0x188>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a6d      	ldr	r2, [pc, #436]	@ (8004680 <I2C_ITSlaveCplt+0x2a8>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d047      	beq.n	8004560 <I2C_ITSlaveCplt+0x188>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a6b      	ldr	r2, [pc, #428]	@ (8004684 <I2C_ITSlaveCplt+0x2ac>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d041      	beq.n	8004560 <I2C_ITSlaveCplt+0x188>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a69      	ldr	r2, [pc, #420]	@ (8004688 <I2C_ITSlaveCplt+0x2b0>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d03b      	beq.n	8004560 <I2C_ITSlaveCplt+0x188>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a67      	ldr	r2, [pc, #412]	@ (800468c <I2C_ITSlaveCplt+0x2b4>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d035      	beq.n	8004560 <I2C_ITSlaveCplt+0x188>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a65      	ldr	r2, [pc, #404]	@ (8004690 <I2C_ITSlaveCplt+0x2b8>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d02f      	beq.n	8004560 <I2C_ITSlaveCplt+0x188>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a63      	ldr	r2, [pc, #396]	@ (8004694 <I2C_ITSlaveCplt+0x2bc>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d029      	beq.n	8004560 <I2C_ITSlaveCplt+0x188>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a61      	ldr	r2, [pc, #388]	@ (8004698 <I2C_ITSlaveCplt+0x2c0>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d023      	beq.n	8004560 <I2C_ITSlaveCplt+0x188>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a5f      	ldr	r2, [pc, #380]	@ (800469c <I2C_ITSlaveCplt+0x2c4>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d01d      	beq.n	8004560 <I2C_ITSlaveCplt+0x188>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a5d      	ldr	r2, [pc, #372]	@ (80046a0 <I2C_ITSlaveCplt+0x2c8>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d017      	beq.n	8004560 <I2C_ITSlaveCplt+0x188>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a5b      	ldr	r2, [pc, #364]	@ (80046a4 <I2C_ITSlaveCplt+0x2cc>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d011      	beq.n	8004560 <I2C_ITSlaveCplt+0x188>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a59      	ldr	r2, [pc, #356]	@ (80046a8 <I2C_ITSlaveCplt+0x2d0>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d00b      	beq.n	8004560 <I2C_ITSlaveCplt+0x188>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a57      	ldr	r2, [pc, #348]	@ (80046ac <I2C_ITSlaveCplt+0x2d4>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d005      	beq.n	8004560 <I2C_ITSlaveCplt+0x188>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a55      	ldr	r2, [pc, #340]	@ (80046b0 <I2C_ITSlaveCplt+0x2d8>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d105      	bne.n	800456c <I2C_ITSlaveCplt+0x194>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	b29b      	uxth	r3, r3
 800456a:	e004      	b.n	8004576 <I2C_ITSlaveCplt+0x19e>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	b29b      	uxth	r3, r3
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	8553      	strh	r3, [r2, #42]	@ 0x2a
 800457a:	e0a2      	b.n	80046c2 <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004582:	2b00      	cmp	r3, #0
 8004584:	f000 809d 	beq.w	80046c2 <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004596:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800459c:	2b00      	cmp	r3, #0
 800459e:	f000 8090 	beq.w	80046c2 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a32      	ldr	r2, [pc, #200]	@ (8004674 <I2C_ITSlaveCplt+0x29c>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d059      	beq.n	8004662 <I2C_ITSlaveCplt+0x28a>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a30      	ldr	r2, [pc, #192]	@ (8004678 <I2C_ITSlaveCplt+0x2a0>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d053      	beq.n	8004662 <I2C_ITSlaveCplt+0x28a>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a2e      	ldr	r2, [pc, #184]	@ (800467c <I2C_ITSlaveCplt+0x2a4>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d04d      	beq.n	8004662 <I2C_ITSlaveCplt+0x28a>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a2c      	ldr	r2, [pc, #176]	@ (8004680 <I2C_ITSlaveCplt+0x2a8>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d047      	beq.n	8004662 <I2C_ITSlaveCplt+0x28a>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a2a      	ldr	r2, [pc, #168]	@ (8004684 <I2C_ITSlaveCplt+0x2ac>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d041      	beq.n	8004662 <I2C_ITSlaveCplt+0x28a>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a28      	ldr	r2, [pc, #160]	@ (8004688 <I2C_ITSlaveCplt+0x2b0>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d03b      	beq.n	8004662 <I2C_ITSlaveCplt+0x28a>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a26      	ldr	r2, [pc, #152]	@ (800468c <I2C_ITSlaveCplt+0x2b4>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d035      	beq.n	8004662 <I2C_ITSlaveCplt+0x28a>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a24      	ldr	r2, [pc, #144]	@ (8004690 <I2C_ITSlaveCplt+0x2b8>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d02f      	beq.n	8004662 <I2C_ITSlaveCplt+0x28a>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a22      	ldr	r2, [pc, #136]	@ (8004694 <I2C_ITSlaveCplt+0x2bc>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d029      	beq.n	8004662 <I2C_ITSlaveCplt+0x28a>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a20      	ldr	r2, [pc, #128]	@ (8004698 <I2C_ITSlaveCplt+0x2c0>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d023      	beq.n	8004662 <I2C_ITSlaveCplt+0x28a>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a1e      	ldr	r2, [pc, #120]	@ (800469c <I2C_ITSlaveCplt+0x2c4>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d01d      	beq.n	8004662 <I2C_ITSlaveCplt+0x28a>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a1c      	ldr	r2, [pc, #112]	@ (80046a0 <I2C_ITSlaveCplt+0x2c8>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d017      	beq.n	8004662 <I2C_ITSlaveCplt+0x28a>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a1a      	ldr	r2, [pc, #104]	@ (80046a4 <I2C_ITSlaveCplt+0x2cc>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d011      	beq.n	8004662 <I2C_ITSlaveCplt+0x28a>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a18      	ldr	r2, [pc, #96]	@ (80046a8 <I2C_ITSlaveCplt+0x2d0>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d00b      	beq.n	8004662 <I2C_ITSlaveCplt+0x28a>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a16      	ldr	r2, [pc, #88]	@ (80046ac <I2C_ITSlaveCplt+0x2d4>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d005      	beq.n	8004662 <I2C_ITSlaveCplt+0x28a>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a14      	ldr	r2, [pc, #80]	@ (80046b0 <I2C_ITSlaveCplt+0x2d8>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d128      	bne.n	80046b4 <I2C_ITSlaveCplt+0x2dc>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	b29b      	uxth	r3, r3
 800466c:	e027      	b.n	80046be <I2C_ITSlaveCplt+0x2e6>
 800466e:	bf00      	nop
 8004670:	fe00e800 	.word	0xfe00e800
 8004674:	40020010 	.word	0x40020010
 8004678:	40020028 	.word	0x40020028
 800467c:	40020040 	.word	0x40020040
 8004680:	40020058 	.word	0x40020058
 8004684:	40020070 	.word	0x40020070
 8004688:	40020088 	.word	0x40020088
 800468c:	400200a0 	.word	0x400200a0
 8004690:	400200b8 	.word	0x400200b8
 8004694:	40020410 	.word	0x40020410
 8004698:	40020428 	.word	0x40020428
 800469c:	40020440 	.word	0x40020440
 80046a0:	40020458 	.word	0x40020458
 80046a4:	40020470 	.word	0x40020470
 80046a8:	40020488 	.word	0x40020488
 80046ac:	400204a0 	.word	0x400204a0
 80046b0:	400204b8 	.word	0x400204b8
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	b29b      	uxth	r3, r3
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	f003 0304 	and.w	r3, r3, #4
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d020      	beq.n	800470e <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	f023 0304 	bic.w	r3, r3, #4
 80046d2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046de:	b2d2      	uxtb	r2, r2
 80046e0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e6:	1c5a      	adds	r2, r3, #1
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00c      	beq.n	800470e <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046f8:	3b01      	subs	r3, #1
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004704:	b29b      	uxth	r3, r3
 8004706:	3b01      	subs	r3, #1
 8004708:	b29a      	uxth	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004712:	b29b      	uxth	r3, r3
 8004714:	2b00      	cmp	r3, #0
 8004716:	d005      	beq.n	8004724 <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800471c:	f043 0204 	orr.w	r2, r3, #4
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	f003 0310 	and.w	r3, r3, #16
 800472a:	2b00      	cmp	r3, #0
 800472c:	d049      	beq.n	80047c2 <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004734:	2b00      	cmp	r3, #0
 8004736:	d044      	beq.n	80047c2 <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800473c:	b29b      	uxth	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d128      	bne.n	8004794 <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b28      	cmp	r3, #40	@ 0x28
 800474c:	d108      	bne.n	8004760 <I2C_ITSlaveCplt+0x388>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004754:	d104      	bne.n	8004760 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004756:	6979      	ldr	r1, [r7, #20]
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 f891 	bl	8004880 <I2C_ITListenCplt>
 800475e:	e030      	b.n	80047c2 <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004766:	b2db      	uxtb	r3, r3
 8004768:	2b29      	cmp	r3, #41	@ 0x29
 800476a:	d10e      	bne.n	800478a <I2C_ITSlaveCplt+0x3b2>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004772:	d00a      	beq.n	800478a <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2210      	movs	r2, #16
 800477a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 f9ea 	bl	8004b56 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7ff fdcc 	bl	8004320 <I2C_ITSlaveSeqCplt>
 8004788:	e01b      	b.n	80047c2 <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2210      	movs	r2, #16
 8004790:	61da      	str	r2, [r3, #28]
 8004792:	e016      	b.n	80047c2 <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2210      	movs	r2, #16
 800479a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047a0:	f043 0204 	orr.w	r2, r3, #4
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d003      	beq.n	80047b6 <I2C_ITSlaveCplt+0x3de>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80047b4:	d105      	bne.n	80047c2 <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ba:	4619      	mov	r1, r3
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f000 f8b3 	bl	8004928 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d010      	beq.n	80047fa <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047dc:	4619      	mov	r1, r3
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 f8a2 	bl	8004928 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	2b28      	cmp	r3, #40	@ 0x28
 80047ee:	d141      	bne.n	8004874 <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80047f0:	6979      	ldr	r1, [r7, #20]
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 f844 	bl	8004880 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80047f8:	e03c      	b.n	8004874 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047fe:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004802:	d014      	beq.n	800482e <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f7ff fd8b 	bl	8004320 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a1b      	ldr	r2, [pc, #108]	@ (800487c <I2C_ITSlaveCplt+0x4a4>)
 800480e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2220      	movs	r2, #32
 8004814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f7ff fb8b 	bl	8003f42 <HAL_I2C_ListenCpltCallback>
}
 800482c:	e022      	b.n	8004874 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b22      	cmp	r3, #34	@ 0x22
 8004838:	d10e      	bne.n	8004858 <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2220      	movs	r2, #32
 800483e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f7ff fb5e 	bl	8003f12 <HAL_I2C_SlaveRxCpltCallback>
}
 8004856:	e00d      	b.n	8004874 <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2220      	movs	r2, #32
 800485c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f7ff fb45 	bl	8003efe <HAL_I2C_SlaveTxCpltCallback>
}
 8004874:	bf00      	nop
 8004876:	3718      	adds	r7, #24
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	ffff0000 	.word	0xffff0000

08004880 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a25      	ldr	r2, [pc, #148]	@ (8004924 <I2C_ITListenCplt+0xa4>)
 800488e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2220      	movs	r2, #32
 800489a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	f003 0304 	and.w	r3, r3, #4
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d022      	beq.n	80048fc <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c0:	b2d2      	uxtb	r2, r2
 80048c2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c8:	1c5a      	adds	r2, r3, #1
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d012      	beq.n	80048fc <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048da:	3b01      	subs	r3, #1
 80048dc:	b29a      	uxth	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	3b01      	subs	r3, #1
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048f4:	f043 0204 	orr.w	r2, r3, #4
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80048fc:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 fb5f 	bl	8004fc4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2210      	movs	r2, #16
 800490c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f7ff fb13 	bl	8003f42 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800491c:	bf00      	nop
 800491e:	3708      	adds	r7, #8
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}
 8004924:	ffff0000 	.word	0xffff0000

08004928 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004938:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a6d      	ldr	r2, [pc, #436]	@ (8004afc <I2C_ITError+0x1d4>)
 8004946:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	431a      	orrs	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800495a:	7bfb      	ldrb	r3, [r7, #15]
 800495c:	2b28      	cmp	r3, #40	@ 0x28
 800495e:	d005      	beq.n	800496c <I2C_ITError+0x44>
 8004960:	7bfb      	ldrb	r3, [r7, #15]
 8004962:	2b29      	cmp	r3, #41	@ 0x29
 8004964:	d002      	beq.n	800496c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004966:	7bfb      	ldrb	r3, [r7, #15]
 8004968:	2b2a      	cmp	r3, #42	@ 0x2a
 800496a:	d10b      	bne.n	8004984 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800496c:	2103      	movs	r1, #3
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 fb28 	bl	8004fc4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2228      	movs	r2, #40	@ 0x28
 8004978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a60      	ldr	r2, [pc, #384]	@ (8004b00 <I2C_ITError+0x1d8>)
 8004980:	635a      	str	r2, [r3, #52]	@ 0x34
 8004982:	e030      	b.n	80049e6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004984:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 fb1b 	bl	8004fc4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f8e1 	bl	8004b56 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800499a:	b2db      	uxtb	r3, r3
 800499c:	2b60      	cmp	r3, #96	@ 0x60
 800499e:	d01f      	beq.n	80049e0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2220      	movs	r2, #32
 80049a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	f003 0320 	and.w	r3, r3, #32
 80049b2:	2b20      	cmp	r3, #32
 80049b4:	d114      	bne.n	80049e0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	f003 0310 	and.w	r3, r3, #16
 80049c0:	2b10      	cmp	r3, #16
 80049c2:	d109      	bne.n	80049d8 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2210      	movs	r2, #16
 80049ca:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049d0:	f043 0204 	orr.w	r2, r3, #4
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2220      	movs	r2, #32
 80049de:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ea:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d039      	beq.n	8004a68 <I2C_ITError+0x140>
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	2b11      	cmp	r3, #17
 80049f8:	d002      	beq.n	8004a00 <I2C_ITError+0xd8>
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	2b21      	cmp	r3, #33	@ 0x21
 80049fe:	d133      	bne.n	8004a68 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a0e:	d107      	bne.n	8004a20 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004a1e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7fd fed7 	bl	80027d8 <HAL_DMA_GetState>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d017      	beq.n	8004a60 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a34:	4a33      	ldr	r2, [pc, #204]	@ (8004b04 <I2C_ITError+0x1dc>)
 8004a36:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a44:	4618      	mov	r0, r3
 8004a46:	f7fd fc81 	bl	800234c <HAL_DMA_Abort_IT>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d04d      	beq.n	8004aec <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004a5a:	4610      	mov	r0, r2
 8004a5c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a5e:	e045      	b.n	8004aec <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 f851 	bl	8004b08 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a66:	e041      	b.n	8004aec <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d039      	beq.n	8004ae4 <I2C_ITError+0x1bc>
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	2b12      	cmp	r3, #18
 8004a74:	d002      	beq.n	8004a7c <I2C_ITError+0x154>
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	2b22      	cmp	r3, #34	@ 0x22
 8004a7a:	d133      	bne.n	8004ae4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a8a:	d107      	bne.n	8004a9c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a9a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f7fd fe99 	bl	80027d8 <HAL_DMA_GetState>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d017      	beq.n	8004adc <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ab0:	4a14      	ldr	r2, [pc, #80]	@ (8004b04 <I2C_ITError+0x1dc>)
 8004ab2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7fd fc43 	bl	800234c <HAL_DMA_Abort_IT>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d011      	beq.n	8004af0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ad0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004ad6:	4610      	mov	r0, r2
 8004ad8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ada:	e009      	b.n	8004af0 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 f813 	bl	8004b08 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ae2:	e005      	b.n	8004af0 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 f80f 	bl	8004b08 <I2C_TreatErrorCallback>
  }
}
 8004aea:	e002      	b.n	8004af2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004aec:	bf00      	nop
 8004aee:	e000      	b.n	8004af2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004af0:	bf00      	nop
}
 8004af2:	bf00      	nop
 8004af4:	3710      	adds	r7, #16
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	ffff0000 	.word	0xffff0000
 8004b00:	08003f7f 	.word	0x08003f7f
 8004b04:	08004b9f 	.word	0x08004b9f

08004b08 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	2b60      	cmp	r3, #96	@ 0x60
 8004b1a:	d10e      	bne.n	8004b3a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2220      	movs	r2, #32
 8004b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f7ff fa19 	bl	8003f6a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004b38:	e009      	b.n	8004b4e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f7ff fa04 	bl	8003f56 <HAL_I2C_ErrorCallback>
}
 8004b4e:	bf00      	nop
 8004b50:	3708      	adds	r7, #8
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004b56:	b480      	push	{r7}
 8004b58:	b083      	sub	sp, #12
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	699b      	ldr	r3, [r3, #24]
 8004b64:	f003 0302 	and.w	r3, r3, #2
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d103      	bne.n	8004b74 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2200      	movs	r2, #0
 8004b72:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d007      	beq.n	8004b92 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	699a      	ldr	r2, [r3, #24]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f042 0201 	orr.w	r2, r2, #1
 8004b90:	619a      	str	r2, [r3, #24]
  }
}
 8004b92:	bf00      	nop
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr

08004b9e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004b9e:	b580      	push	{r7, lr}
 8004ba0:	b084      	sub	sp, #16
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004baa:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d003      	beq.n	8004bbc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bb8:	2200      	movs	r2, #0
 8004bba:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d003      	beq.n	8004bcc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bc8:	2200      	movs	r2, #0
 8004bca:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8004bcc:	68f8      	ldr	r0, [r7, #12]
 8004bce:	f7ff ff9b 	bl	8004b08 <I2C_TreatErrorCallback>
}
 8004bd2:	bf00      	nop
 8004bd4:	3710      	adds	r7, #16
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}

08004bda <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b084      	sub	sp, #16
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	60f8      	str	r0, [r7, #12]
 8004be2:	60b9      	str	r1, [r7, #8]
 8004be4:	603b      	str	r3, [r7, #0]
 8004be6:	4613      	mov	r3, r2
 8004be8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bea:	e03b      	b.n	8004c64 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bec:	69ba      	ldr	r2, [r7, #24]
 8004bee:	6839      	ldr	r1, [r7, #0]
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f000 f8d5 	bl	8004da0 <I2C_IsErrorOccurred>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d001      	beq.n	8004c00 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e041      	b.n	8004c84 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c06:	d02d      	beq.n	8004c64 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c08:	f7fc ff82 	bl	8001b10 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	683a      	ldr	r2, [r7, #0]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d302      	bcc.n	8004c1e <I2C_WaitOnFlagUntilTimeout+0x44>
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d122      	bne.n	8004c64 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	699a      	ldr	r2, [r3, #24]
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	4013      	ands	r3, r2
 8004c28:	68ba      	ldr	r2, [r7, #8]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	bf0c      	ite	eq
 8004c2e:	2301      	moveq	r3, #1
 8004c30:	2300      	movne	r3, #0
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	461a      	mov	r2, r3
 8004c36:	79fb      	ldrb	r3, [r7, #7]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d113      	bne.n	8004c64 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c40:	f043 0220 	orr.w	r2, r3, #32
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e00f      	b.n	8004c84 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	699a      	ldr	r2, [r3, #24]
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	bf0c      	ite	eq
 8004c74:	2301      	moveq	r3, #1
 8004c76:	2300      	movne	r3, #0
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	79fb      	ldrb	r3, [r7, #7]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d0b4      	beq.n	8004bec <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3710      	adds	r7, #16
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c98:	e033      	b.n	8004d02 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	68b9      	ldr	r1, [r7, #8]
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 f87e 	bl	8004da0 <I2C_IsErrorOccurred>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e031      	b.n	8004d12 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb4:	d025      	beq.n	8004d02 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cb6:	f7fc ff2b 	bl	8001b10 <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d302      	bcc.n	8004ccc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d11a      	bne.n	8004d02 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d013      	beq.n	8004d02 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cde:	f043 0220 	orr.w	r2, r3, #32
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2220      	movs	r2, #32
 8004cea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e007      	b.n	8004d12 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	f003 0302 	and.w	r3, r3, #2
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d1c4      	bne.n	8004c9a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b084      	sub	sp, #16
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	60f8      	str	r0, [r7, #12]
 8004d22:	60b9      	str	r1, [r7, #8]
 8004d24:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d26:	e02f      	b.n	8004d88 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	68b9      	ldr	r1, [r7, #8]
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f000 f837 	bl	8004da0 <I2C_IsErrorOccurred>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d001      	beq.n	8004d3c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e02d      	b.n	8004d98 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d3c:	f7fc fee8 	bl	8001b10 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	68ba      	ldr	r2, [r7, #8]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d302      	bcc.n	8004d52 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d11a      	bne.n	8004d88 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	699b      	ldr	r3, [r3, #24]
 8004d58:	f003 0320 	and.w	r3, r3, #32
 8004d5c:	2b20      	cmp	r3, #32
 8004d5e:	d013      	beq.n	8004d88 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d64:	f043 0220 	orr.w	r2, r3, #32
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e007      	b.n	8004d98 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	f003 0320 	and.w	r3, r3, #32
 8004d92:	2b20      	cmp	r3, #32
 8004d94:	d1c8      	bne.n	8004d28 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b08a      	sub	sp, #40	@ 0x28
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dac:	2300      	movs	r3, #0
 8004dae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	f003 0310 	and.w	r3, r3, #16
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d068      	beq.n	8004e9e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2210      	movs	r2, #16
 8004dd2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004dd4:	e049      	b.n	8004e6a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ddc:	d045      	beq.n	8004e6a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004dde:	f7fc fe97 	bl	8001b10 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	68ba      	ldr	r2, [r7, #8]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d302      	bcc.n	8004df4 <I2C_IsErrorOccurred+0x54>
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d13a      	bne.n	8004e6a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004dfe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e06:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e16:	d121      	bne.n	8004e5c <I2C_IsErrorOccurred+0xbc>
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e1e:	d01d      	beq.n	8004e5c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004e20:	7cfb      	ldrb	r3, [r7, #19]
 8004e22:	2b20      	cmp	r3, #32
 8004e24:	d01a      	beq.n	8004e5c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	685a      	ldr	r2, [r3, #4]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e34:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004e36:	f7fc fe6b 	bl	8001b10 <HAL_GetTick>
 8004e3a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e3c:	e00e      	b.n	8004e5c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004e3e:	f7fc fe67 	bl	8001b10 <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	2b19      	cmp	r3, #25
 8004e4a:	d907      	bls.n	8004e5c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004e4c:	6a3b      	ldr	r3, [r7, #32]
 8004e4e:	f043 0320 	orr.w	r3, r3, #32
 8004e52:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004e5a:	e006      	b.n	8004e6a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	f003 0320 	and.w	r3, r3, #32
 8004e66:	2b20      	cmp	r3, #32
 8004e68:	d1e9      	bne.n	8004e3e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	f003 0320 	and.w	r3, r3, #32
 8004e74:	2b20      	cmp	r3, #32
 8004e76:	d003      	beq.n	8004e80 <I2C_IsErrorOccurred+0xe0>
 8004e78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d0aa      	beq.n	8004dd6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004e80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d103      	bne.n	8004e90 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004e90:	6a3b      	ldr	r3, [r7, #32]
 8004e92:	f043 0304 	orr.w	r3, r3, #4
 8004e96:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00b      	beq.n	8004ec8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004eb0:	6a3b      	ldr	r3, [r7, #32]
 8004eb2:	f043 0301 	orr.w	r3, r3, #1
 8004eb6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004ec0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00b      	beq.n	8004eea <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004ed2:	6a3b      	ldr	r3, [r7, #32]
 8004ed4:	f043 0308 	orr.w	r3, r3, #8
 8004ed8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004ee2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00b      	beq.n	8004f0c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004ef4:	6a3b      	ldr	r3, [r7, #32]
 8004ef6:	f043 0302 	orr.w	r3, r3, #2
 8004efa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004f0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d01c      	beq.n	8004f4e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004f14:	68f8      	ldr	r0, [r7, #12]
 8004f16:	f7ff fe1e 	bl	8004b56 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	6859      	ldr	r1, [r3, #4]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	4b0d      	ldr	r3, [pc, #52]	@ (8004f5c <I2C_IsErrorOccurred+0x1bc>)
 8004f26:	400b      	ands	r3, r1
 8004f28:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f2e:	6a3b      	ldr	r3, [r7, #32]
 8004f30:	431a      	orrs	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2220      	movs	r2, #32
 8004f3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004f4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3728      	adds	r7, #40	@ 0x28
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	fe00e800 	.word	0xfe00e800

08004f60 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b087      	sub	sp, #28
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	607b      	str	r3, [r7, #4]
 8004f6a:	460b      	mov	r3, r1
 8004f6c:	817b      	strh	r3, [r7, #10]
 8004f6e:	4613      	mov	r3, r2
 8004f70:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f72:	897b      	ldrh	r3, [r7, #10]
 8004f74:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004f78:	7a7b      	ldrb	r3, [r7, #9]
 8004f7a:	041b      	lsls	r3, r3, #16
 8004f7c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f80:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f86:	6a3b      	ldr	r3, [r7, #32]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004f8e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	685a      	ldr	r2, [r3, #4]
 8004f96:	6a3b      	ldr	r3, [r7, #32]
 8004f98:	0d5b      	lsrs	r3, r3, #21
 8004f9a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004f9e:	4b08      	ldr	r3, [pc, #32]	@ (8004fc0 <I2C_TransferConfig+0x60>)
 8004fa0:	430b      	orrs	r3, r1
 8004fa2:	43db      	mvns	r3, r3
 8004fa4:	ea02 0103 	and.w	r1, r2, r3
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	697a      	ldr	r2, [r7, #20]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004fb2:	bf00      	nop
 8004fb4:	371c      	adds	r7, #28
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	03ff63ff 	.word	0x03ff63ff

08004fc4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	460b      	mov	r3, r1
 8004fce:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004fd4:	887b      	ldrh	r3, [r7, #2]
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00f      	beq.n	8004ffe <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8004fe4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004ff2:	2b28      	cmp	r3, #40	@ 0x28
 8004ff4:	d003      	beq.n	8004ffe <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004ffc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004ffe:	887b      	ldrh	r3, [r7, #2]
 8005000:	f003 0302 	and.w	r3, r3, #2
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00f      	beq.n	8005028 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800500e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005016:	b2db      	uxtb	r3, r3
 8005018:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800501c:	2b28      	cmp	r3, #40	@ 0x28
 800501e:	d003      	beq.n	8005028 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005026:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005028:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800502c:	2b00      	cmp	r3, #0
 800502e:	da03      	bge.n	8005038 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005036:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005038:	887b      	ldrh	r3, [r7, #2]
 800503a:	2b10      	cmp	r3, #16
 800503c:	d103      	bne.n	8005046 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005044:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005046:	887b      	ldrh	r3, [r7, #2]
 8005048:	2b20      	cmp	r3, #32
 800504a:	d103      	bne.n	8005054 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f043 0320 	orr.w	r3, r3, #32
 8005052:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005054:	887b      	ldrh	r3, [r7, #2]
 8005056:	2b40      	cmp	r3, #64	@ 0x40
 8005058:	d103      	bne.n	8005062 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005060:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	6819      	ldr	r1, [r3, #0]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	43da      	mvns	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	400a      	ands	r2, r1
 8005072:	601a      	str	r2, [r3, #0]
}
 8005074:	bf00      	nop
 8005076:	3714      	adds	r7, #20
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005090:	b2db      	uxtb	r3, r3
 8005092:	2b20      	cmp	r3, #32
 8005094:	d138      	bne.n	8005108 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800509c:	2b01      	cmp	r3, #1
 800509e:	d101      	bne.n	80050a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80050a0:	2302      	movs	r3, #2
 80050a2:	e032      	b.n	800510a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2224      	movs	r2, #36	@ 0x24
 80050b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f022 0201 	bic.w	r2, r2, #1
 80050c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80050d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	6819      	ldr	r1, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	683a      	ldr	r2, [r7, #0]
 80050e0:	430a      	orrs	r2, r1
 80050e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f042 0201 	orr.w	r2, r2, #1
 80050f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2220      	movs	r2, #32
 80050f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005104:	2300      	movs	r3, #0
 8005106:	e000      	b.n	800510a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005108:	2302      	movs	r3, #2
  }
}
 800510a:	4618      	mov	r0, r3
 800510c:	370c      	adds	r7, #12
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr

08005116 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005116:	b480      	push	{r7}
 8005118:	b085      	sub	sp, #20
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
 800511e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005126:	b2db      	uxtb	r3, r3
 8005128:	2b20      	cmp	r3, #32
 800512a:	d139      	bne.n	80051a0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005132:	2b01      	cmp	r3, #1
 8005134:	d101      	bne.n	800513a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005136:	2302      	movs	r3, #2
 8005138:	e033      	b.n	80051a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2201      	movs	r2, #1
 800513e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2224      	movs	r2, #36	@ 0x24
 8005146:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f022 0201 	bic.w	r2, r2, #1
 8005158:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005168:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	021b      	lsls	r3, r3, #8
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	4313      	orrs	r3, r2
 8005172:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f042 0201 	orr.w	r2, r2, #1
 800518a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2220      	movs	r2, #32
 8005190:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800519c:	2300      	movs	r3, #0
 800519e:	e000      	b.n	80051a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80051a0:	2302      	movs	r3, #2
  }
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3714      	adds	r7, #20
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
	...

080051b0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80051b8:	4b19      	ldr	r3, [pc, #100]	@ (8005220 <HAL_PWREx_ConfigSupply+0x70>)
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	f003 0304 	and.w	r3, r3, #4
 80051c0:	2b04      	cmp	r3, #4
 80051c2:	d00a      	beq.n	80051da <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80051c4:	4b16      	ldr	r3, [pc, #88]	@ (8005220 <HAL_PWREx_ConfigSupply+0x70>)
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	f003 0307 	and.w	r3, r3, #7
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d001      	beq.n	80051d6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e01f      	b.n	8005216 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80051d6:	2300      	movs	r3, #0
 80051d8:	e01d      	b.n	8005216 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80051da:	4b11      	ldr	r3, [pc, #68]	@ (8005220 <HAL_PWREx_ConfigSupply+0x70>)
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	f023 0207 	bic.w	r2, r3, #7
 80051e2:	490f      	ldr	r1, [pc, #60]	@ (8005220 <HAL_PWREx_ConfigSupply+0x70>)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80051ea:	f7fc fc91 	bl	8001b10 <HAL_GetTick>
 80051ee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80051f0:	e009      	b.n	8005206 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80051f2:	f7fc fc8d 	bl	8001b10 <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005200:	d901      	bls.n	8005206 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e007      	b.n	8005216 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005206:	4b06      	ldr	r3, [pc, #24]	@ (8005220 <HAL_PWREx_ConfigSupply+0x70>)
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800520e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005212:	d1ee      	bne.n	80051f2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	58024800 	.word	0x58024800

08005224 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b08c      	sub	sp, #48	@ 0x30
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d101      	bne.n	8005236 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e3c8      	b.n	80059c8 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0301 	and.w	r3, r3, #1
 800523e:	2b00      	cmp	r3, #0
 8005240:	f000 8087 	beq.w	8005352 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005244:	4b88      	ldr	r3, [pc, #544]	@ (8005468 <HAL_RCC_OscConfig+0x244>)
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800524c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800524e:	4b86      	ldr	r3, [pc, #536]	@ (8005468 <HAL_RCC_OscConfig+0x244>)
 8005250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005252:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005256:	2b10      	cmp	r3, #16
 8005258:	d007      	beq.n	800526a <HAL_RCC_OscConfig+0x46>
 800525a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800525c:	2b18      	cmp	r3, #24
 800525e:	d110      	bne.n	8005282 <HAL_RCC_OscConfig+0x5e>
 8005260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005262:	f003 0303 	and.w	r3, r3, #3
 8005266:	2b02      	cmp	r3, #2
 8005268:	d10b      	bne.n	8005282 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800526a:	4b7f      	ldr	r3, [pc, #508]	@ (8005468 <HAL_RCC_OscConfig+0x244>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d06c      	beq.n	8005350 <HAL_RCC_OscConfig+0x12c>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d168      	bne.n	8005350 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e3a2      	b.n	80059c8 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800528a:	d106      	bne.n	800529a <HAL_RCC_OscConfig+0x76>
 800528c:	4b76      	ldr	r3, [pc, #472]	@ (8005468 <HAL_RCC_OscConfig+0x244>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a75      	ldr	r2, [pc, #468]	@ (8005468 <HAL_RCC_OscConfig+0x244>)
 8005292:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005296:	6013      	str	r3, [r2, #0]
 8005298:	e02e      	b.n	80052f8 <HAL_RCC_OscConfig+0xd4>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d10c      	bne.n	80052bc <HAL_RCC_OscConfig+0x98>
 80052a2:	4b71      	ldr	r3, [pc, #452]	@ (8005468 <HAL_RCC_OscConfig+0x244>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a70      	ldr	r2, [pc, #448]	@ (8005468 <HAL_RCC_OscConfig+0x244>)
 80052a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052ac:	6013      	str	r3, [r2, #0]
 80052ae:	4b6e      	ldr	r3, [pc, #440]	@ (8005468 <HAL_RCC_OscConfig+0x244>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a6d      	ldr	r2, [pc, #436]	@ (8005468 <HAL_RCC_OscConfig+0x244>)
 80052b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052b8:	6013      	str	r3, [r2, #0]
 80052ba:	e01d      	b.n	80052f8 <HAL_RCC_OscConfig+0xd4>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80052c4:	d10c      	bne.n	80052e0 <HAL_RCC_OscConfig+0xbc>
 80052c6:	4b68      	ldr	r3, [pc, #416]	@ (8005468 <HAL_RCC_OscConfig+0x244>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a67      	ldr	r2, [pc, #412]	@ (8005468 <HAL_RCC_OscConfig+0x244>)
 80052cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80052d0:	6013      	str	r3, [r2, #0]
 80052d2:	4b65      	ldr	r3, [pc, #404]	@ (8005468 <HAL_RCC_OscConfig+0x244>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a64      	ldr	r2, [pc, #400]	@ (8005468 <HAL_RCC_OscConfig+0x244>)
 80052d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052dc:	6013      	str	r3, [r2, #0]
 80052de:	e00b      	b.n	80052f8 <HAL_RCC_OscConfig+0xd4>
 80052e0:	4b61      	ldr	r3, [pc, #388]	@ (8005468 <HAL_RCC_OscConfig+0x244>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a60      	ldr	r2, [pc, #384]	@ (8005468 <HAL_RCC_OscConfig+0x244>)
 80052e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052ea:	6013      	str	r3, [r2, #0]
 80052ec:	4b5e      	ldr	r3, [pc, #376]	@ (8005468 <HAL_RCC_OscConfig+0x244>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a5d      	ldr	r2, [pc, #372]	@ (8005468 <HAL_RCC_OscConfig+0x244>)
 80052f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d013      	beq.n	8005328 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005300:	f7fc fc06 	bl	8001b10 <HAL_GetTick>
 8005304:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005306:	e008      	b.n	800531a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005308:	f7fc fc02 	bl	8001b10 <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	2b64      	cmp	r3, #100	@ 0x64
 8005314:	d901      	bls.n	800531a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e356      	b.n	80059c8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800531a:	4b53      	ldr	r3, [pc, #332]	@ (8005468 <HAL_RCC_OscConfig+0x244>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d0f0      	beq.n	8005308 <HAL_RCC_OscConfig+0xe4>
 8005326:	e014      	b.n	8005352 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005328:	f7fc fbf2 	bl	8001b10 <HAL_GetTick>
 800532c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800532e:	e008      	b.n	8005342 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005330:	f7fc fbee 	bl	8001b10 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	2b64      	cmp	r3, #100	@ 0x64
 800533c:	d901      	bls.n	8005342 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e342      	b.n	80059c8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005342:	4b49      	ldr	r3, [pc, #292]	@ (8005468 <HAL_RCC_OscConfig+0x244>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1f0      	bne.n	8005330 <HAL_RCC_OscConfig+0x10c>
 800534e:	e000      	b.n	8005352 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005350:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0302 	and.w	r3, r3, #2
 800535a:	2b00      	cmp	r3, #0
 800535c:	f000 808c 	beq.w	8005478 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005360:	4b41      	ldr	r3, [pc, #260]	@ (8005468 <HAL_RCC_OscConfig+0x244>)
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005368:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800536a:	4b3f      	ldr	r3, [pc, #252]	@ (8005468 <HAL_RCC_OscConfig+0x244>)
 800536c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800536e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005370:	6a3b      	ldr	r3, [r7, #32]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d007      	beq.n	8005386 <HAL_RCC_OscConfig+0x162>
 8005376:	6a3b      	ldr	r3, [r7, #32]
 8005378:	2b18      	cmp	r3, #24
 800537a:	d137      	bne.n	80053ec <HAL_RCC_OscConfig+0x1c8>
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	f003 0303 	and.w	r3, r3, #3
 8005382:	2b00      	cmp	r3, #0
 8005384:	d132      	bne.n	80053ec <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005386:	4b38      	ldr	r3, [pc, #224]	@ (8005468 <HAL_RCC_OscConfig+0x244>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0304 	and.w	r3, r3, #4
 800538e:	2b00      	cmp	r3, #0
 8005390:	d005      	beq.n	800539e <HAL_RCC_OscConfig+0x17a>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d101      	bne.n	800539e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e314      	b.n	80059c8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800539e:	4b32      	ldr	r3, [pc, #200]	@ (8005468 <HAL_RCC_OscConfig+0x244>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f023 0219 	bic.w	r2, r3, #25
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	492f      	ldr	r1, [pc, #188]	@ (8005468 <HAL_RCC_OscConfig+0x244>)
 80053ac:	4313      	orrs	r3, r2
 80053ae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b0:	f7fc fbae 	bl	8001b10 <HAL_GetTick>
 80053b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053b6:	e008      	b.n	80053ca <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053b8:	f7fc fbaa 	bl	8001b10 <HAL_GetTick>
 80053bc:	4602      	mov	r2, r0
 80053be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d901      	bls.n	80053ca <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e2fe      	b.n	80059c8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053ca:	4b27      	ldr	r3, [pc, #156]	@ (8005468 <HAL_RCC_OscConfig+0x244>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0304 	and.w	r3, r3, #4
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d0f0      	beq.n	80053b8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053d6:	4b24      	ldr	r3, [pc, #144]	@ (8005468 <HAL_RCC_OscConfig+0x244>)
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	061b      	lsls	r3, r3, #24
 80053e4:	4920      	ldr	r1, [pc, #128]	@ (8005468 <HAL_RCC_OscConfig+0x244>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053ea:	e045      	b.n	8005478 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d026      	beq.n	8005442 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80053f4:	4b1c      	ldr	r3, [pc, #112]	@ (8005468 <HAL_RCC_OscConfig+0x244>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f023 0219 	bic.w	r2, r3, #25
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	4919      	ldr	r1, [pc, #100]	@ (8005468 <HAL_RCC_OscConfig+0x244>)
 8005402:	4313      	orrs	r3, r2
 8005404:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005406:	f7fc fb83 	bl	8001b10 <HAL_GetTick>
 800540a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800540c:	e008      	b.n	8005420 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800540e:	f7fc fb7f 	bl	8001b10 <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	2b02      	cmp	r3, #2
 800541a:	d901      	bls.n	8005420 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e2d3      	b.n	80059c8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005420:	4b11      	ldr	r3, [pc, #68]	@ (8005468 <HAL_RCC_OscConfig+0x244>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0304 	and.w	r3, r3, #4
 8005428:	2b00      	cmp	r3, #0
 800542a:	d0f0      	beq.n	800540e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800542c:	4b0e      	ldr	r3, [pc, #56]	@ (8005468 <HAL_RCC_OscConfig+0x244>)
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	061b      	lsls	r3, r3, #24
 800543a:	490b      	ldr	r1, [pc, #44]	@ (8005468 <HAL_RCC_OscConfig+0x244>)
 800543c:	4313      	orrs	r3, r2
 800543e:	604b      	str	r3, [r1, #4]
 8005440:	e01a      	b.n	8005478 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005442:	4b09      	ldr	r3, [pc, #36]	@ (8005468 <HAL_RCC_OscConfig+0x244>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a08      	ldr	r2, [pc, #32]	@ (8005468 <HAL_RCC_OscConfig+0x244>)
 8005448:	f023 0301 	bic.w	r3, r3, #1
 800544c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800544e:	f7fc fb5f 	bl	8001b10 <HAL_GetTick>
 8005452:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005454:	e00a      	b.n	800546c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005456:	f7fc fb5b 	bl	8001b10 <HAL_GetTick>
 800545a:	4602      	mov	r2, r0
 800545c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	2b02      	cmp	r3, #2
 8005462:	d903      	bls.n	800546c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	e2af      	b.n	80059c8 <HAL_RCC_OscConfig+0x7a4>
 8005468:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800546c:	4b96      	ldr	r3, [pc, #600]	@ (80056c8 <HAL_RCC_OscConfig+0x4a4>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0304 	and.w	r3, r3, #4
 8005474:	2b00      	cmp	r3, #0
 8005476:	d1ee      	bne.n	8005456 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0310 	and.w	r3, r3, #16
 8005480:	2b00      	cmp	r3, #0
 8005482:	d06a      	beq.n	800555a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005484:	4b90      	ldr	r3, [pc, #576]	@ (80056c8 <HAL_RCC_OscConfig+0x4a4>)
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800548c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800548e:	4b8e      	ldr	r3, [pc, #568]	@ (80056c8 <HAL_RCC_OscConfig+0x4a4>)
 8005490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005492:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	2b08      	cmp	r3, #8
 8005498:	d007      	beq.n	80054aa <HAL_RCC_OscConfig+0x286>
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	2b18      	cmp	r3, #24
 800549e:	d11b      	bne.n	80054d8 <HAL_RCC_OscConfig+0x2b4>
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	f003 0303 	and.w	r3, r3, #3
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d116      	bne.n	80054d8 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80054aa:	4b87      	ldr	r3, [pc, #540]	@ (80056c8 <HAL_RCC_OscConfig+0x4a4>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d005      	beq.n	80054c2 <HAL_RCC_OscConfig+0x29e>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	69db      	ldr	r3, [r3, #28]
 80054ba:	2b80      	cmp	r3, #128	@ 0x80
 80054bc:	d001      	beq.n	80054c2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e282      	b.n	80059c8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80054c2:	4b81      	ldr	r3, [pc, #516]	@ (80056c8 <HAL_RCC_OscConfig+0x4a4>)
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	061b      	lsls	r3, r3, #24
 80054d0:	497d      	ldr	r1, [pc, #500]	@ (80056c8 <HAL_RCC_OscConfig+0x4a4>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80054d6:	e040      	b.n	800555a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	69db      	ldr	r3, [r3, #28]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d023      	beq.n	8005528 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80054e0:	4b79      	ldr	r3, [pc, #484]	@ (80056c8 <HAL_RCC_OscConfig+0x4a4>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a78      	ldr	r2, [pc, #480]	@ (80056c8 <HAL_RCC_OscConfig+0x4a4>)
 80054e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ec:	f7fc fb10 	bl	8001b10 <HAL_GetTick>
 80054f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80054f2:	e008      	b.n	8005506 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80054f4:	f7fc fb0c 	bl	8001b10 <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d901      	bls.n	8005506 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e260      	b.n	80059c8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005506:	4b70      	ldr	r3, [pc, #448]	@ (80056c8 <HAL_RCC_OscConfig+0x4a4>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800550e:	2b00      	cmp	r3, #0
 8005510:	d0f0      	beq.n	80054f4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005512:	4b6d      	ldr	r3, [pc, #436]	@ (80056c8 <HAL_RCC_OscConfig+0x4a4>)
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a1b      	ldr	r3, [r3, #32]
 800551e:	061b      	lsls	r3, r3, #24
 8005520:	4969      	ldr	r1, [pc, #420]	@ (80056c8 <HAL_RCC_OscConfig+0x4a4>)
 8005522:	4313      	orrs	r3, r2
 8005524:	60cb      	str	r3, [r1, #12]
 8005526:	e018      	b.n	800555a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005528:	4b67      	ldr	r3, [pc, #412]	@ (80056c8 <HAL_RCC_OscConfig+0x4a4>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a66      	ldr	r2, [pc, #408]	@ (80056c8 <HAL_RCC_OscConfig+0x4a4>)
 800552e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005532:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005534:	f7fc faec 	bl	8001b10 <HAL_GetTick>
 8005538:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800553a:	e008      	b.n	800554e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800553c:	f7fc fae8 	bl	8001b10 <HAL_GetTick>
 8005540:	4602      	mov	r2, r0
 8005542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	2b02      	cmp	r3, #2
 8005548:	d901      	bls.n	800554e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	e23c      	b.n	80059c8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800554e:	4b5e      	ldr	r3, [pc, #376]	@ (80056c8 <HAL_RCC_OscConfig+0x4a4>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005556:	2b00      	cmp	r3, #0
 8005558:	d1f0      	bne.n	800553c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0308 	and.w	r3, r3, #8
 8005562:	2b00      	cmp	r3, #0
 8005564:	d036      	beq.n	80055d4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d019      	beq.n	80055a2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800556e:	4b56      	ldr	r3, [pc, #344]	@ (80056c8 <HAL_RCC_OscConfig+0x4a4>)
 8005570:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005572:	4a55      	ldr	r2, [pc, #340]	@ (80056c8 <HAL_RCC_OscConfig+0x4a4>)
 8005574:	f043 0301 	orr.w	r3, r3, #1
 8005578:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800557a:	f7fc fac9 	bl	8001b10 <HAL_GetTick>
 800557e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005580:	e008      	b.n	8005594 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005582:	f7fc fac5 	bl	8001b10 <HAL_GetTick>
 8005586:	4602      	mov	r2, r0
 8005588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	2b02      	cmp	r3, #2
 800558e:	d901      	bls.n	8005594 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e219      	b.n	80059c8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005594:	4b4c      	ldr	r3, [pc, #304]	@ (80056c8 <HAL_RCC_OscConfig+0x4a4>)
 8005596:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005598:	f003 0302 	and.w	r3, r3, #2
 800559c:	2b00      	cmp	r3, #0
 800559e:	d0f0      	beq.n	8005582 <HAL_RCC_OscConfig+0x35e>
 80055a0:	e018      	b.n	80055d4 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055a2:	4b49      	ldr	r3, [pc, #292]	@ (80056c8 <HAL_RCC_OscConfig+0x4a4>)
 80055a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055a6:	4a48      	ldr	r2, [pc, #288]	@ (80056c8 <HAL_RCC_OscConfig+0x4a4>)
 80055a8:	f023 0301 	bic.w	r3, r3, #1
 80055ac:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055ae:	f7fc faaf 	bl	8001b10 <HAL_GetTick>
 80055b2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80055b4:	e008      	b.n	80055c8 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055b6:	f7fc faab 	bl	8001b10 <HAL_GetTick>
 80055ba:	4602      	mov	r2, r0
 80055bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d901      	bls.n	80055c8 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80055c4:	2303      	movs	r3, #3
 80055c6:	e1ff      	b.n	80059c8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80055c8:	4b3f      	ldr	r3, [pc, #252]	@ (80056c8 <HAL_RCC_OscConfig+0x4a4>)
 80055ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055cc:	f003 0302 	and.w	r3, r3, #2
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d1f0      	bne.n	80055b6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0320 	and.w	r3, r3, #32
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d036      	beq.n	800564e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	699b      	ldr	r3, [r3, #24]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d019      	beq.n	800561c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80055e8:	4b37      	ldr	r3, [pc, #220]	@ (80056c8 <HAL_RCC_OscConfig+0x4a4>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a36      	ldr	r2, [pc, #216]	@ (80056c8 <HAL_RCC_OscConfig+0x4a4>)
 80055ee:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80055f2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80055f4:	f7fc fa8c 	bl	8001b10 <HAL_GetTick>
 80055f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80055fa:	e008      	b.n	800560e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055fc:	f7fc fa88 	bl	8001b10 <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	2b02      	cmp	r3, #2
 8005608:	d901      	bls.n	800560e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e1dc      	b.n	80059c8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800560e:	4b2e      	ldr	r3, [pc, #184]	@ (80056c8 <HAL_RCC_OscConfig+0x4a4>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d0f0      	beq.n	80055fc <HAL_RCC_OscConfig+0x3d8>
 800561a:	e018      	b.n	800564e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800561c:	4b2a      	ldr	r3, [pc, #168]	@ (80056c8 <HAL_RCC_OscConfig+0x4a4>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a29      	ldr	r2, [pc, #164]	@ (80056c8 <HAL_RCC_OscConfig+0x4a4>)
 8005622:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005626:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005628:	f7fc fa72 	bl	8001b10 <HAL_GetTick>
 800562c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800562e:	e008      	b.n	8005642 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005630:	f7fc fa6e 	bl	8001b10 <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	2b02      	cmp	r3, #2
 800563c:	d901      	bls.n	8005642 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e1c2      	b.n	80059c8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005642:	4b21      	ldr	r3, [pc, #132]	@ (80056c8 <HAL_RCC_OscConfig+0x4a4>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1f0      	bne.n	8005630 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0304 	and.w	r3, r3, #4
 8005656:	2b00      	cmp	r3, #0
 8005658:	f000 8086 	beq.w	8005768 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800565c:	4b1b      	ldr	r3, [pc, #108]	@ (80056cc <HAL_RCC_OscConfig+0x4a8>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a1a      	ldr	r2, [pc, #104]	@ (80056cc <HAL_RCC_OscConfig+0x4a8>)
 8005662:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005666:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005668:	f7fc fa52 	bl	8001b10 <HAL_GetTick>
 800566c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800566e:	e008      	b.n	8005682 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005670:	f7fc fa4e 	bl	8001b10 <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	2b64      	cmp	r3, #100	@ 0x64
 800567c:	d901      	bls.n	8005682 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e1a2      	b.n	80059c8 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005682:	4b12      	ldr	r3, [pc, #72]	@ (80056cc <HAL_RCC_OscConfig+0x4a8>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800568a:	2b00      	cmp	r3, #0
 800568c:	d0f0      	beq.n	8005670 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d106      	bne.n	80056a4 <HAL_RCC_OscConfig+0x480>
 8005696:	4b0c      	ldr	r3, [pc, #48]	@ (80056c8 <HAL_RCC_OscConfig+0x4a4>)
 8005698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800569a:	4a0b      	ldr	r2, [pc, #44]	@ (80056c8 <HAL_RCC_OscConfig+0x4a4>)
 800569c:	f043 0301 	orr.w	r3, r3, #1
 80056a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80056a2:	e032      	b.n	800570a <HAL_RCC_OscConfig+0x4e6>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d111      	bne.n	80056d0 <HAL_RCC_OscConfig+0x4ac>
 80056ac:	4b06      	ldr	r3, [pc, #24]	@ (80056c8 <HAL_RCC_OscConfig+0x4a4>)
 80056ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056b0:	4a05      	ldr	r2, [pc, #20]	@ (80056c8 <HAL_RCC_OscConfig+0x4a4>)
 80056b2:	f023 0301 	bic.w	r3, r3, #1
 80056b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80056b8:	4b03      	ldr	r3, [pc, #12]	@ (80056c8 <HAL_RCC_OscConfig+0x4a4>)
 80056ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056bc:	4a02      	ldr	r2, [pc, #8]	@ (80056c8 <HAL_RCC_OscConfig+0x4a4>)
 80056be:	f023 0304 	bic.w	r3, r3, #4
 80056c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80056c4:	e021      	b.n	800570a <HAL_RCC_OscConfig+0x4e6>
 80056c6:	bf00      	nop
 80056c8:	58024400 	.word	0x58024400
 80056cc:	58024800 	.word	0x58024800
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	2b05      	cmp	r3, #5
 80056d6:	d10c      	bne.n	80056f2 <HAL_RCC_OscConfig+0x4ce>
 80056d8:	4b83      	ldr	r3, [pc, #524]	@ (80058e8 <HAL_RCC_OscConfig+0x6c4>)
 80056da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056dc:	4a82      	ldr	r2, [pc, #520]	@ (80058e8 <HAL_RCC_OscConfig+0x6c4>)
 80056de:	f043 0304 	orr.w	r3, r3, #4
 80056e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80056e4:	4b80      	ldr	r3, [pc, #512]	@ (80058e8 <HAL_RCC_OscConfig+0x6c4>)
 80056e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056e8:	4a7f      	ldr	r2, [pc, #508]	@ (80058e8 <HAL_RCC_OscConfig+0x6c4>)
 80056ea:	f043 0301 	orr.w	r3, r3, #1
 80056ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80056f0:	e00b      	b.n	800570a <HAL_RCC_OscConfig+0x4e6>
 80056f2:	4b7d      	ldr	r3, [pc, #500]	@ (80058e8 <HAL_RCC_OscConfig+0x6c4>)
 80056f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056f6:	4a7c      	ldr	r2, [pc, #496]	@ (80058e8 <HAL_RCC_OscConfig+0x6c4>)
 80056f8:	f023 0301 	bic.w	r3, r3, #1
 80056fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80056fe:	4b7a      	ldr	r3, [pc, #488]	@ (80058e8 <HAL_RCC_OscConfig+0x6c4>)
 8005700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005702:	4a79      	ldr	r2, [pc, #484]	@ (80058e8 <HAL_RCC_OscConfig+0x6c4>)
 8005704:	f023 0304 	bic.w	r3, r3, #4
 8005708:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d015      	beq.n	800573e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005712:	f7fc f9fd 	bl	8001b10 <HAL_GetTick>
 8005716:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005718:	e00a      	b.n	8005730 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800571a:	f7fc f9f9 	bl	8001b10 <HAL_GetTick>
 800571e:	4602      	mov	r2, r0
 8005720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005728:	4293      	cmp	r3, r2
 800572a:	d901      	bls.n	8005730 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800572c:	2303      	movs	r3, #3
 800572e:	e14b      	b.n	80059c8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005730:	4b6d      	ldr	r3, [pc, #436]	@ (80058e8 <HAL_RCC_OscConfig+0x6c4>)
 8005732:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005734:	f003 0302 	and.w	r3, r3, #2
 8005738:	2b00      	cmp	r3, #0
 800573a:	d0ee      	beq.n	800571a <HAL_RCC_OscConfig+0x4f6>
 800573c:	e014      	b.n	8005768 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800573e:	f7fc f9e7 	bl	8001b10 <HAL_GetTick>
 8005742:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005744:	e00a      	b.n	800575c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005746:	f7fc f9e3 	bl	8001b10 <HAL_GetTick>
 800574a:	4602      	mov	r2, r0
 800574c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005754:	4293      	cmp	r3, r2
 8005756:	d901      	bls.n	800575c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	e135      	b.n	80059c8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800575c:	4b62      	ldr	r3, [pc, #392]	@ (80058e8 <HAL_RCC_OscConfig+0x6c4>)
 800575e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005760:	f003 0302 	and.w	r3, r3, #2
 8005764:	2b00      	cmp	r3, #0
 8005766:	d1ee      	bne.n	8005746 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800576c:	2b00      	cmp	r3, #0
 800576e:	f000 812a 	beq.w	80059c6 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005772:	4b5d      	ldr	r3, [pc, #372]	@ (80058e8 <HAL_RCC_OscConfig+0x6c4>)
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800577a:	2b18      	cmp	r3, #24
 800577c:	f000 80ba 	beq.w	80058f4 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005784:	2b02      	cmp	r3, #2
 8005786:	f040 8095 	bne.w	80058b4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800578a:	4b57      	ldr	r3, [pc, #348]	@ (80058e8 <HAL_RCC_OscConfig+0x6c4>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a56      	ldr	r2, [pc, #344]	@ (80058e8 <HAL_RCC_OscConfig+0x6c4>)
 8005790:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005794:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005796:	f7fc f9bb 	bl	8001b10 <HAL_GetTick>
 800579a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800579c:	e008      	b.n	80057b0 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800579e:	f7fc f9b7 	bl	8001b10 <HAL_GetTick>
 80057a2:	4602      	mov	r2, r0
 80057a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d901      	bls.n	80057b0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e10b      	b.n	80059c8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80057b0:	4b4d      	ldr	r3, [pc, #308]	@ (80058e8 <HAL_RCC_OscConfig+0x6c4>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1f0      	bne.n	800579e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057bc:	4b4a      	ldr	r3, [pc, #296]	@ (80058e8 <HAL_RCC_OscConfig+0x6c4>)
 80057be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80057c0:	4b4a      	ldr	r3, [pc, #296]	@ (80058ec <HAL_RCC_OscConfig+0x6c8>)
 80057c2:	4013      	ands	r3, r2
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80057cc:	0112      	lsls	r2, r2, #4
 80057ce:	430a      	orrs	r2, r1
 80057d0:	4945      	ldr	r1, [pc, #276]	@ (80058e8 <HAL_RCC_OscConfig+0x6c4>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	628b      	str	r3, [r1, #40]	@ 0x28
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057da:	3b01      	subs	r3, #1
 80057dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057e4:	3b01      	subs	r3, #1
 80057e6:	025b      	lsls	r3, r3, #9
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	431a      	orrs	r2, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057f0:	3b01      	subs	r3, #1
 80057f2:	041b      	lsls	r3, r3, #16
 80057f4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80057f8:	431a      	orrs	r2, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057fe:	3b01      	subs	r3, #1
 8005800:	061b      	lsls	r3, r3, #24
 8005802:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005806:	4938      	ldr	r1, [pc, #224]	@ (80058e8 <HAL_RCC_OscConfig+0x6c4>)
 8005808:	4313      	orrs	r3, r2
 800580a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800580c:	4b36      	ldr	r3, [pc, #216]	@ (80058e8 <HAL_RCC_OscConfig+0x6c4>)
 800580e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005810:	4a35      	ldr	r2, [pc, #212]	@ (80058e8 <HAL_RCC_OscConfig+0x6c4>)
 8005812:	f023 0301 	bic.w	r3, r3, #1
 8005816:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005818:	4b33      	ldr	r3, [pc, #204]	@ (80058e8 <HAL_RCC_OscConfig+0x6c4>)
 800581a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800581c:	4b34      	ldr	r3, [pc, #208]	@ (80058f0 <HAL_RCC_OscConfig+0x6cc>)
 800581e:	4013      	ands	r3, r2
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005824:	00d2      	lsls	r2, r2, #3
 8005826:	4930      	ldr	r1, [pc, #192]	@ (80058e8 <HAL_RCC_OscConfig+0x6c4>)
 8005828:	4313      	orrs	r3, r2
 800582a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800582c:	4b2e      	ldr	r3, [pc, #184]	@ (80058e8 <HAL_RCC_OscConfig+0x6c4>)
 800582e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005830:	f023 020c 	bic.w	r2, r3, #12
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005838:	492b      	ldr	r1, [pc, #172]	@ (80058e8 <HAL_RCC_OscConfig+0x6c4>)
 800583a:	4313      	orrs	r3, r2
 800583c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800583e:	4b2a      	ldr	r3, [pc, #168]	@ (80058e8 <HAL_RCC_OscConfig+0x6c4>)
 8005840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005842:	f023 0202 	bic.w	r2, r3, #2
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800584a:	4927      	ldr	r1, [pc, #156]	@ (80058e8 <HAL_RCC_OscConfig+0x6c4>)
 800584c:	4313      	orrs	r3, r2
 800584e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005850:	4b25      	ldr	r3, [pc, #148]	@ (80058e8 <HAL_RCC_OscConfig+0x6c4>)
 8005852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005854:	4a24      	ldr	r2, [pc, #144]	@ (80058e8 <HAL_RCC_OscConfig+0x6c4>)
 8005856:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800585a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800585c:	4b22      	ldr	r3, [pc, #136]	@ (80058e8 <HAL_RCC_OscConfig+0x6c4>)
 800585e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005860:	4a21      	ldr	r2, [pc, #132]	@ (80058e8 <HAL_RCC_OscConfig+0x6c4>)
 8005862:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005866:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005868:	4b1f      	ldr	r3, [pc, #124]	@ (80058e8 <HAL_RCC_OscConfig+0x6c4>)
 800586a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800586c:	4a1e      	ldr	r2, [pc, #120]	@ (80058e8 <HAL_RCC_OscConfig+0x6c4>)
 800586e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005872:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005874:	4b1c      	ldr	r3, [pc, #112]	@ (80058e8 <HAL_RCC_OscConfig+0x6c4>)
 8005876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005878:	4a1b      	ldr	r2, [pc, #108]	@ (80058e8 <HAL_RCC_OscConfig+0x6c4>)
 800587a:	f043 0301 	orr.w	r3, r3, #1
 800587e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005880:	4b19      	ldr	r3, [pc, #100]	@ (80058e8 <HAL_RCC_OscConfig+0x6c4>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a18      	ldr	r2, [pc, #96]	@ (80058e8 <HAL_RCC_OscConfig+0x6c4>)
 8005886:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800588a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800588c:	f7fc f940 	bl	8001b10 <HAL_GetTick>
 8005890:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005892:	e008      	b.n	80058a6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005894:	f7fc f93c 	bl	8001b10 <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d901      	bls.n	80058a6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e090      	b.n	80059c8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80058a6:	4b10      	ldr	r3, [pc, #64]	@ (80058e8 <HAL_RCC_OscConfig+0x6c4>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d0f0      	beq.n	8005894 <HAL_RCC_OscConfig+0x670>
 80058b2:	e088      	b.n	80059c6 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058b4:	4b0c      	ldr	r3, [pc, #48]	@ (80058e8 <HAL_RCC_OscConfig+0x6c4>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a0b      	ldr	r2, [pc, #44]	@ (80058e8 <HAL_RCC_OscConfig+0x6c4>)
 80058ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80058be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c0:	f7fc f926 	bl	8001b10 <HAL_GetTick>
 80058c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058c6:	e008      	b.n	80058da <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058c8:	f7fc f922 	bl	8001b10 <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d901      	bls.n	80058da <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e076      	b.n	80059c8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058da:	4b03      	ldr	r3, [pc, #12]	@ (80058e8 <HAL_RCC_OscConfig+0x6c4>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1f0      	bne.n	80058c8 <HAL_RCC_OscConfig+0x6a4>
 80058e6:	e06e      	b.n	80059c6 <HAL_RCC_OscConfig+0x7a2>
 80058e8:	58024400 	.word	0x58024400
 80058ec:	fffffc0c 	.word	0xfffffc0c
 80058f0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80058f4:	4b36      	ldr	r3, [pc, #216]	@ (80059d0 <HAL_RCC_OscConfig+0x7ac>)
 80058f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058f8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80058fa:	4b35      	ldr	r3, [pc, #212]	@ (80059d0 <HAL_RCC_OscConfig+0x7ac>)
 80058fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058fe:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005904:	2b01      	cmp	r3, #1
 8005906:	d031      	beq.n	800596c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	f003 0203 	and.w	r2, r3, #3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005912:	429a      	cmp	r2, r3
 8005914:	d12a      	bne.n	800596c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	091b      	lsrs	r3, r3, #4
 800591a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005922:	429a      	cmp	r2, r3
 8005924:	d122      	bne.n	800596c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005930:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005932:	429a      	cmp	r2, r3
 8005934:	d11a      	bne.n	800596c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	0a5b      	lsrs	r3, r3, #9
 800593a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005942:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005944:	429a      	cmp	r2, r3
 8005946:	d111      	bne.n	800596c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	0c1b      	lsrs	r3, r3, #16
 800594c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005954:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005956:	429a      	cmp	r2, r3
 8005958:	d108      	bne.n	800596c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	0e1b      	lsrs	r3, r3, #24
 800595e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005966:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005968:	429a      	cmp	r2, r3
 800596a:	d001      	beq.n	8005970 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e02b      	b.n	80059c8 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005970:	4b17      	ldr	r3, [pc, #92]	@ (80059d0 <HAL_RCC_OscConfig+0x7ac>)
 8005972:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005974:	08db      	lsrs	r3, r3, #3
 8005976:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800597a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005980:	693a      	ldr	r2, [r7, #16]
 8005982:	429a      	cmp	r2, r3
 8005984:	d01f      	beq.n	80059c6 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005986:	4b12      	ldr	r3, [pc, #72]	@ (80059d0 <HAL_RCC_OscConfig+0x7ac>)
 8005988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800598a:	4a11      	ldr	r2, [pc, #68]	@ (80059d0 <HAL_RCC_OscConfig+0x7ac>)
 800598c:	f023 0301 	bic.w	r3, r3, #1
 8005990:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005992:	f7fc f8bd 	bl	8001b10 <HAL_GetTick>
 8005996:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005998:	bf00      	nop
 800599a:	f7fc f8b9 	bl	8001b10 <HAL_GetTick>
 800599e:	4602      	mov	r2, r0
 80059a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d0f9      	beq.n	800599a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80059a6:	4b0a      	ldr	r3, [pc, #40]	@ (80059d0 <HAL_RCC_OscConfig+0x7ac>)
 80059a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059aa:	4b0a      	ldr	r3, [pc, #40]	@ (80059d4 <HAL_RCC_OscConfig+0x7b0>)
 80059ac:	4013      	ands	r3, r2
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80059b2:	00d2      	lsls	r2, r2, #3
 80059b4:	4906      	ldr	r1, [pc, #24]	@ (80059d0 <HAL_RCC_OscConfig+0x7ac>)
 80059b6:	4313      	orrs	r3, r2
 80059b8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80059ba:	4b05      	ldr	r3, [pc, #20]	@ (80059d0 <HAL_RCC_OscConfig+0x7ac>)
 80059bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059be:	4a04      	ldr	r2, [pc, #16]	@ (80059d0 <HAL_RCC_OscConfig+0x7ac>)
 80059c0:	f043 0301 	orr.w	r3, r3, #1
 80059c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3730      	adds	r7, #48	@ 0x30
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	58024400 	.word	0x58024400
 80059d4:	ffff0007 	.word	0xffff0007

080059d8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b086      	sub	sp, #24
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d101      	bne.n	80059ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e19c      	b.n	8005d26 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80059ec:	4b8a      	ldr	r3, [pc, #552]	@ (8005c18 <HAL_RCC_ClockConfig+0x240>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 030f 	and.w	r3, r3, #15
 80059f4:	683a      	ldr	r2, [r7, #0]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d910      	bls.n	8005a1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059fa:	4b87      	ldr	r3, [pc, #540]	@ (8005c18 <HAL_RCC_ClockConfig+0x240>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f023 020f 	bic.w	r2, r3, #15
 8005a02:	4985      	ldr	r1, [pc, #532]	@ (8005c18 <HAL_RCC_ClockConfig+0x240>)
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a0a:	4b83      	ldr	r3, [pc, #524]	@ (8005c18 <HAL_RCC_ClockConfig+0x240>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 030f 	and.w	r3, r3, #15
 8005a12:	683a      	ldr	r2, [r7, #0]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d001      	beq.n	8005a1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e184      	b.n	8005d26 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0304 	and.w	r3, r3, #4
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d010      	beq.n	8005a4a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	691a      	ldr	r2, [r3, #16]
 8005a2c:	4b7b      	ldr	r3, [pc, #492]	@ (8005c1c <HAL_RCC_ClockConfig+0x244>)
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d908      	bls.n	8005a4a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005a38:	4b78      	ldr	r3, [pc, #480]	@ (8005c1c <HAL_RCC_ClockConfig+0x244>)
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	4975      	ldr	r1, [pc, #468]	@ (8005c1c <HAL_RCC_ClockConfig+0x244>)
 8005a46:	4313      	orrs	r3, r2
 8005a48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0308 	and.w	r3, r3, #8
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d010      	beq.n	8005a78 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	695a      	ldr	r2, [r3, #20]
 8005a5a:	4b70      	ldr	r3, [pc, #448]	@ (8005c1c <HAL_RCC_ClockConfig+0x244>)
 8005a5c:	69db      	ldr	r3, [r3, #28]
 8005a5e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d908      	bls.n	8005a78 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005a66:	4b6d      	ldr	r3, [pc, #436]	@ (8005c1c <HAL_RCC_ClockConfig+0x244>)
 8005a68:	69db      	ldr	r3, [r3, #28]
 8005a6a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	496a      	ldr	r1, [pc, #424]	@ (8005c1c <HAL_RCC_ClockConfig+0x244>)
 8005a74:	4313      	orrs	r3, r2
 8005a76:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0310 	and.w	r3, r3, #16
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d010      	beq.n	8005aa6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	699a      	ldr	r2, [r3, #24]
 8005a88:	4b64      	ldr	r3, [pc, #400]	@ (8005c1c <HAL_RCC_ClockConfig+0x244>)
 8005a8a:	69db      	ldr	r3, [r3, #28]
 8005a8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d908      	bls.n	8005aa6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005a94:	4b61      	ldr	r3, [pc, #388]	@ (8005c1c <HAL_RCC_ClockConfig+0x244>)
 8005a96:	69db      	ldr	r3, [r3, #28]
 8005a98:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	699b      	ldr	r3, [r3, #24]
 8005aa0:	495e      	ldr	r1, [pc, #376]	@ (8005c1c <HAL_RCC_ClockConfig+0x244>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0320 	and.w	r3, r3, #32
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d010      	beq.n	8005ad4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	69da      	ldr	r2, [r3, #28]
 8005ab6:	4b59      	ldr	r3, [pc, #356]	@ (8005c1c <HAL_RCC_ClockConfig+0x244>)
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d908      	bls.n	8005ad4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005ac2:	4b56      	ldr	r3, [pc, #344]	@ (8005c1c <HAL_RCC_ClockConfig+0x244>)
 8005ac4:	6a1b      	ldr	r3, [r3, #32]
 8005ac6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	69db      	ldr	r3, [r3, #28]
 8005ace:	4953      	ldr	r1, [pc, #332]	@ (8005c1c <HAL_RCC_ClockConfig+0x244>)
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0302 	and.w	r3, r3, #2
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d010      	beq.n	8005b02 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	68da      	ldr	r2, [r3, #12]
 8005ae4:	4b4d      	ldr	r3, [pc, #308]	@ (8005c1c <HAL_RCC_ClockConfig+0x244>)
 8005ae6:	699b      	ldr	r3, [r3, #24]
 8005ae8:	f003 030f 	and.w	r3, r3, #15
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d908      	bls.n	8005b02 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005af0:	4b4a      	ldr	r3, [pc, #296]	@ (8005c1c <HAL_RCC_ClockConfig+0x244>)
 8005af2:	699b      	ldr	r3, [r3, #24]
 8005af4:	f023 020f 	bic.w	r2, r3, #15
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	4947      	ldr	r1, [pc, #284]	@ (8005c1c <HAL_RCC_ClockConfig+0x244>)
 8005afe:	4313      	orrs	r3, r2
 8005b00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0301 	and.w	r3, r3, #1
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d055      	beq.n	8005bba <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005b0e:	4b43      	ldr	r3, [pc, #268]	@ (8005c1c <HAL_RCC_ClockConfig+0x244>)
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	4940      	ldr	r1, [pc, #256]	@ (8005c1c <HAL_RCC_ClockConfig+0x244>)
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	d107      	bne.n	8005b38 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b28:	4b3c      	ldr	r3, [pc, #240]	@ (8005c1c <HAL_RCC_ClockConfig+0x244>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d121      	bne.n	8005b78 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e0f6      	b.n	8005d26 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	2b03      	cmp	r3, #3
 8005b3e:	d107      	bne.n	8005b50 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005b40:	4b36      	ldr	r3, [pc, #216]	@ (8005c1c <HAL_RCC_ClockConfig+0x244>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d115      	bne.n	8005b78 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e0ea      	b.n	8005d26 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d107      	bne.n	8005b68 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005b58:	4b30      	ldr	r3, [pc, #192]	@ (8005c1c <HAL_RCC_ClockConfig+0x244>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d109      	bne.n	8005b78 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e0de      	b.n	8005d26 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b68:	4b2c      	ldr	r3, [pc, #176]	@ (8005c1c <HAL_RCC_ClockConfig+0x244>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0304 	and.w	r3, r3, #4
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d101      	bne.n	8005b78 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	e0d6      	b.n	8005d26 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b78:	4b28      	ldr	r3, [pc, #160]	@ (8005c1c <HAL_RCC_ClockConfig+0x244>)
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	f023 0207 	bic.w	r2, r3, #7
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	4925      	ldr	r1, [pc, #148]	@ (8005c1c <HAL_RCC_ClockConfig+0x244>)
 8005b86:	4313      	orrs	r3, r2
 8005b88:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b8a:	f7fb ffc1 	bl	8001b10 <HAL_GetTick>
 8005b8e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b90:	e00a      	b.n	8005ba8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b92:	f7fb ffbd 	bl	8001b10 <HAL_GetTick>
 8005b96:	4602      	mov	r2, r0
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	1ad3      	subs	r3, r2, r3
 8005b9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d901      	bls.n	8005ba8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e0be      	b.n	8005d26 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ba8:	4b1c      	ldr	r3, [pc, #112]	@ (8005c1c <HAL_RCC_ClockConfig+0x244>)
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	00db      	lsls	r3, r3, #3
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d1eb      	bne.n	8005b92 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 0302 	and.w	r3, r3, #2
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d010      	beq.n	8005be8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	68da      	ldr	r2, [r3, #12]
 8005bca:	4b14      	ldr	r3, [pc, #80]	@ (8005c1c <HAL_RCC_ClockConfig+0x244>)
 8005bcc:	699b      	ldr	r3, [r3, #24]
 8005bce:	f003 030f 	and.w	r3, r3, #15
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d208      	bcs.n	8005be8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bd6:	4b11      	ldr	r3, [pc, #68]	@ (8005c1c <HAL_RCC_ClockConfig+0x244>)
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	f023 020f 	bic.w	r2, r3, #15
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	490e      	ldr	r1, [pc, #56]	@ (8005c1c <HAL_RCC_ClockConfig+0x244>)
 8005be4:	4313      	orrs	r3, r2
 8005be6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005be8:	4b0b      	ldr	r3, [pc, #44]	@ (8005c18 <HAL_RCC_ClockConfig+0x240>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 030f 	and.w	r3, r3, #15
 8005bf0:	683a      	ldr	r2, [r7, #0]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d214      	bcs.n	8005c20 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bf6:	4b08      	ldr	r3, [pc, #32]	@ (8005c18 <HAL_RCC_ClockConfig+0x240>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f023 020f 	bic.w	r2, r3, #15
 8005bfe:	4906      	ldr	r1, [pc, #24]	@ (8005c18 <HAL_RCC_ClockConfig+0x240>)
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c06:	4b04      	ldr	r3, [pc, #16]	@ (8005c18 <HAL_RCC_ClockConfig+0x240>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 030f 	and.w	r3, r3, #15
 8005c0e:	683a      	ldr	r2, [r7, #0]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d005      	beq.n	8005c20 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e086      	b.n	8005d26 <HAL_RCC_ClockConfig+0x34e>
 8005c18:	52002000 	.word	0x52002000
 8005c1c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0304 	and.w	r3, r3, #4
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d010      	beq.n	8005c4e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	691a      	ldr	r2, [r3, #16]
 8005c30:	4b3f      	ldr	r3, [pc, #252]	@ (8005d30 <HAL_RCC_ClockConfig+0x358>)
 8005c32:	699b      	ldr	r3, [r3, #24]
 8005c34:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d208      	bcs.n	8005c4e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005c3c:	4b3c      	ldr	r3, [pc, #240]	@ (8005d30 <HAL_RCC_ClockConfig+0x358>)
 8005c3e:	699b      	ldr	r3, [r3, #24]
 8005c40:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	4939      	ldr	r1, [pc, #228]	@ (8005d30 <HAL_RCC_ClockConfig+0x358>)
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0308 	and.w	r3, r3, #8
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d010      	beq.n	8005c7c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	695a      	ldr	r2, [r3, #20]
 8005c5e:	4b34      	ldr	r3, [pc, #208]	@ (8005d30 <HAL_RCC_ClockConfig+0x358>)
 8005c60:	69db      	ldr	r3, [r3, #28]
 8005c62:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d208      	bcs.n	8005c7c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005c6a:	4b31      	ldr	r3, [pc, #196]	@ (8005d30 <HAL_RCC_ClockConfig+0x358>)
 8005c6c:	69db      	ldr	r3, [r3, #28]
 8005c6e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	492e      	ldr	r1, [pc, #184]	@ (8005d30 <HAL_RCC_ClockConfig+0x358>)
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 0310 	and.w	r3, r3, #16
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d010      	beq.n	8005caa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	699a      	ldr	r2, [r3, #24]
 8005c8c:	4b28      	ldr	r3, [pc, #160]	@ (8005d30 <HAL_RCC_ClockConfig+0x358>)
 8005c8e:	69db      	ldr	r3, [r3, #28]
 8005c90:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d208      	bcs.n	8005caa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005c98:	4b25      	ldr	r3, [pc, #148]	@ (8005d30 <HAL_RCC_ClockConfig+0x358>)
 8005c9a:	69db      	ldr	r3, [r3, #28]
 8005c9c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	699b      	ldr	r3, [r3, #24]
 8005ca4:	4922      	ldr	r1, [pc, #136]	@ (8005d30 <HAL_RCC_ClockConfig+0x358>)
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0320 	and.w	r3, r3, #32
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d010      	beq.n	8005cd8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	69da      	ldr	r2, [r3, #28]
 8005cba:	4b1d      	ldr	r3, [pc, #116]	@ (8005d30 <HAL_RCC_ClockConfig+0x358>)
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d208      	bcs.n	8005cd8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005cc6:	4b1a      	ldr	r3, [pc, #104]	@ (8005d30 <HAL_RCC_ClockConfig+0x358>)
 8005cc8:	6a1b      	ldr	r3, [r3, #32]
 8005cca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	69db      	ldr	r3, [r3, #28]
 8005cd2:	4917      	ldr	r1, [pc, #92]	@ (8005d30 <HAL_RCC_ClockConfig+0x358>)
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005cd8:	f000 f834 	bl	8005d44 <HAL_RCC_GetSysClockFreq>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	4b14      	ldr	r3, [pc, #80]	@ (8005d30 <HAL_RCC_ClockConfig+0x358>)
 8005ce0:	699b      	ldr	r3, [r3, #24]
 8005ce2:	0a1b      	lsrs	r3, r3, #8
 8005ce4:	f003 030f 	and.w	r3, r3, #15
 8005ce8:	4912      	ldr	r1, [pc, #72]	@ (8005d34 <HAL_RCC_ClockConfig+0x35c>)
 8005cea:	5ccb      	ldrb	r3, [r1, r3]
 8005cec:	f003 031f 	and.w	r3, r3, #31
 8005cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8005cf4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8005d30 <HAL_RCC_ClockConfig+0x358>)
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	f003 030f 	and.w	r3, r3, #15
 8005cfe:	4a0d      	ldr	r2, [pc, #52]	@ (8005d34 <HAL_RCC_ClockConfig+0x35c>)
 8005d00:	5cd3      	ldrb	r3, [r2, r3]
 8005d02:	f003 031f 	and.w	r3, r3, #31
 8005d06:	693a      	ldr	r2, [r7, #16]
 8005d08:	fa22 f303 	lsr.w	r3, r2, r3
 8005d0c:	4a0a      	ldr	r2, [pc, #40]	@ (8005d38 <HAL_RCC_ClockConfig+0x360>)
 8005d0e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005d10:	4a0a      	ldr	r2, [pc, #40]	@ (8005d3c <HAL_RCC_ClockConfig+0x364>)
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005d16:	4b0a      	ldr	r3, [pc, #40]	@ (8005d40 <HAL_RCC_ClockConfig+0x368>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f7fb f98a 	bl	8001034 <HAL_InitTick>
 8005d20:	4603      	mov	r3, r0
 8005d22:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3718      	adds	r7, #24
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	58024400 	.word	0x58024400
 8005d34:	0800becc 	.word	0x0800becc
 8005d38:	24000004 	.word	0x24000004
 8005d3c:	24000000 	.word	0x24000000
 8005d40:	24000008 	.word	0x24000008

08005d44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b089      	sub	sp, #36	@ 0x24
 8005d48:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d4a:	4bb3      	ldr	r3, [pc, #716]	@ (8006018 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d52:	2b18      	cmp	r3, #24
 8005d54:	f200 8155 	bhi.w	8006002 <HAL_RCC_GetSysClockFreq+0x2be>
 8005d58:	a201      	add	r2, pc, #4	@ (adr r2, 8005d60 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d5e:	bf00      	nop
 8005d60:	08005dc5 	.word	0x08005dc5
 8005d64:	08006003 	.word	0x08006003
 8005d68:	08006003 	.word	0x08006003
 8005d6c:	08006003 	.word	0x08006003
 8005d70:	08006003 	.word	0x08006003
 8005d74:	08006003 	.word	0x08006003
 8005d78:	08006003 	.word	0x08006003
 8005d7c:	08006003 	.word	0x08006003
 8005d80:	08005deb 	.word	0x08005deb
 8005d84:	08006003 	.word	0x08006003
 8005d88:	08006003 	.word	0x08006003
 8005d8c:	08006003 	.word	0x08006003
 8005d90:	08006003 	.word	0x08006003
 8005d94:	08006003 	.word	0x08006003
 8005d98:	08006003 	.word	0x08006003
 8005d9c:	08006003 	.word	0x08006003
 8005da0:	08005df1 	.word	0x08005df1
 8005da4:	08006003 	.word	0x08006003
 8005da8:	08006003 	.word	0x08006003
 8005dac:	08006003 	.word	0x08006003
 8005db0:	08006003 	.word	0x08006003
 8005db4:	08006003 	.word	0x08006003
 8005db8:	08006003 	.word	0x08006003
 8005dbc:	08006003 	.word	0x08006003
 8005dc0:	08005df7 	.word	0x08005df7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005dc4:	4b94      	ldr	r3, [pc, #592]	@ (8006018 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0320 	and.w	r3, r3, #32
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d009      	beq.n	8005de4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005dd0:	4b91      	ldr	r3, [pc, #580]	@ (8006018 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	08db      	lsrs	r3, r3, #3
 8005dd6:	f003 0303 	and.w	r3, r3, #3
 8005dda:	4a90      	ldr	r2, [pc, #576]	@ (800601c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8005de0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005de2:	e111      	b.n	8006008 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005de4:	4b8d      	ldr	r3, [pc, #564]	@ (800601c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005de6:	61bb      	str	r3, [r7, #24]
      break;
 8005de8:	e10e      	b.n	8006008 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005dea:	4b8d      	ldr	r3, [pc, #564]	@ (8006020 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005dec:	61bb      	str	r3, [r7, #24]
      break;
 8005dee:	e10b      	b.n	8006008 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005df0:	4b8c      	ldr	r3, [pc, #560]	@ (8006024 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005df2:	61bb      	str	r3, [r7, #24]
      break;
 8005df4:	e108      	b.n	8006008 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005df6:	4b88      	ldr	r3, [pc, #544]	@ (8006018 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dfa:	f003 0303 	and.w	r3, r3, #3
 8005dfe:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005e00:	4b85      	ldr	r3, [pc, #532]	@ (8006018 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e04:	091b      	lsrs	r3, r3, #4
 8005e06:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e0a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005e0c:	4b82      	ldr	r3, [pc, #520]	@ (8006018 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e10:	f003 0301 	and.w	r3, r3, #1
 8005e14:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005e16:	4b80      	ldr	r3, [pc, #512]	@ (8006018 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e1a:	08db      	lsrs	r3, r3, #3
 8005e1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	fb02 f303 	mul.w	r3, r2, r3
 8005e26:	ee07 3a90 	vmov	s15, r3
 8005e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e2e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	f000 80e1 	beq.w	8005ffc <HAL_RCC_GetSysClockFreq+0x2b8>
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	f000 8083 	beq.w	8005f48 <HAL_RCC_GetSysClockFreq+0x204>
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	f200 80a1 	bhi.w	8005f8c <HAL_RCC_GetSysClockFreq+0x248>
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d003      	beq.n	8005e58 <HAL_RCC_GetSysClockFreq+0x114>
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d056      	beq.n	8005f04 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005e56:	e099      	b.n	8005f8c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e58:	4b6f      	ldr	r3, [pc, #444]	@ (8006018 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0320 	and.w	r3, r3, #32
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d02d      	beq.n	8005ec0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e64:	4b6c      	ldr	r3, [pc, #432]	@ (8006018 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	08db      	lsrs	r3, r3, #3
 8005e6a:	f003 0303 	and.w	r3, r3, #3
 8005e6e:	4a6b      	ldr	r2, [pc, #428]	@ (800601c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e70:	fa22 f303 	lsr.w	r3, r2, r3
 8005e74:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	ee07 3a90 	vmov	s15, r3
 8005e7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	ee07 3a90 	vmov	s15, r3
 8005e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e8e:	4b62      	ldr	r3, [pc, #392]	@ (8006018 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e96:	ee07 3a90 	vmov	s15, r3
 8005e9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ea2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006028 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005eb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eba:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005ebe:	e087      	b.n	8005fd0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	ee07 3a90 	vmov	s15, r3
 8005ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eca:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800602c <HAL_RCC_GetSysClockFreq+0x2e8>
 8005ece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ed2:	4b51      	ldr	r3, [pc, #324]	@ (8006018 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eda:	ee07 3a90 	vmov	s15, r3
 8005ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ee2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ee6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006028 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005eea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ef2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005efe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005f02:	e065      	b.n	8005fd0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	ee07 3a90 	vmov	s15, r3
 8005f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f0e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006030 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005f12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f16:	4b40      	ldr	r3, [pc, #256]	@ (8006018 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f1e:	ee07 3a90 	vmov	s15, r3
 8005f22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f26:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f2a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006028 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005f46:	e043      	b.n	8005fd0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	ee07 3a90 	vmov	s15, r3
 8005f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f52:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006034 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005f56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f5a:	4b2f      	ldr	r3, [pc, #188]	@ (8006018 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f62:	ee07 3a90 	vmov	s15, r3
 8005f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f6e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006028 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005f8a:	e021      	b.n	8005fd0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	ee07 3a90 	vmov	s15, r3
 8005f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f96:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006030 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f9e:	4b1e      	ldr	r3, [pc, #120]	@ (8006018 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fa6:	ee07 3a90 	vmov	s15, r3
 8005faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fae:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fb2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006028 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005fce:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005fd0:	4b11      	ldr	r3, [pc, #68]	@ (8006018 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fd4:	0a5b      	lsrs	r3, r3, #9
 8005fd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fda:	3301      	adds	r3, #1
 8005fdc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	ee07 3a90 	vmov	s15, r3
 8005fe4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005fe8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ff0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ff4:	ee17 3a90 	vmov	r3, s15
 8005ff8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005ffa:	e005      	b.n	8006008 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	61bb      	str	r3, [r7, #24]
      break;
 8006000:	e002      	b.n	8006008 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006002:	4b07      	ldr	r3, [pc, #28]	@ (8006020 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006004:	61bb      	str	r3, [r7, #24]
      break;
 8006006:	bf00      	nop
  }

  return sysclockfreq;
 8006008:	69bb      	ldr	r3, [r7, #24]
}
 800600a:	4618      	mov	r0, r3
 800600c:	3724      	adds	r7, #36	@ 0x24
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	58024400 	.word	0x58024400
 800601c:	03d09000 	.word	0x03d09000
 8006020:	003d0900 	.word	0x003d0900
 8006024:	007a1200 	.word	0x007a1200
 8006028:	46000000 	.word	0x46000000
 800602c:	4c742400 	.word	0x4c742400
 8006030:	4a742400 	.word	0x4a742400
 8006034:	4af42400 	.word	0x4af42400

08006038 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800603e:	f7ff fe81 	bl	8005d44 <HAL_RCC_GetSysClockFreq>
 8006042:	4602      	mov	r2, r0
 8006044:	4b10      	ldr	r3, [pc, #64]	@ (8006088 <HAL_RCC_GetHCLKFreq+0x50>)
 8006046:	699b      	ldr	r3, [r3, #24]
 8006048:	0a1b      	lsrs	r3, r3, #8
 800604a:	f003 030f 	and.w	r3, r3, #15
 800604e:	490f      	ldr	r1, [pc, #60]	@ (800608c <HAL_RCC_GetHCLKFreq+0x54>)
 8006050:	5ccb      	ldrb	r3, [r1, r3]
 8006052:	f003 031f 	and.w	r3, r3, #31
 8006056:	fa22 f303 	lsr.w	r3, r2, r3
 800605a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800605c:	4b0a      	ldr	r3, [pc, #40]	@ (8006088 <HAL_RCC_GetHCLKFreq+0x50>)
 800605e:	699b      	ldr	r3, [r3, #24]
 8006060:	f003 030f 	and.w	r3, r3, #15
 8006064:	4a09      	ldr	r2, [pc, #36]	@ (800608c <HAL_RCC_GetHCLKFreq+0x54>)
 8006066:	5cd3      	ldrb	r3, [r2, r3]
 8006068:	f003 031f 	and.w	r3, r3, #31
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	fa22 f303 	lsr.w	r3, r2, r3
 8006072:	4a07      	ldr	r2, [pc, #28]	@ (8006090 <HAL_RCC_GetHCLKFreq+0x58>)
 8006074:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006076:	4a07      	ldr	r2, [pc, #28]	@ (8006094 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800607c:	4b04      	ldr	r3, [pc, #16]	@ (8006090 <HAL_RCC_GetHCLKFreq+0x58>)
 800607e:	681b      	ldr	r3, [r3, #0]
}
 8006080:	4618      	mov	r0, r3
 8006082:	3708      	adds	r7, #8
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	58024400 	.word	0x58024400
 800608c:	0800becc 	.word	0x0800becc
 8006090:	24000004 	.word	0x24000004
 8006094:	24000000 	.word	0x24000000

08006098 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800609c:	f7ff ffcc 	bl	8006038 <HAL_RCC_GetHCLKFreq>
 80060a0:	4602      	mov	r2, r0
 80060a2:	4b06      	ldr	r3, [pc, #24]	@ (80060bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80060a4:	69db      	ldr	r3, [r3, #28]
 80060a6:	091b      	lsrs	r3, r3, #4
 80060a8:	f003 0307 	and.w	r3, r3, #7
 80060ac:	4904      	ldr	r1, [pc, #16]	@ (80060c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80060ae:	5ccb      	ldrb	r3, [r1, r3]
 80060b0:	f003 031f 	and.w	r3, r3, #31
 80060b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	58024400 	.word	0x58024400
 80060c0:	0800becc 	.word	0x0800becc

080060c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80060c8:	f7ff ffb6 	bl	8006038 <HAL_RCC_GetHCLKFreq>
 80060cc:	4602      	mov	r2, r0
 80060ce:	4b06      	ldr	r3, [pc, #24]	@ (80060e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80060d0:	69db      	ldr	r3, [r3, #28]
 80060d2:	0a1b      	lsrs	r3, r3, #8
 80060d4:	f003 0307 	and.w	r3, r3, #7
 80060d8:	4904      	ldr	r1, [pc, #16]	@ (80060ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80060da:	5ccb      	ldrb	r3, [r1, r3]
 80060dc:	f003 031f 	and.w	r3, r3, #31
 80060e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	58024400 	.word	0x58024400
 80060ec:	0800becc 	.word	0x0800becc

080060f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	223f      	movs	r2, #63	@ 0x3f
 80060fe:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006100:	4b1a      	ldr	r3, [pc, #104]	@ (800616c <HAL_RCC_GetClockConfig+0x7c>)
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	f003 0207 	and.w	r2, r3, #7
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800610c:	4b17      	ldr	r3, [pc, #92]	@ (800616c <HAL_RCC_GetClockConfig+0x7c>)
 800610e:	699b      	ldr	r3, [r3, #24]
 8006110:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006118:	4b14      	ldr	r3, [pc, #80]	@ (800616c <HAL_RCC_GetClockConfig+0x7c>)
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	f003 020f 	and.w	r2, r3, #15
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006124:	4b11      	ldr	r3, [pc, #68]	@ (800616c <HAL_RCC_GetClockConfig+0x7c>)
 8006126:	699b      	ldr	r3, [r3, #24]
 8006128:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006130:	4b0e      	ldr	r3, [pc, #56]	@ (800616c <HAL_RCC_GetClockConfig+0x7c>)
 8006132:	69db      	ldr	r3, [r3, #28]
 8006134:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800613c:	4b0b      	ldr	r3, [pc, #44]	@ (800616c <HAL_RCC_GetClockConfig+0x7c>)
 800613e:	69db      	ldr	r3, [r3, #28]
 8006140:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006148:	4b08      	ldr	r3, [pc, #32]	@ (800616c <HAL_RCC_GetClockConfig+0x7c>)
 800614a:	6a1b      	ldr	r3, [r3, #32]
 800614c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006154:	4b06      	ldr	r3, [pc, #24]	@ (8006170 <HAL_RCC_GetClockConfig+0x80>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 020f 	and.w	r2, r3, #15
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	601a      	str	r2, [r3, #0]
}
 8006160:	bf00      	nop
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr
 800616c:	58024400 	.word	0x58024400
 8006170:	52002000 	.word	0x52002000

08006174 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006174:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006178:	b0c6      	sub	sp, #280	@ 0x118
 800617a:	af00      	add	r7, sp, #0
 800617c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006180:	2300      	movs	r3, #0
 8006182:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006186:	2300      	movs	r3, #0
 8006188:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800618c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006194:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006198:	2500      	movs	r5, #0
 800619a:	ea54 0305 	orrs.w	r3, r4, r5
 800619e:	d049      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80061a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061a6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80061aa:	d02f      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80061ac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80061b0:	d828      	bhi.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80061b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80061b6:	d01a      	beq.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80061b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80061bc:	d822      	bhi.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d003      	beq.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x56>
 80061c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061c6:	d007      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80061c8:	e01c      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061ca:	4bab      	ldr	r3, [pc, #684]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80061cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ce:	4aaa      	ldr	r2, [pc, #680]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80061d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80061d6:	e01a      	b.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80061d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061dc:	3308      	adds	r3, #8
 80061de:	2102      	movs	r1, #2
 80061e0:	4618      	mov	r0, r3
 80061e2:	f001 fc25 	bl	8007a30 <RCCEx_PLL2_Config>
 80061e6:	4603      	mov	r3, r0
 80061e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80061ec:	e00f      	b.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80061ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061f2:	3328      	adds	r3, #40	@ 0x28
 80061f4:	2102      	movs	r1, #2
 80061f6:	4618      	mov	r0, r3
 80061f8:	f001 fccc 	bl	8007b94 <RCCEx_PLL3_Config>
 80061fc:	4603      	mov	r3, r0
 80061fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006202:	e004      	b.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800620a:	e000      	b.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800620c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800620e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006212:	2b00      	cmp	r3, #0
 8006214:	d10a      	bne.n	800622c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006216:	4b98      	ldr	r3, [pc, #608]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006218:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800621a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800621e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006222:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006224:	4a94      	ldr	r2, [pc, #592]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006226:	430b      	orrs	r3, r1
 8006228:	6513      	str	r3, [r2, #80]	@ 0x50
 800622a:	e003      	b.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800622c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006230:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006234:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006240:	f04f 0900 	mov.w	r9, #0
 8006244:	ea58 0309 	orrs.w	r3, r8, r9
 8006248:	d047      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800624a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800624e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006250:	2b04      	cmp	r3, #4
 8006252:	d82a      	bhi.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006254:	a201      	add	r2, pc, #4	@ (adr r2, 800625c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800625a:	bf00      	nop
 800625c:	08006271 	.word	0x08006271
 8006260:	0800627f 	.word	0x0800627f
 8006264:	08006295 	.word	0x08006295
 8006268:	080062b3 	.word	0x080062b3
 800626c:	080062b3 	.word	0x080062b3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006270:	4b81      	ldr	r3, [pc, #516]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006274:	4a80      	ldr	r2, [pc, #512]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006276:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800627a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800627c:	e01a      	b.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800627e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006282:	3308      	adds	r3, #8
 8006284:	2100      	movs	r1, #0
 8006286:	4618      	mov	r0, r3
 8006288:	f001 fbd2 	bl	8007a30 <RCCEx_PLL2_Config>
 800628c:	4603      	mov	r3, r0
 800628e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006292:	e00f      	b.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006294:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006298:	3328      	adds	r3, #40	@ 0x28
 800629a:	2100      	movs	r1, #0
 800629c:	4618      	mov	r0, r3
 800629e:	f001 fc79 	bl	8007b94 <RCCEx_PLL3_Config>
 80062a2:	4603      	mov	r3, r0
 80062a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80062a8:	e004      	b.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80062b0:	e000      	b.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80062b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d10a      	bne.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80062bc:	4b6e      	ldr	r3, [pc, #440]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80062be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062c0:	f023 0107 	bic.w	r1, r3, #7
 80062c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062ca:	4a6b      	ldr	r2, [pc, #428]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80062cc:	430b      	orrs	r3, r1
 80062ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80062d0:	e003      	b.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062d6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80062da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e2:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80062e6:	f04f 0b00 	mov.w	fp, #0
 80062ea:	ea5a 030b 	orrs.w	r3, sl, fp
 80062ee:	d05b      	beq.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80062f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80062f8:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80062fc:	d03b      	beq.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80062fe:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006302:	d834      	bhi.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006304:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006308:	d037      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800630a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800630e:	d82e      	bhi.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006310:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006314:	d033      	beq.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006316:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800631a:	d828      	bhi.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800631c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006320:	d01a      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8006322:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006326:	d822      	bhi.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006328:	2b00      	cmp	r3, #0
 800632a:	d003      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800632c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006330:	d007      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8006332:	e01c      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006334:	4b50      	ldr	r3, [pc, #320]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006338:	4a4f      	ldr	r2, [pc, #316]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800633a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800633e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006340:	e01e      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006342:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006346:	3308      	adds	r3, #8
 8006348:	2100      	movs	r1, #0
 800634a:	4618      	mov	r0, r3
 800634c:	f001 fb70 	bl	8007a30 <RCCEx_PLL2_Config>
 8006350:	4603      	mov	r3, r0
 8006352:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006356:	e013      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006358:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800635c:	3328      	adds	r3, #40	@ 0x28
 800635e:	2100      	movs	r1, #0
 8006360:	4618      	mov	r0, r3
 8006362:	f001 fc17 	bl	8007b94 <RCCEx_PLL3_Config>
 8006366:	4603      	mov	r3, r0
 8006368:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800636c:	e008      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006374:	e004      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006376:	bf00      	nop
 8006378:	e002      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800637a:	bf00      	nop
 800637c:	e000      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800637e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006380:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006384:	2b00      	cmp	r3, #0
 8006386:	d10b      	bne.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006388:	4b3b      	ldr	r3, [pc, #236]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800638a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800638c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006390:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006394:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006398:	4a37      	ldr	r2, [pc, #220]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800639a:	430b      	orrs	r3, r1
 800639c:	6593      	str	r3, [r2, #88]	@ 0x58
 800639e:	e003      	b.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80063a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b0:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80063b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80063b8:	2300      	movs	r3, #0
 80063ba:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80063be:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80063c2:	460b      	mov	r3, r1
 80063c4:	4313      	orrs	r3, r2
 80063c6:	d05d      	beq.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80063c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063cc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80063d0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80063d4:	d03b      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80063d6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80063da:	d834      	bhi.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80063dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80063e0:	d037      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80063e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80063e6:	d82e      	bhi.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80063e8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80063ec:	d033      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80063ee:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80063f2:	d828      	bhi.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80063f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80063f8:	d01a      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80063fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80063fe:	d822      	bhi.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006400:	2b00      	cmp	r3, #0
 8006402:	d003      	beq.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006404:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006408:	d007      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800640a:	e01c      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800640c:	4b1a      	ldr	r3, [pc, #104]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800640e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006410:	4a19      	ldr	r2, [pc, #100]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006412:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006416:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006418:	e01e      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800641a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800641e:	3308      	adds	r3, #8
 8006420:	2100      	movs	r1, #0
 8006422:	4618      	mov	r0, r3
 8006424:	f001 fb04 	bl	8007a30 <RCCEx_PLL2_Config>
 8006428:	4603      	mov	r3, r0
 800642a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800642e:	e013      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006430:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006434:	3328      	adds	r3, #40	@ 0x28
 8006436:	2100      	movs	r1, #0
 8006438:	4618      	mov	r0, r3
 800643a:	f001 fbab 	bl	8007b94 <RCCEx_PLL3_Config>
 800643e:	4603      	mov	r3, r0
 8006440:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006444:	e008      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800644c:	e004      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800644e:	bf00      	nop
 8006450:	e002      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006452:	bf00      	nop
 8006454:	e000      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006456:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006458:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800645c:	2b00      	cmp	r3, #0
 800645e:	d10d      	bne.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006460:	4b05      	ldr	r3, [pc, #20]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006464:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006468:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800646c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006470:	4a01      	ldr	r2, [pc, #4]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006472:	430b      	orrs	r3, r1
 8006474:	6593      	str	r3, [r2, #88]	@ 0x58
 8006476:	e005      	b.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006478:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800647c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006480:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006484:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006490:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006494:	2300      	movs	r3, #0
 8006496:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800649a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800649e:	460b      	mov	r3, r1
 80064a0:	4313      	orrs	r3, r2
 80064a2:	d03a      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80064a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064aa:	2b30      	cmp	r3, #48	@ 0x30
 80064ac:	d01f      	beq.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80064ae:	2b30      	cmp	r3, #48	@ 0x30
 80064b0:	d819      	bhi.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80064b2:	2b20      	cmp	r3, #32
 80064b4:	d00c      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80064b6:	2b20      	cmp	r3, #32
 80064b8:	d815      	bhi.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d019      	beq.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80064be:	2b10      	cmp	r3, #16
 80064c0:	d111      	bne.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064c2:	4baa      	ldr	r3, [pc, #680]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80064c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064c6:	4aa9      	ldr	r2, [pc, #676]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80064c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80064ce:	e011      	b.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80064d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064d4:	3308      	adds	r3, #8
 80064d6:	2102      	movs	r1, #2
 80064d8:	4618      	mov	r0, r3
 80064da:	f001 faa9 	bl	8007a30 <RCCEx_PLL2_Config>
 80064de:	4603      	mov	r3, r0
 80064e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80064e4:	e006      	b.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80064ec:	e002      	b.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80064ee:	bf00      	nop
 80064f0:	e000      	b.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80064f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d10a      	bne.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80064fc:	4b9b      	ldr	r3, [pc, #620]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80064fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006500:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006504:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006508:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800650a:	4a98      	ldr	r2, [pc, #608]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800650c:	430b      	orrs	r3, r1
 800650e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006510:	e003      	b.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006512:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006516:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800651a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800651e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006522:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006526:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800652a:	2300      	movs	r3, #0
 800652c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006530:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006534:	460b      	mov	r3, r1
 8006536:	4313      	orrs	r3, r2
 8006538:	d051      	beq.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800653a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800653e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006540:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006544:	d035      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8006546:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800654a:	d82e      	bhi.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x436>
 800654c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006550:	d031      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8006552:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006556:	d828      	bhi.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006558:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800655c:	d01a      	beq.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800655e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006562:	d822      	bhi.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006564:	2b00      	cmp	r3, #0
 8006566:	d003      	beq.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8006568:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800656c:	d007      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800656e:	e01c      	b.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006570:	4b7e      	ldr	r3, [pc, #504]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006574:	4a7d      	ldr	r2, [pc, #500]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006576:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800657a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800657c:	e01c      	b.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800657e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006582:	3308      	adds	r3, #8
 8006584:	2100      	movs	r1, #0
 8006586:	4618      	mov	r0, r3
 8006588:	f001 fa52 	bl	8007a30 <RCCEx_PLL2_Config>
 800658c:	4603      	mov	r3, r0
 800658e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006592:	e011      	b.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006594:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006598:	3328      	adds	r3, #40	@ 0x28
 800659a:	2100      	movs	r1, #0
 800659c:	4618      	mov	r0, r3
 800659e:	f001 faf9 	bl	8007b94 <RCCEx_PLL3_Config>
 80065a2:	4603      	mov	r3, r0
 80065a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80065a8:	e006      	b.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80065b0:	e002      	b.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80065b2:	bf00      	nop
 80065b4:	e000      	b.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80065b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d10a      	bne.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80065c0:	4b6a      	ldr	r3, [pc, #424]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80065c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065c4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80065c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065ce:	4a67      	ldr	r2, [pc, #412]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80065d0:	430b      	orrs	r3, r1
 80065d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80065d4:	e003      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065da:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80065de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80065ea:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80065ee:	2300      	movs	r3, #0
 80065f0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80065f4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80065f8:	460b      	mov	r3, r1
 80065fa:	4313      	orrs	r3, r2
 80065fc:	d053      	beq.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80065fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006602:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006604:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006608:	d033      	beq.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800660a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800660e:	d82c      	bhi.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006610:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006614:	d02f      	beq.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8006616:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800661a:	d826      	bhi.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800661c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006620:	d02b      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006622:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006626:	d820      	bhi.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006628:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800662c:	d012      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800662e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006632:	d81a      	bhi.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006634:	2b00      	cmp	r3, #0
 8006636:	d022      	beq.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8006638:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800663c:	d115      	bne.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800663e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006642:	3308      	adds	r3, #8
 8006644:	2101      	movs	r1, #1
 8006646:	4618      	mov	r0, r3
 8006648:	f001 f9f2 	bl	8007a30 <RCCEx_PLL2_Config>
 800664c:	4603      	mov	r3, r0
 800664e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006652:	e015      	b.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006654:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006658:	3328      	adds	r3, #40	@ 0x28
 800665a:	2101      	movs	r1, #1
 800665c:	4618      	mov	r0, r3
 800665e:	f001 fa99 	bl	8007b94 <RCCEx_PLL3_Config>
 8006662:	4603      	mov	r3, r0
 8006664:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006668:	e00a      	b.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006670:	e006      	b.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006672:	bf00      	nop
 8006674:	e004      	b.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006676:	bf00      	nop
 8006678:	e002      	b.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800667a:	bf00      	nop
 800667c:	e000      	b.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800667e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006680:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006684:	2b00      	cmp	r3, #0
 8006686:	d10a      	bne.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006688:	4b38      	ldr	r3, [pc, #224]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800668a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800668c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006690:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006694:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006696:	4a35      	ldr	r2, [pc, #212]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006698:	430b      	orrs	r3, r1
 800669a:	6513      	str	r3, [r2, #80]	@ 0x50
 800669c:	e003      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800669e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066a2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80066a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ae:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80066b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80066b6:	2300      	movs	r3, #0
 80066b8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80066bc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80066c0:	460b      	mov	r3, r1
 80066c2:	4313      	orrs	r3, r2
 80066c4:	d058      	beq.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80066c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80066ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80066d2:	d033      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80066d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80066d8:	d82c      	bhi.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80066da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066de:	d02f      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80066e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066e4:	d826      	bhi.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80066e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80066ea:	d02b      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80066ec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80066f0:	d820      	bhi.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80066f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066f6:	d012      	beq.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80066f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066fc:	d81a      	bhi.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d022      	beq.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006702:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006706:	d115      	bne.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006708:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800670c:	3308      	adds	r3, #8
 800670e:	2101      	movs	r1, #1
 8006710:	4618      	mov	r0, r3
 8006712:	f001 f98d 	bl	8007a30 <RCCEx_PLL2_Config>
 8006716:	4603      	mov	r3, r0
 8006718:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800671c:	e015      	b.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800671e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006722:	3328      	adds	r3, #40	@ 0x28
 8006724:	2101      	movs	r1, #1
 8006726:	4618      	mov	r0, r3
 8006728:	f001 fa34 	bl	8007b94 <RCCEx_PLL3_Config>
 800672c:	4603      	mov	r3, r0
 800672e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006732:	e00a      	b.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800673a:	e006      	b.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800673c:	bf00      	nop
 800673e:	e004      	b.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006740:	bf00      	nop
 8006742:	e002      	b.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006744:	bf00      	nop
 8006746:	e000      	b.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006748:	bf00      	nop
    }

    if (ret == HAL_OK)
 800674a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800674e:	2b00      	cmp	r3, #0
 8006750:	d10e      	bne.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006752:	4b06      	ldr	r3, [pc, #24]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006756:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800675a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800675e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006762:	4a02      	ldr	r2, [pc, #8]	@ (800676c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006764:	430b      	orrs	r3, r1
 8006766:	6593      	str	r3, [r2, #88]	@ 0x58
 8006768:	e006      	b.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800676a:	bf00      	nop
 800676c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006770:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006774:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006778:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800677c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006780:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006784:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006788:	2300      	movs	r3, #0
 800678a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800678e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006792:	460b      	mov	r3, r1
 8006794:	4313      	orrs	r3, r2
 8006796:	d037      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006798:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800679c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800679e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067a2:	d00e      	beq.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80067a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067a8:	d816      	bhi.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d018      	beq.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80067ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80067b2:	d111      	bne.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067b4:	4bc4      	ldr	r3, [pc, #784]	@ (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80067b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067b8:	4ac3      	ldr	r2, [pc, #780]	@ (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80067ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80067c0:	e00f      	b.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80067c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067c6:	3308      	adds	r3, #8
 80067c8:	2101      	movs	r1, #1
 80067ca:	4618      	mov	r0, r3
 80067cc:	f001 f930 	bl	8007a30 <RCCEx_PLL2_Config>
 80067d0:	4603      	mov	r3, r0
 80067d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80067d6:	e004      	b.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80067de:	e000      	b.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80067e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d10a      	bne.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80067ea:	4bb7      	ldr	r3, [pc, #732]	@ (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80067ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067ee:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80067f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067f8:	4ab3      	ldr	r2, [pc, #716]	@ (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80067fa:	430b      	orrs	r3, r1
 80067fc:	6513      	str	r3, [r2, #80]	@ 0x50
 80067fe:	e003      	b.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006800:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006804:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006808:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800680c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006810:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006814:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006818:	2300      	movs	r3, #0
 800681a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800681e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006822:	460b      	mov	r3, r1
 8006824:	4313      	orrs	r3, r2
 8006826:	d039      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006828:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800682c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800682e:	2b03      	cmp	r3, #3
 8006830:	d81c      	bhi.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006832:	a201      	add	r2, pc, #4	@ (adr r2, 8006838 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006838:	08006875 	.word	0x08006875
 800683c:	08006849 	.word	0x08006849
 8006840:	08006857 	.word	0x08006857
 8006844:	08006875 	.word	0x08006875
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006848:	4b9f      	ldr	r3, [pc, #636]	@ (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800684a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800684c:	4a9e      	ldr	r2, [pc, #632]	@ (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800684e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006852:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006854:	e00f      	b.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006856:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800685a:	3308      	adds	r3, #8
 800685c:	2102      	movs	r1, #2
 800685e:	4618      	mov	r0, r3
 8006860:	f001 f8e6 	bl	8007a30 <RCCEx_PLL2_Config>
 8006864:	4603      	mov	r3, r0
 8006866:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800686a:	e004      	b.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006872:	e000      	b.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006874:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006876:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800687a:	2b00      	cmp	r3, #0
 800687c:	d10a      	bne.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800687e:	4b92      	ldr	r3, [pc, #584]	@ (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006882:	f023 0103 	bic.w	r1, r3, #3
 8006886:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800688a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800688c:	4a8e      	ldr	r2, [pc, #568]	@ (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800688e:	430b      	orrs	r3, r1
 8006890:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006892:	e003      	b.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006894:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006898:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800689c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80068a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80068ac:	2300      	movs	r3, #0
 80068ae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80068b2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80068b6:	460b      	mov	r3, r1
 80068b8:	4313      	orrs	r3, r2
 80068ba:	f000 8099 	beq.w	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068be:	4b83      	ldr	r3, [pc, #524]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a82      	ldr	r2, [pc, #520]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80068c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80068ca:	f7fb f921 	bl	8001b10 <HAL_GetTick>
 80068ce:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068d2:	e00b      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068d4:	f7fb f91c 	bl	8001b10 <HAL_GetTick>
 80068d8:	4602      	mov	r2, r0
 80068da:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	2b64      	cmp	r3, #100	@ 0x64
 80068e2:	d903      	bls.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80068e4:	2303      	movs	r3, #3
 80068e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80068ea:	e005      	b.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068ec:	4b77      	ldr	r3, [pc, #476]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d0ed      	beq.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80068f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d173      	bne.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006900:	4b71      	ldr	r3, [pc, #452]	@ (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006902:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006904:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006908:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800690c:	4053      	eors	r3, r2
 800690e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006912:	2b00      	cmp	r3, #0
 8006914:	d015      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006916:	4b6c      	ldr	r3, [pc, #432]	@ (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800691a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800691e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006922:	4b69      	ldr	r3, [pc, #420]	@ (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006926:	4a68      	ldr	r2, [pc, #416]	@ (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006928:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800692c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800692e:	4b66      	ldr	r3, [pc, #408]	@ (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006932:	4a65      	ldr	r2, [pc, #404]	@ (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006934:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006938:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800693a:	4a63      	ldr	r2, [pc, #396]	@ (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800693c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006940:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006942:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006946:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800694a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800694e:	d118      	bne.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006950:	f7fb f8de 	bl	8001b10 <HAL_GetTick>
 8006954:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006958:	e00d      	b.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800695a:	f7fb f8d9 	bl	8001b10 <HAL_GetTick>
 800695e:	4602      	mov	r2, r0
 8006960:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006964:	1ad2      	subs	r2, r2, r3
 8006966:	f241 3388 	movw	r3, #5000	@ 0x1388
 800696a:	429a      	cmp	r2, r3
 800696c:	d903      	bls.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8006974:	e005      	b.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006976:	4b54      	ldr	r3, [pc, #336]	@ (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800697a:	f003 0302 	and.w	r3, r3, #2
 800697e:	2b00      	cmp	r3, #0
 8006980:	d0eb      	beq.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8006982:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006986:	2b00      	cmp	r3, #0
 8006988:	d129      	bne.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800698a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800698e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006992:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006996:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800699a:	d10e      	bne.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x846>
 800699c:	4b4a      	ldr	r3, [pc, #296]	@ (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80069a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80069ac:	091a      	lsrs	r2, r3, #4
 80069ae:	4b48      	ldr	r3, [pc, #288]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80069b0:	4013      	ands	r3, r2
 80069b2:	4a45      	ldr	r2, [pc, #276]	@ (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069b4:	430b      	orrs	r3, r1
 80069b6:	6113      	str	r3, [r2, #16]
 80069b8:	e005      	b.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80069ba:	4b43      	ldr	r3, [pc, #268]	@ (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	4a42      	ldr	r2, [pc, #264]	@ (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069c0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80069c4:	6113      	str	r3, [r2, #16]
 80069c6:	4b40      	ldr	r3, [pc, #256]	@ (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069c8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80069ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80069d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069d6:	4a3c      	ldr	r2, [pc, #240]	@ (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069d8:	430b      	orrs	r3, r1
 80069da:	6713      	str	r3, [r2, #112]	@ 0x70
 80069dc:	e008      	b.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80069de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069e2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80069e6:	e003      	b.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80069f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f8:	f002 0301 	and.w	r3, r2, #1
 80069fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006a00:	2300      	movs	r3, #0
 8006a02:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006a06:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006a0a:	460b      	mov	r3, r1
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	f000 808f 	beq.w	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006a12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a16:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006a18:	2b28      	cmp	r3, #40	@ 0x28
 8006a1a:	d871      	bhi.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006a1c:	a201      	add	r2, pc, #4	@ (adr r2, 8006a24 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a22:	bf00      	nop
 8006a24:	08006b09 	.word	0x08006b09
 8006a28:	08006b01 	.word	0x08006b01
 8006a2c:	08006b01 	.word	0x08006b01
 8006a30:	08006b01 	.word	0x08006b01
 8006a34:	08006b01 	.word	0x08006b01
 8006a38:	08006b01 	.word	0x08006b01
 8006a3c:	08006b01 	.word	0x08006b01
 8006a40:	08006b01 	.word	0x08006b01
 8006a44:	08006ad5 	.word	0x08006ad5
 8006a48:	08006b01 	.word	0x08006b01
 8006a4c:	08006b01 	.word	0x08006b01
 8006a50:	08006b01 	.word	0x08006b01
 8006a54:	08006b01 	.word	0x08006b01
 8006a58:	08006b01 	.word	0x08006b01
 8006a5c:	08006b01 	.word	0x08006b01
 8006a60:	08006b01 	.word	0x08006b01
 8006a64:	08006aeb 	.word	0x08006aeb
 8006a68:	08006b01 	.word	0x08006b01
 8006a6c:	08006b01 	.word	0x08006b01
 8006a70:	08006b01 	.word	0x08006b01
 8006a74:	08006b01 	.word	0x08006b01
 8006a78:	08006b01 	.word	0x08006b01
 8006a7c:	08006b01 	.word	0x08006b01
 8006a80:	08006b01 	.word	0x08006b01
 8006a84:	08006b09 	.word	0x08006b09
 8006a88:	08006b01 	.word	0x08006b01
 8006a8c:	08006b01 	.word	0x08006b01
 8006a90:	08006b01 	.word	0x08006b01
 8006a94:	08006b01 	.word	0x08006b01
 8006a98:	08006b01 	.word	0x08006b01
 8006a9c:	08006b01 	.word	0x08006b01
 8006aa0:	08006b01 	.word	0x08006b01
 8006aa4:	08006b09 	.word	0x08006b09
 8006aa8:	08006b01 	.word	0x08006b01
 8006aac:	08006b01 	.word	0x08006b01
 8006ab0:	08006b01 	.word	0x08006b01
 8006ab4:	08006b01 	.word	0x08006b01
 8006ab8:	08006b01 	.word	0x08006b01
 8006abc:	08006b01 	.word	0x08006b01
 8006ac0:	08006b01 	.word	0x08006b01
 8006ac4:	08006b09 	.word	0x08006b09
 8006ac8:	58024400 	.word	0x58024400
 8006acc:	58024800 	.word	0x58024800
 8006ad0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ad8:	3308      	adds	r3, #8
 8006ada:	2101      	movs	r1, #1
 8006adc:	4618      	mov	r0, r3
 8006ade:	f000 ffa7 	bl	8007a30 <RCCEx_PLL2_Config>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006ae8:	e00f      	b.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006aea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aee:	3328      	adds	r3, #40	@ 0x28
 8006af0:	2101      	movs	r1, #1
 8006af2:	4618      	mov	r0, r3
 8006af4:	f001 f84e 	bl	8007b94 <RCCEx_PLL3_Config>
 8006af8:	4603      	mov	r3, r0
 8006afa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006afe:	e004      	b.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006b06:	e000      	b.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006b08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d10a      	bne.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006b12:	4bbf      	ldr	r3, [pc, #764]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006b14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b16:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006b1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b20:	4abb      	ldr	r2, [pc, #748]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006b22:	430b      	orrs	r3, r1
 8006b24:	6553      	str	r3, [r2, #84]	@ 0x54
 8006b26:	e003      	b.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b2c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b38:	f002 0302 	and.w	r3, r2, #2
 8006b3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b40:	2300      	movs	r3, #0
 8006b42:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b46:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	d041      	beq.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b56:	2b05      	cmp	r3, #5
 8006b58:	d824      	bhi.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8006b5a:	a201      	add	r2, pc, #4	@ (adr r2, 8006b60 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b60:	08006bad 	.word	0x08006bad
 8006b64:	08006b79 	.word	0x08006b79
 8006b68:	08006b8f 	.word	0x08006b8f
 8006b6c:	08006bad 	.word	0x08006bad
 8006b70:	08006bad 	.word	0x08006bad
 8006b74:	08006bad 	.word	0x08006bad
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b7c:	3308      	adds	r3, #8
 8006b7e:	2101      	movs	r1, #1
 8006b80:	4618      	mov	r0, r3
 8006b82:	f000 ff55 	bl	8007a30 <RCCEx_PLL2_Config>
 8006b86:	4603      	mov	r3, r0
 8006b88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006b8c:	e00f      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b92:	3328      	adds	r3, #40	@ 0x28
 8006b94:	2101      	movs	r1, #1
 8006b96:	4618      	mov	r0, r3
 8006b98:	f000 fffc 	bl	8007b94 <RCCEx_PLL3_Config>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006ba2:	e004      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006baa:	e000      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006bac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d10a      	bne.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006bb6:	4b96      	ldr	r3, [pc, #600]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bba:	f023 0107 	bic.w	r1, r3, #7
 8006bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bc4:	4a92      	ldr	r2, [pc, #584]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006bc6:	430b      	orrs	r3, r1
 8006bc8:	6553      	str	r3, [r2, #84]	@ 0x54
 8006bca:	e003      	b.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bcc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006bd0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bdc:	f002 0304 	and.w	r3, r2, #4
 8006be0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006be4:	2300      	movs	r3, #0
 8006be6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006bea:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006bee:	460b      	mov	r3, r1
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	d044      	beq.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bfc:	2b05      	cmp	r3, #5
 8006bfe:	d825      	bhi.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006c00:	a201      	add	r2, pc, #4	@ (adr r2, 8006c08 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8006c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c06:	bf00      	nop
 8006c08:	08006c55 	.word	0x08006c55
 8006c0c:	08006c21 	.word	0x08006c21
 8006c10:	08006c37 	.word	0x08006c37
 8006c14:	08006c55 	.word	0x08006c55
 8006c18:	08006c55 	.word	0x08006c55
 8006c1c:	08006c55 	.word	0x08006c55
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c24:	3308      	adds	r3, #8
 8006c26:	2101      	movs	r1, #1
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f000 ff01 	bl	8007a30 <RCCEx_PLL2_Config>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006c34:	e00f      	b.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c3a:	3328      	adds	r3, #40	@ 0x28
 8006c3c:	2101      	movs	r1, #1
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f000 ffa8 	bl	8007b94 <RCCEx_PLL3_Config>
 8006c44:	4603      	mov	r3, r0
 8006c46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006c4a:	e004      	b.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006c52:	e000      	b.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8006c54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d10b      	bne.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006c5e:	4b6c      	ldr	r3, [pc, #432]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006c60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c62:	f023 0107 	bic.w	r1, r3, #7
 8006c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c6e:	4a68      	ldr	r2, [pc, #416]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006c70:	430b      	orrs	r3, r1
 8006c72:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c74:	e003      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c76:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c7a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c86:	f002 0320 	and.w	r3, r2, #32
 8006c8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006c8e:	2300      	movs	r3, #0
 8006c90:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006c94:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006c98:	460b      	mov	r3, r1
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	d055      	beq.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ca2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ca6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006caa:	d033      	beq.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006cac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006cb0:	d82c      	bhi.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cb6:	d02f      	beq.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cbc:	d826      	bhi.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006cbe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006cc2:	d02b      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006cc4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006cc8:	d820      	bhi.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006cca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006cce:	d012      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8006cd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006cd4:	d81a      	bhi.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d022      	beq.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006cda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006cde:	d115      	bne.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ce0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ce4:	3308      	adds	r3, #8
 8006ce6:	2100      	movs	r1, #0
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f000 fea1 	bl	8007a30 <RCCEx_PLL2_Config>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006cf4:	e015      	b.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cfa:	3328      	adds	r3, #40	@ 0x28
 8006cfc:	2102      	movs	r1, #2
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f000 ff48 	bl	8007b94 <RCCEx_PLL3_Config>
 8006d04:	4603      	mov	r3, r0
 8006d06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006d0a:	e00a      	b.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006d12:	e006      	b.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006d14:	bf00      	nop
 8006d16:	e004      	b.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006d18:	bf00      	nop
 8006d1a:	e002      	b.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006d1c:	bf00      	nop
 8006d1e:	e000      	b.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006d20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d10b      	bne.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006d2a:	4b39      	ldr	r3, [pc, #228]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006d2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d2e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006d32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d3a:	4a35      	ldr	r2, [pc, #212]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006d3c:	430b      	orrs	r3, r1
 8006d3e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006d40:	e003      	b.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d46:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006d4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d52:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006d56:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006d60:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006d64:	460b      	mov	r3, r1
 8006d66:	4313      	orrs	r3, r2
 8006d68:	d058      	beq.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006d72:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006d76:	d033      	beq.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8006d78:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006d7c:	d82c      	bhi.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006d7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d82:	d02f      	beq.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006d84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d88:	d826      	bhi.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006d8a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006d8e:	d02b      	beq.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006d90:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006d94:	d820      	bhi.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006d96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d9a:	d012      	beq.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006d9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006da0:	d81a      	bhi.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d022      	beq.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006da6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006daa:	d115      	bne.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006db0:	3308      	adds	r3, #8
 8006db2:	2100      	movs	r1, #0
 8006db4:	4618      	mov	r0, r3
 8006db6:	f000 fe3b 	bl	8007a30 <RCCEx_PLL2_Config>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006dc0:	e015      	b.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dc6:	3328      	adds	r3, #40	@ 0x28
 8006dc8:	2102      	movs	r1, #2
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f000 fee2 	bl	8007b94 <RCCEx_PLL3_Config>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006dd6:	e00a      	b.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006dde:	e006      	b.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006de0:	bf00      	nop
 8006de2:	e004      	b.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006de4:	bf00      	nop
 8006de6:	e002      	b.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006de8:	bf00      	nop
 8006dea:	e000      	b.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006dec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d10e      	bne.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006df6:	4b06      	ldr	r3, [pc, #24]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dfa:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006dfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e02:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006e06:	4a02      	ldr	r2, [pc, #8]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006e08:	430b      	orrs	r3, r1
 8006e0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e0c:	e006      	b.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8006e0e:	bf00      	nop
 8006e10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e18:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e24:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006e28:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006e32:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006e36:	460b      	mov	r3, r1
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	d055      	beq.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e40:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006e44:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006e48:	d033      	beq.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8006e4a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006e4e:	d82c      	bhi.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006e50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e54:	d02f      	beq.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006e56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e5a:	d826      	bhi.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006e5c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006e60:	d02b      	beq.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006e62:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006e66:	d820      	bhi.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006e68:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e6c:	d012      	beq.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006e6e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e72:	d81a      	bhi.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d022      	beq.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006e78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e7c:	d115      	bne.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e82:	3308      	adds	r3, #8
 8006e84:	2100      	movs	r1, #0
 8006e86:	4618      	mov	r0, r3
 8006e88:	f000 fdd2 	bl	8007a30 <RCCEx_PLL2_Config>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006e92:	e015      	b.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e98:	3328      	adds	r3, #40	@ 0x28
 8006e9a:	2102      	movs	r1, #2
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f000 fe79 	bl	8007b94 <RCCEx_PLL3_Config>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006ea8:	e00a      	b.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006eb0:	e006      	b.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006eb2:	bf00      	nop
 8006eb4:	e004      	b.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006eb6:	bf00      	nop
 8006eb8:	e002      	b.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006eba:	bf00      	nop
 8006ebc:	e000      	b.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006ebe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ec0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d10b      	bne.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006ec8:	4ba0      	ldr	r3, [pc, #640]	@ (800714c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ecc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ed4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006ed8:	4a9c      	ldr	r2, [pc, #624]	@ (800714c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006eda:	430b      	orrs	r3, r1
 8006edc:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ede:	e003      	b.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ee0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ee4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef0:	f002 0308 	and.w	r3, r2, #8
 8006ef4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006ef8:	2300      	movs	r3, #0
 8006efa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006efe:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006f02:	460b      	mov	r3, r1
 8006f04:	4313      	orrs	r3, r2
 8006f06:	d01e      	beq.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f14:	d10c      	bne.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006f16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f1a:	3328      	adds	r3, #40	@ 0x28
 8006f1c:	2102      	movs	r1, #2
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f000 fe38 	bl	8007b94 <RCCEx_PLL3_Config>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d002      	beq.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006f30:	4b86      	ldr	r3, [pc, #536]	@ (800714c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f34:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f40:	4a82      	ldr	r2, [pc, #520]	@ (800714c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f42:	430b      	orrs	r3, r1
 8006f44:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4e:	f002 0310 	and.w	r3, r2, #16
 8006f52:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006f56:	2300      	movs	r3, #0
 8006f58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006f5c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006f60:	460b      	mov	r3, r1
 8006f62:	4313      	orrs	r3, r2
 8006f64:	d01e      	beq.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f72:	d10c      	bne.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f78:	3328      	adds	r3, #40	@ 0x28
 8006f7a:	2102      	movs	r1, #2
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f000 fe09 	bl	8007b94 <RCCEx_PLL3_Config>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d002      	beq.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006f8e:	4b6f      	ldr	r3, [pc, #444]	@ (800714c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f92:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f9e:	4a6b      	ldr	r2, [pc, #428]	@ (800714c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006fa0:	430b      	orrs	r3, r1
 8006fa2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fac:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006fb0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006fb6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006fba:	460b      	mov	r3, r1
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	d03e      	beq.n	800703e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fc4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006fc8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006fcc:	d022      	beq.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006fce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006fd2:	d81b      	bhi.n	800700c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d003      	beq.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006fd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fdc:	d00b      	beq.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006fde:	e015      	b.n	800700c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fe4:	3308      	adds	r3, #8
 8006fe6:	2100      	movs	r1, #0
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f000 fd21 	bl	8007a30 <RCCEx_PLL2_Config>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006ff4:	e00f      	b.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ffa:	3328      	adds	r3, #40	@ 0x28
 8006ffc:	2102      	movs	r1, #2
 8006ffe:	4618      	mov	r0, r3
 8007000:	f000 fdc8 	bl	8007b94 <RCCEx_PLL3_Config>
 8007004:	4603      	mov	r3, r0
 8007006:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800700a:	e004      	b.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007012:	e000      	b.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8007014:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007016:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800701a:	2b00      	cmp	r3, #0
 800701c:	d10b      	bne.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800701e:	4b4b      	ldr	r3, [pc, #300]	@ (800714c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007022:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007026:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800702a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800702e:	4a47      	ldr	r2, [pc, #284]	@ (800714c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007030:	430b      	orrs	r3, r1
 8007032:	6593      	str	r3, [r2, #88]	@ 0x58
 8007034:	e003      	b.n	800703e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007036:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800703a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800703e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007046:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800704a:	673b      	str	r3, [r7, #112]	@ 0x70
 800704c:	2300      	movs	r3, #0
 800704e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007050:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007054:	460b      	mov	r3, r1
 8007056:	4313      	orrs	r3, r2
 8007058:	d03b      	beq.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800705a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800705e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007062:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007066:	d01f      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007068:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800706c:	d818      	bhi.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800706e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007072:	d003      	beq.n	800707c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8007074:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007078:	d007      	beq.n	800708a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800707a:	e011      	b.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800707c:	4b33      	ldr	r3, [pc, #204]	@ (800714c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800707e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007080:	4a32      	ldr	r2, [pc, #200]	@ (800714c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007082:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007086:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007088:	e00f      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800708a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800708e:	3328      	adds	r3, #40	@ 0x28
 8007090:	2101      	movs	r1, #1
 8007092:	4618      	mov	r0, r3
 8007094:	f000 fd7e 	bl	8007b94 <RCCEx_PLL3_Config>
 8007098:	4603      	mov	r3, r0
 800709a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800709e:	e004      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070a0:	2301      	movs	r3, #1
 80070a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80070a6:	e000      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80070a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d10b      	bne.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80070b2:	4b26      	ldr	r3, [pc, #152]	@ (800714c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80070b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070b6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80070ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070c2:	4a22      	ldr	r2, [pc, #136]	@ (800714c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80070c4:	430b      	orrs	r3, r1
 80070c6:	6553      	str	r3, [r2, #84]	@ 0x54
 80070c8:	e003      	b.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070ce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80070d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070da:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80070de:	66bb      	str	r3, [r7, #104]	@ 0x68
 80070e0:	2300      	movs	r3, #0
 80070e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80070e4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80070e8:	460b      	mov	r3, r1
 80070ea:	4313      	orrs	r3, r2
 80070ec:	d034      	beq.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80070ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d003      	beq.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80070f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070fc:	d007      	beq.n	800710e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80070fe:	e011      	b.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007100:	4b12      	ldr	r3, [pc, #72]	@ (800714c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007104:	4a11      	ldr	r2, [pc, #68]	@ (800714c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007106:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800710a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800710c:	e00e      	b.n	800712c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800710e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007112:	3308      	adds	r3, #8
 8007114:	2102      	movs	r1, #2
 8007116:	4618      	mov	r0, r3
 8007118:	f000 fc8a 	bl	8007a30 <RCCEx_PLL2_Config>
 800711c:	4603      	mov	r3, r0
 800711e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007122:	e003      	b.n	800712c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800712a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800712c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007130:	2b00      	cmp	r3, #0
 8007132:	d10d      	bne.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007134:	4b05      	ldr	r3, [pc, #20]	@ (800714c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007136:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007138:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800713c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007140:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007142:	4a02      	ldr	r2, [pc, #8]	@ (800714c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007144:	430b      	orrs	r3, r1
 8007146:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007148:	e006      	b.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800714a:	bf00      	nop
 800714c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007150:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007154:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007158:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800715c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007160:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007164:	663b      	str	r3, [r7, #96]	@ 0x60
 8007166:	2300      	movs	r3, #0
 8007168:	667b      	str	r3, [r7, #100]	@ 0x64
 800716a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800716e:	460b      	mov	r3, r1
 8007170:	4313      	orrs	r3, r2
 8007172:	d00c      	beq.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007174:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007178:	3328      	adds	r3, #40	@ 0x28
 800717a:	2102      	movs	r1, #2
 800717c:	4618      	mov	r0, r3
 800717e:	f000 fd09 	bl	8007b94 <RCCEx_PLL3_Config>
 8007182:	4603      	mov	r3, r0
 8007184:	2b00      	cmp	r3, #0
 8007186:	d002      	beq.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800718e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007196:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800719a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800719c:	2300      	movs	r3, #0
 800719e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80071a0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80071a4:	460b      	mov	r3, r1
 80071a6:	4313      	orrs	r3, r2
 80071a8:	d036      	beq.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80071aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80071b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071b4:	d018      	beq.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80071b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071ba:	d811      	bhi.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80071bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071c0:	d014      	beq.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80071c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071c6:	d80b      	bhi.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d011      	beq.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80071cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071d0:	d106      	bne.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071d2:	4bb7      	ldr	r3, [pc, #732]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80071d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071d6:	4ab6      	ldr	r2, [pc, #728]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80071d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80071de:	e008      	b.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071e0:	2301      	movs	r3, #1
 80071e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80071e6:	e004      	b.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80071e8:	bf00      	nop
 80071ea:	e002      	b.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80071ec:	bf00      	nop
 80071ee:	e000      	b.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80071f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d10a      	bne.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80071fa:	4bad      	ldr	r3, [pc, #692]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80071fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071fe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007202:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007206:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007208:	4aa9      	ldr	r2, [pc, #676]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800720a:	430b      	orrs	r3, r1
 800720c:	6553      	str	r3, [r2, #84]	@ 0x54
 800720e:	e003      	b.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007210:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007214:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007218:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800721c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007220:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007224:	653b      	str	r3, [r7, #80]	@ 0x50
 8007226:	2300      	movs	r3, #0
 8007228:	657b      	str	r3, [r7, #84]	@ 0x54
 800722a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800722e:	460b      	mov	r3, r1
 8007230:	4313      	orrs	r3, r2
 8007232:	d009      	beq.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007234:	4b9e      	ldr	r3, [pc, #632]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007236:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007238:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800723c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007242:	4a9b      	ldr	r2, [pc, #620]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007244:	430b      	orrs	r3, r1
 8007246:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007248:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800724c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007250:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007254:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007256:	2300      	movs	r3, #0
 8007258:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800725a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800725e:	460b      	mov	r3, r1
 8007260:	4313      	orrs	r3, r2
 8007262:	d009      	beq.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007264:	4b92      	ldr	r3, [pc, #584]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007266:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007268:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800726c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007270:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007272:	4a8f      	ldr	r2, [pc, #572]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007274:	430b      	orrs	r3, r1
 8007276:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007278:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800727c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007280:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007284:	643b      	str	r3, [r7, #64]	@ 0x40
 8007286:	2300      	movs	r3, #0
 8007288:	647b      	str	r3, [r7, #68]	@ 0x44
 800728a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800728e:	460b      	mov	r3, r1
 8007290:	4313      	orrs	r3, r2
 8007292:	d00e      	beq.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007294:	4b86      	ldr	r3, [pc, #536]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007296:	691b      	ldr	r3, [r3, #16]
 8007298:	4a85      	ldr	r2, [pc, #532]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800729a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800729e:	6113      	str	r3, [r2, #16]
 80072a0:	4b83      	ldr	r3, [pc, #524]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80072a2:	6919      	ldr	r1, [r3, #16]
 80072a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80072ac:	4a80      	ldr	r2, [pc, #512]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80072ae:	430b      	orrs	r3, r1
 80072b0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80072b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ba:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80072be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80072c0:	2300      	movs	r3, #0
 80072c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072c4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80072c8:	460b      	mov	r3, r1
 80072ca:	4313      	orrs	r3, r2
 80072cc:	d009      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80072ce:	4b78      	ldr	r3, [pc, #480]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80072d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072d2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80072d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072dc:	4a74      	ldr	r2, [pc, #464]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80072de:	430b      	orrs	r3, r1
 80072e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80072e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ea:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80072ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80072f0:	2300      	movs	r3, #0
 80072f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80072f4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80072f8:	460b      	mov	r3, r1
 80072fa:	4313      	orrs	r3, r2
 80072fc:	d00a      	beq.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80072fe:	4b6c      	ldr	r3, [pc, #432]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007302:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007306:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800730a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800730e:	4a68      	ldr	r2, [pc, #416]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007310:	430b      	orrs	r3, r1
 8007312:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007314:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800731c:	2100      	movs	r1, #0
 800731e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007320:	f003 0301 	and.w	r3, r3, #1
 8007324:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007326:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800732a:	460b      	mov	r3, r1
 800732c:	4313      	orrs	r3, r2
 800732e:	d011      	beq.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007330:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007334:	3308      	adds	r3, #8
 8007336:	2100      	movs	r1, #0
 8007338:	4618      	mov	r0, r3
 800733a:	f000 fb79 	bl	8007a30 <RCCEx_PLL2_Config>
 800733e:	4603      	mov	r3, r0
 8007340:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007344:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007348:	2b00      	cmp	r3, #0
 800734a:	d003      	beq.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800734c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007350:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007354:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735c:	2100      	movs	r1, #0
 800735e:	6239      	str	r1, [r7, #32]
 8007360:	f003 0302 	and.w	r3, r3, #2
 8007364:	627b      	str	r3, [r7, #36]	@ 0x24
 8007366:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800736a:	460b      	mov	r3, r1
 800736c:	4313      	orrs	r3, r2
 800736e:	d011      	beq.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007370:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007374:	3308      	adds	r3, #8
 8007376:	2101      	movs	r1, #1
 8007378:	4618      	mov	r0, r3
 800737a:	f000 fb59 	bl	8007a30 <RCCEx_PLL2_Config>
 800737e:	4603      	mov	r3, r0
 8007380:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007384:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007388:	2b00      	cmp	r3, #0
 800738a:	d003      	beq.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800738c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007390:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007394:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739c:	2100      	movs	r1, #0
 800739e:	61b9      	str	r1, [r7, #24]
 80073a0:	f003 0304 	and.w	r3, r3, #4
 80073a4:	61fb      	str	r3, [r7, #28]
 80073a6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80073aa:	460b      	mov	r3, r1
 80073ac:	4313      	orrs	r3, r2
 80073ae:	d011      	beq.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80073b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073b4:	3308      	adds	r3, #8
 80073b6:	2102      	movs	r1, #2
 80073b8:	4618      	mov	r0, r3
 80073ba:	f000 fb39 	bl	8007a30 <RCCEx_PLL2_Config>
 80073be:	4603      	mov	r3, r0
 80073c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80073c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d003      	beq.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80073d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073dc:	2100      	movs	r1, #0
 80073de:	6139      	str	r1, [r7, #16]
 80073e0:	f003 0308 	and.w	r3, r3, #8
 80073e4:	617b      	str	r3, [r7, #20]
 80073e6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80073ea:	460b      	mov	r3, r1
 80073ec:	4313      	orrs	r3, r2
 80073ee:	d011      	beq.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80073f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073f4:	3328      	adds	r3, #40	@ 0x28
 80073f6:	2100      	movs	r1, #0
 80073f8:	4618      	mov	r0, r3
 80073fa:	f000 fbcb 	bl	8007b94 <RCCEx_PLL3_Config>
 80073fe:	4603      	mov	r3, r0
 8007400:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8007404:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007408:	2b00      	cmp	r3, #0
 800740a:	d003      	beq.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800740c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007410:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007414:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800741c:	2100      	movs	r1, #0
 800741e:	60b9      	str	r1, [r7, #8]
 8007420:	f003 0310 	and.w	r3, r3, #16
 8007424:	60fb      	str	r3, [r7, #12]
 8007426:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800742a:	460b      	mov	r3, r1
 800742c:	4313      	orrs	r3, r2
 800742e:	d011      	beq.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007430:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007434:	3328      	adds	r3, #40	@ 0x28
 8007436:	2101      	movs	r1, #1
 8007438:	4618      	mov	r0, r3
 800743a:	f000 fbab 	bl	8007b94 <RCCEx_PLL3_Config>
 800743e:	4603      	mov	r3, r0
 8007440:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007444:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007448:	2b00      	cmp	r3, #0
 800744a:	d003      	beq.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800744c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007450:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007454:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745c:	2100      	movs	r1, #0
 800745e:	6039      	str	r1, [r7, #0]
 8007460:	f003 0320 	and.w	r3, r3, #32
 8007464:	607b      	str	r3, [r7, #4]
 8007466:	e9d7 1200 	ldrd	r1, r2, [r7]
 800746a:	460b      	mov	r3, r1
 800746c:	4313      	orrs	r3, r2
 800746e:	d011      	beq.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007470:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007474:	3328      	adds	r3, #40	@ 0x28
 8007476:	2102      	movs	r1, #2
 8007478:	4618      	mov	r0, r3
 800747a:	f000 fb8b 	bl	8007b94 <RCCEx_PLL3_Config>
 800747e:	4603      	mov	r3, r0
 8007480:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007484:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007488:	2b00      	cmp	r3, #0
 800748a:	d003      	beq.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800748c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007490:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8007494:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8007498:	2b00      	cmp	r3, #0
 800749a:	d101      	bne.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800749c:	2300      	movs	r3, #0
 800749e:	e000      	b.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80074a0:	2301      	movs	r3, #1
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80074a8:	46bd      	mov	sp, r7
 80074aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074ae:	bf00      	nop
 80074b0:	58024400 	.word	0x58024400

080074b4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80074b8:	f7fe fdbe 	bl	8006038 <HAL_RCC_GetHCLKFreq>
 80074bc:	4602      	mov	r2, r0
 80074be:	4b06      	ldr	r3, [pc, #24]	@ (80074d8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80074c0:	6a1b      	ldr	r3, [r3, #32]
 80074c2:	091b      	lsrs	r3, r3, #4
 80074c4:	f003 0307 	and.w	r3, r3, #7
 80074c8:	4904      	ldr	r1, [pc, #16]	@ (80074dc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80074ca:	5ccb      	ldrb	r3, [r1, r3]
 80074cc:	f003 031f 	and.w	r3, r3, #31
 80074d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	bd80      	pop	{r7, pc}
 80074d8:	58024400 	.word	0x58024400
 80074dc:	0800becc 	.word	0x0800becc

080074e0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b089      	sub	sp, #36	@ 0x24
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80074e8:	4ba1      	ldr	r3, [pc, #644]	@ (8007770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074ec:	f003 0303 	and.w	r3, r3, #3
 80074f0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80074f2:	4b9f      	ldr	r3, [pc, #636]	@ (8007770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074f6:	0b1b      	lsrs	r3, r3, #12
 80074f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80074fc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80074fe:	4b9c      	ldr	r3, [pc, #624]	@ (8007770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007502:	091b      	lsrs	r3, r3, #4
 8007504:	f003 0301 	and.w	r3, r3, #1
 8007508:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800750a:	4b99      	ldr	r3, [pc, #612]	@ (8007770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800750c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800750e:	08db      	lsrs	r3, r3, #3
 8007510:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007514:	693a      	ldr	r2, [r7, #16]
 8007516:	fb02 f303 	mul.w	r3, r2, r3
 800751a:	ee07 3a90 	vmov	s15, r3
 800751e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007522:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	2b00      	cmp	r3, #0
 800752a:	f000 8111 	beq.w	8007750 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	2b02      	cmp	r3, #2
 8007532:	f000 8083 	beq.w	800763c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007536:	69bb      	ldr	r3, [r7, #24]
 8007538:	2b02      	cmp	r3, #2
 800753a:	f200 80a1 	bhi.w	8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d003      	beq.n	800754c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007544:	69bb      	ldr	r3, [r7, #24]
 8007546:	2b01      	cmp	r3, #1
 8007548:	d056      	beq.n	80075f8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800754a:	e099      	b.n	8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800754c:	4b88      	ldr	r3, [pc, #544]	@ (8007770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f003 0320 	and.w	r3, r3, #32
 8007554:	2b00      	cmp	r3, #0
 8007556:	d02d      	beq.n	80075b4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007558:	4b85      	ldr	r3, [pc, #532]	@ (8007770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	08db      	lsrs	r3, r3, #3
 800755e:	f003 0303 	and.w	r3, r3, #3
 8007562:	4a84      	ldr	r2, [pc, #528]	@ (8007774 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007564:	fa22 f303 	lsr.w	r3, r2, r3
 8007568:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	ee07 3a90 	vmov	s15, r3
 8007570:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	ee07 3a90 	vmov	s15, r3
 800757a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800757e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007582:	4b7b      	ldr	r3, [pc, #492]	@ (8007770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800758a:	ee07 3a90 	vmov	s15, r3
 800758e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007592:	ed97 6a03 	vldr	s12, [r7, #12]
 8007596:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007778 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800759a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800759e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075ae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80075b2:	e087      	b.n	80076c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	ee07 3a90 	vmov	s15, r3
 80075ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075be:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800777c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80075c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075c6:	4b6a      	ldr	r3, [pc, #424]	@ (8007770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ce:	ee07 3a90 	vmov	s15, r3
 80075d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80075da:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007778 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80075de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075f6:	e065      	b.n	80076c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	ee07 3a90 	vmov	s15, r3
 80075fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007602:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007780 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800760a:	4b59      	ldr	r3, [pc, #356]	@ (8007770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800760c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800760e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007612:	ee07 3a90 	vmov	s15, r3
 8007616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800761a:	ed97 6a03 	vldr	s12, [r7, #12]
 800761e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007778 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800762a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800762e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007636:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800763a:	e043      	b.n	80076c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	ee07 3a90 	vmov	s15, r3
 8007642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007646:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007784 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800764a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800764e:	4b48      	ldr	r3, [pc, #288]	@ (8007770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007656:	ee07 3a90 	vmov	s15, r3
 800765a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800765e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007662:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007778 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800766a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800766e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800767a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800767e:	e021      	b.n	80076c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	ee07 3a90 	vmov	s15, r3
 8007686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800768a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007780 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800768e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007692:	4b37      	ldr	r3, [pc, #220]	@ (8007770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800769a:	ee07 3a90 	vmov	s15, r3
 800769e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80076a6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007778 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80076aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076c2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80076c4:	4b2a      	ldr	r3, [pc, #168]	@ (8007770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076c8:	0a5b      	lsrs	r3, r3, #9
 80076ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076ce:	ee07 3a90 	vmov	s15, r3
 80076d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80076da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076de:	edd7 6a07 	vldr	s13, [r7, #28]
 80076e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076ea:	ee17 2a90 	vmov	r2, s15
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80076f2:	4b1f      	ldr	r3, [pc, #124]	@ (8007770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076f6:	0c1b      	lsrs	r3, r3, #16
 80076f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076fc:	ee07 3a90 	vmov	s15, r3
 8007700:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007704:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007708:	ee37 7a87 	vadd.f32	s14, s15, s14
 800770c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007710:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007714:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007718:	ee17 2a90 	vmov	r2, s15
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007720:	4b13      	ldr	r3, [pc, #76]	@ (8007770 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007724:	0e1b      	lsrs	r3, r3, #24
 8007726:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800772a:	ee07 3a90 	vmov	s15, r3
 800772e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007732:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007736:	ee37 7a87 	vadd.f32	s14, s15, s14
 800773a:	edd7 6a07 	vldr	s13, [r7, #28]
 800773e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007742:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007746:	ee17 2a90 	vmov	r2, s15
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800774e:	e008      	b.n	8007762 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	609a      	str	r2, [r3, #8]
}
 8007762:	bf00      	nop
 8007764:	3724      	adds	r7, #36	@ 0x24
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr
 800776e:	bf00      	nop
 8007770:	58024400 	.word	0x58024400
 8007774:	03d09000 	.word	0x03d09000
 8007778:	46000000 	.word	0x46000000
 800777c:	4c742400 	.word	0x4c742400
 8007780:	4a742400 	.word	0x4a742400
 8007784:	4af42400 	.word	0x4af42400

08007788 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007788:	b480      	push	{r7}
 800778a:	b089      	sub	sp, #36	@ 0x24
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007790:	4ba1      	ldr	r3, [pc, #644]	@ (8007a18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007794:	f003 0303 	and.w	r3, r3, #3
 8007798:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800779a:	4b9f      	ldr	r3, [pc, #636]	@ (8007a18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800779c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800779e:	0d1b      	lsrs	r3, r3, #20
 80077a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80077a4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80077a6:	4b9c      	ldr	r3, [pc, #624]	@ (8007a18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077aa:	0a1b      	lsrs	r3, r3, #8
 80077ac:	f003 0301 	and.w	r3, r3, #1
 80077b0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80077b2:	4b99      	ldr	r3, [pc, #612]	@ (8007a18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077b6:	08db      	lsrs	r3, r3, #3
 80077b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077bc:	693a      	ldr	r2, [r7, #16]
 80077be:	fb02 f303 	mul.w	r3, r2, r3
 80077c2:	ee07 3a90 	vmov	s15, r3
 80077c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f000 8111 	beq.w	80079f8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80077d6:	69bb      	ldr	r3, [r7, #24]
 80077d8:	2b02      	cmp	r3, #2
 80077da:	f000 8083 	beq.w	80078e4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80077de:	69bb      	ldr	r3, [r7, #24]
 80077e0:	2b02      	cmp	r3, #2
 80077e2:	f200 80a1 	bhi.w	8007928 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d003      	beq.n	80077f4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80077ec:	69bb      	ldr	r3, [r7, #24]
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d056      	beq.n	80078a0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80077f2:	e099      	b.n	8007928 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077f4:	4b88      	ldr	r3, [pc, #544]	@ (8007a18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f003 0320 	and.w	r3, r3, #32
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d02d      	beq.n	800785c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007800:	4b85      	ldr	r3, [pc, #532]	@ (8007a18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	08db      	lsrs	r3, r3, #3
 8007806:	f003 0303 	and.w	r3, r3, #3
 800780a:	4a84      	ldr	r2, [pc, #528]	@ (8007a1c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800780c:	fa22 f303 	lsr.w	r3, r2, r3
 8007810:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	ee07 3a90 	vmov	s15, r3
 8007818:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	ee07 3a90 	vmov	s15, r3
 8007822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800782a:	4b7b      	ldr	r3, [pc, #492]	@ (8007a18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800782c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800782e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007832:	ee07 3a90 	vmov	s15, r3
 8007836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800783a:	ed97 6a03 	vldr	s12, [r7, #12]
 800783e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007a20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800784a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800784e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007856:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800785a:	e087      	b.n	800796c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	ee07 3a90 	vmov	s15, r3
 8007862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007866:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007a24 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800786a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800786e:	4b6a      	ldr	r3, [pc, #424]	@ (8007a18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007876:	ee07 3a90 	vmov	s15, r3
 800787a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800787e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007882:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007a20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800788a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800788e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800789a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800789e:	e065      	b.n	800796c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	ee07 3a90 	vmov	s15, r3
 80078a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078aa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007a28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80078ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078b2:	4b59      	ldr	r3, [pc, #356]	@ (8007a18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078ba:	ee07 3a90 	vmov	s15, r3
 80078be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80078c6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007a20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80078ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078e2:	e043      	b.n	800796c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	ee07 3a90 	vmov	s15, r3
 80078ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078ee:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007a2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80078f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078f6:	4b48      	ldr	r3, [pc, #288]	@ (8007a18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078fe:	ee07 3a90 	vmov	s15, r3
 8007902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007906:	ed97 6a03 	vldr	s12, [r7, #12]
 800790a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007a20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800790e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007916:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800791a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800791e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007922:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007926:	e021      	b.n	800796c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	ee07 3a90 	vmov	s15, r3
 800792e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007932:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007a28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800793a:	4b37      	ldr	r3, [pc, #220]	@ (8007a18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800793c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800793e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007942:	ee07 3a90 	vmov	s15, r3
 8007946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800794a:	ed97 6a03 	vldr	s12, [r7, #12]
 800794e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007a20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800795a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800795e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007966:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800796a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800796c:	4b2a      	ldr	r3, [pc, #168]	@ (8007a18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800796e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007970:	0a5b      	lsrs	r3, r3, #9
 8007972:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007976:	ee07 3a90 	vmov	s15, r3
 800797a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800797e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007982:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007986:	edd7 6a07 	vldr	s13, [r7, #28]
 800798a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800798e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007992:	ee17 2a90 	vmov	r2, s15
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800799a:	4b1f      	ldr	r3, [pc, #124]	@ (8007a18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800799c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800799e:	0c1b      	lsrs	r3, r3, #16
 80079a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079a4:	ee07 3a90 	vmov	s15, r3
 80079a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80079b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80079b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079c0:	ee17 2a90 	vmov	r2, s15
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80079c8:	4b13      	ldr	r3, [pc, #76]	@ (8007a18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079cc:	0e1b      	lsrs	r3, r3, #24
 80079ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079d2:	ee07 3a90 	vmov	s15, r3
 80079d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80079de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80079e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079ee:	ee17 2a90 	vmov	r2, s15
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80079f6:	e008      	b.n	8007a0a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	609a      	str	r2, [r3, #8]
}
 8007a0a:	bf00      	nop
 8007a0c:	3724      	adds	r7, #36	@ 0x24
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr
 8007a16:	bf00      	nop
 8007a18:	58024400 	.word	0x58024400
 8007a1c:	03d09000 	.word	0x03d09000
 8007a20:	46000000 	.word	0x46000000
 8007a24:	4c742400 	.word	0x4c742400
 8007a28:	4a742400 	.word	0x4a742400
 8007a2c:	4af42400 	.word	0x4af42400

08007a30 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007a3e:	4b53      	ldr	r3, [pc, #332]	@ (8007b8c <RCCEx_PLL2_Config+0x15c>)
 8007a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a42:	f003 0303 	and.w	r3, r3, #3
 8007a46:	2b03      	cmp	r3, #3
 8007a48:	d101      	bne.n	8007a4e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	e099      	b.n	8007b82 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007a4e:	4b4f      	ldr	r3, [pc, #316]	@ (8007b8c <RCCEx_PLL2_Config+0x15c>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a4e      	ldr	r2, [pc, #312]	@ (8007b8c <RCCEx_PLL2_Config+0x15c>)
 8007a54:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007a58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a5a:	f7fa f859 	bl	8001b10 <HAL_GetTick>
 8007a5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007a60:	e008      	b.n	8007a74 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007a62:	f7fa f855 	bl	8001b10 <HAL_GetTick>
 8007a66:	4602      	mov	r2, r0
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	1ad3      	subs	r3, r2, r3
 8007a6c:	2b02      	cmp	r3, #2
 8007a6e:	d901      	bls.n	8007a74 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007a70:	2303      	movs	r3, #3
 8007a72:	e086      	b.n	8007b82 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007a74:	4b45      	ldr	r3, [pc, #276]	@ (8007b8c <RCCEx_PLL2_Config+0x15c>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d1f0      	bne.n	8007a62 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007a80:	4b42      	ldr	r3, [pc, #264]	@ (8007b8c <RCCEx_PLL2_Config+0x15c>)
 8007a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a84:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	031b      	lsls	r3, r3, #12
 8007a8e:	493f      	ldr	r1, [pc, #252]	@ (8007b8c <RCCEx_PLL2_Config+0x15c>)
 8007a90:	4313      	orrs	r3, r2
 8007a92:	628b      	str	r3, [r1, #40]	@ 0x28
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	3b01      	subs	r3, #1
 8007a9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	3b01      	subs	r3, #1
 8007aa4:	025b      	lsls	r3, r3, #9
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	431a      	orrs	r2, r3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	68db      	ldr	r3, [r3, #12]
 8007aae:	3b01      	subs	r3, #1
 8007ab0:	041b      	lsls	r3, r3, #16
 8007ab2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007ab6:	431a      	orrs	r2, r3
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	691b      	ldr	r3, [r3, #16]
 8007abc:	3b01      	subs	r3, #1
 8007abe:	061b      	lsls	r3, r3, #24
 8007ac0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007ac4:	4931      	ldr	r1, [pc, #196]	@ (8007b8c <RCCEx_PLL2_Config+0x15c>)
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007aca:	4b30      	ldr	r3, [pc, #192]	@ (8007b8c <RCCEx_PLL2_Config+0x15c>)
 8007acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ace:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	695b      	ldr	r3, [r3, #20]
 8007ad6:	492d      	ldr	r1, [pc, #180]	@ (8007b8c <RCCEx_PLL2_Config+0x15c>)
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007adc:	4b2b      	ldr	r3, [pc, #172]	@ (8007b8c <RCCEx_PLL2_Config+0x15c>)
 8007ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ae0:	f023 0220 	bic.w	r2, r3, #32
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	699b      	ldr	r3, [r3, #24]
 8007ae8:	4928      	ldr	r1, [pc, #160]	@ (8007b8c <RCCEx_PLL2_Config+0x15c>)
 8007aea:	4313      	orrs	r3, r2
 8007aec:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007aee:	4b27      	ldr	r3, [pc, #156]	@ (8007b8c <RCCEx_PLL2_Config+0x15c>)
 8007af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007af2:	4a26      	ldr	r2, [pc, #152]	@ (8007b8c <RCCEx_PLL2_Config+0x15c>)
 8007af4:	f023 0310 	bic.w	r3, r3, #16
 8007af8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007afa:	4b24      	ldr	r3, [pc, #144]	@ (8007b8c <RCCEx_PLL2_Config+0x15c>)
 8007afc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007afe:	4b24      	ldr	r3, [pc, #144]	@ (8007b90 <RCCEx_PLL2_Config+0x160>)
 8007b00:	4013      	ands	r3, r2
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	69d2      	ldr	r2, [r2, #28]
 8007b06:	00d2      	lsls	r2, r2, #3
 8007b08:	4920      	ldr	r1, [pc, #128]	@ (8007b8c <RCCEx_PLL2_Config+0x15c>)
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007b0e:	4b1f      	ldr	r3, [pc, #124]	@ (8007b8c <RCCEx_PLL2_Config+0x15c>)
 8007b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b12:	4a1e      	ldr	r2, [pc, #120]	@ (8007b8c <RCCEx_PLL2_Config+0x15c>)
 8007b14:	f043 0310 	orr.w	r3, r3, #16
 8007b18:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d106      	bne.n	8007b2e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007b20:	4b1a      	ldr	r3, [pc, #104]	@ (8007b8c <RCCEx_PLL2_Config+0x15c>)
 8007b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b24:	4a19      	ldr	r2, [pc, #100]	@ (8007b8c <RCCEx_PLL2_Config+0x15c>)
 8007b26:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007b2a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007b2c:	e00f      	b.n	8007b4e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d106      	bne.n	8007b42 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007b34:	4b15      	ldr	r3, [pc, #84]	@ (8007b8c <RCCEx_PLL2_Config+0x15c>)
 8007b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b38:	4a14      	ldr	r2, [pc, #80]	@ (8007b8c <RCCEx_PLL2_Config+0x15c>)
 8007b3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b3e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007b40:	e005      	b.n	8007b4e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007b42:	4b12      	ldr	r3, [pc, #72]	@ (8007b8c <RCCEx_PLL2_Config+0x15c>)
 8007b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b46:	4a11      	ldr	r2, [pc, #68]	@ (8007b8c <RCCEx_PLL2_Config+0x15c>)
 8007b48:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007b4c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007b4e:	4b0f      	ldr	r3, [pc, #60]	@ (8007b8c <RCCEx_PLL2_Config+0x15c>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a0e      	ldr	r2, [pc, #56]	@ (8007b8c <RCCEx_PLL2_Config+0x15c>)
 8007b54:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007b58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b5a:	f7f9 ffd9 	bl	8001b10 <HAL_GetTick>
 8007b5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007b60:	e008      	b.n	8007b74 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007b62:	f7f9 ffd5 	bl	8001b10 <HAL_GetTick>
 8007b66:	4602      	mov	r2, r0
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	1ad3      	subs	r3, r2, r3
 8007b6c:	2b02      	cmp	r3, #2
 8007b6e:	d901      	bls.n	8007b74 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007b70:	2303      	movs	r3, #3
 8007b72:	e006      	b.n	8007b82 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007b74:	4b05      	ldr	r3, [pc, #20]	@ (8007b8c <RCCEx_PLL2_Config+0x15c>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d0f0      	beq.n	8007b62 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3710      	adds	r7, #16
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	bf00      	nop
 8007b8c:	58024400 	.word	0x58024400
 8007b90:	ffff0007 	.word	0xffff0007

08007b94 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007ba2:	4b53      	ldr	r3, [pc, #332]	@ (8007cf0 <RCCEx_PLL3_Config+0x15c>)
 8007ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ba6:	f003 0303 	and.w	r3, r3, #3
 8007baa:	2b03      	cmp	r3, #3
 8007bac:	d101      	bne.n	8007bb2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e099      	b.n	8007ce6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007bb2:	4b4f      	ldr	r3, [pc, #316]	@ (8007cf0 <RCCEx_PLL3_Config+0x15c>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a4e      	ldr	r2, [pc, #312]	@ (8007cf0 <RCCEx_PLL3_Config+0x15c>)
 8007bb8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007bbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bbe:	f7f9 ffa7 	bl	8001b10 <HAL_GetTick>
 8007bc2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007bc4:	e008      	b.n	8007bd8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007bc6:	f7f9 ffa3 	bl	8001b10 <HAL_GetTick>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	1ad3      	subs	r3, r2, r3
 8007bd0:	2b02      	cmp	r3, #2
 8007bd2:	d901      	bls.n	8007bd8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007bd4:	2303      	movs	r3, #3
 8007bd6:	e086      	b.n	8007ce6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007bd8:	4b45      	ldr	r3, [pc, #276]	@ (8007cf0 <RCCEx_PLL3_Config+0x15c>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d1f0      	bne.n	8007bc6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007be4:	4b42      	ldr	r3, [pc, #264]	@ (8007cf0 <RCCEx_PLL3_Config+0x15c>)
 8007be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007be8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	051b      	lsls	r3, r3, #20
 8007bf2:	493f      	ldr	r1, [pc, #252]	@ (8007cf0 <RCCEx_PLL3_Config+0x15c>)
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	628b      	str	r3, [r1, #40]	@ 0x28
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	3b01      	subs	r3, #1
 8007bfe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	3b01      	subs	r3, #1
 8007c08:	025b      	lsls	r3, r3, #9
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	431a      	orrs	r2, r3
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	68db      	ldr	r3, [r3, #12]
 8007c12:	3b01      	subs	r3, #1
 8007c14:	041b      	lsls	r3, r3, #16
 8007c16:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007c1a:	431a      	orrs	r2, r3
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	691b      	ldr	r3, [r3, #16]
 8007c20:	3b01      	subs	r3, #1
 8007c22:	061b      	lsls	r3, r3, #24
 8007c24:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007c28:	4931      	ldr	r1, [pc, #196]	@ (8007cf0 <RCCEx_PLL3_Config+0x15c>)
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007c2e:	4b30      	ldr	r3, [pc, #192]	@ (8007cf0 <RCCEx_PLL3_Config+0x15c>)
 8007c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c32:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	695b      	ldr	r3, [r3, #20]
 8007c3a:	492d      	ldr	r1, [pc, #180]	@ (8007cf0 <RCCEx_PLL3_Config+0x15c>)
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007c40:	4b2b      	ldr	r3, [pc, #172]	@ (8007cf0 <RCCEx_PLL3_Config+0x15c>)
 8007c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c44:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	699b      	ldr	r3, [r3, #24]
 8007c4c:	4928      	ldr	r1, [pc, #160]	@ (8007cf0 <RCCEx_PLL3_Config+0x15c>)
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007c52:	4b27      	ldr	r3, [pc, #156]	@ (8007cf0 <RCCEx_PLL3_Config+0x15c>)
 8007c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c56:	4a26      	ldr	r2, [pc, #152]	@ (8007cf0 <RCCEx_PLL3_Config+0x15c>)
 8007c58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007c5e:	4b24      	ldr	r3, [pc, #144]	@ (8007cf0 <RCCEx_PLL3_Config+0x15c>)
 8007c60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c62:	4b24      	ldr	r3, [pc, #144]	@ (8007cf4 <RCCEx_PLL3_Config+0x160>)
 8007c64:	4013      	ands	r3, r2
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	69d2      	ldr	r2, [r2, #28]
 8007c6a:	00d2      	lsls	r2, r2, #3
 8007c6c:	4920      	ldr	r1, [pc, #128]	@ (8007cf0 <RCCEx_PLL3_Config+0x15c>)
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007c72:	4b1f      	ldr	r3, [pc, #124]	@ (8007cf0 <RCCEx_PLL3_Config+0x15c>)
 8007c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c76:	4a1e      	ldr	r2, [pc, #120]	@ (8007cf0 <RCCEx_PLL3_Config+0x15c>)
 8007c78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d106      	bne.n	8007c92 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007c84:	4b1a      	ldr	r3, [pc, #104]	@ (8007cf0 <RCCEx_PLL3_Config+0x15c>)
 8007c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c88:	4a19      	ldr	r2, [pc, #100]	@ (8007cf0 <RCCEx_PLL3_Config+0x15c>)
 8007c8a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007c8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007c90:	e00f      	b.n	8007cb2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d106      	bne.n	8007ca6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007c98:	4b15      	ldr	r3, [pc, #84]	@ (8007cf0 <RCCEx_PLL3_Config+0x15c>)
 8007c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c9c:	4a14      	ldr	r2, [pc, #80]	@ (8007cf0 <RCCEx_PLL3_Config+0x15c>)
 8007c9e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007ca2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007ca4:	e005      	b.n	8007cb2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007ca6:	4b12      	ldr	r3, [pc, #72]	@ (8007cf0 <RCCEx_PLL3_Config+0x15c>)
 8007ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007caa:	4a11      	ldr	r2, [pc, #68]	@ (8007cf0 <RCCEx_PLL3_Config+0x15c>)
 8007cac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007cb0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8007cf0 <RCCEx_PLL3_Config+0x15c>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a0e      	ldr	r2, [pc, #56]	@ (8007cf0 <RCCEx_PLL3_Config+0x15c>)
 8007cb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007cbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cbe:	f7f9 ff27 	bl	8001b10 <HAL_GetTick>
 8007cc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007cc4:	e008      	b.n	8007cd8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007cc6:	f7f9 ff23 	bl	8001b10 <HAL_GetTick>
 8007cca:	4602      	mov	r2, r0
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	1ad3      	subs	r3, r2, r3
 8007cd0:	2b02      	cmp	r3, #2
 8007cd2:	d901      	bls.n	8007cd8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007cd4:	2303      	movs	r3, #3
 8007cd6:	e006      	b.n	8007ce6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007cd8:	4b05      	ldr	r3, [pc, #20]	@ (8007cf0 <RCCEx_PLL3_Config+0x15c>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d0f0      	beq.n	8007cc6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3710      	adds	r7, #16
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
 8007cee:	bf00      	nop
 8007cf0:	58024400 	.word	0x58024400
 8007cf4:	ffff0007 	.word	0xffff0007

08007cf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d101      	bne.n	8007d0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	e049      	b.n	8007d9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d106      	bne.n	8007d24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 f841 	bl	8007da6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2202      	movs	r2, #2
 8007d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681a      	ldr	r2, [r3, #0]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	3304      	adds	r3, #4
 8007d34:	4619      	mov	r1, r3
 8007d36:	4610      	mov	r0, r2
 8007d38:	f000 f9f6 	bl	8008128 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2201      	movs	r2, #1
 8007d48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2201      	movs	r2, #1
 8007d58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2201      	movs	r2, #1
 8007d68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2201      	movs	r2, #1
 8007d78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2201      	movs	r2, #1
 8007d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007d9c:	2300      	movs	r3, #0
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3708      	adds	r7, #8
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007da6:	b480      	push	{r7}
 8007da8:	b083      	sub	sp, #12
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007dae:	bf00      	nop
 8007db0:	370c      	adds	r7, #12
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr
	...

08007dbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b085      	sub	sp, #20
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d001      	beq.n	8007dd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	e05e      	b.n	8007e92 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2202      	movs	r2, #2
 8007dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	68da      	ldr	r2, [r3, #12]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f042 0201 	orr.w	r2, r2, #1
 8007dea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a2b      	ldr	r2, [pc, #172]	@ (8007ea0 <HAL_TIM_Base_Start_IT+0xe4>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d02c      	beq.n	8007e50 <HAL_TIM_Base_Start_IT+0x94>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007dfe:	d027      	beq.n	8007e50 <HAL_TIM_Base_Start_IT+0x94>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a27      	ldr	r2, [pc, #156]	@ (8007ea4 <HAL_TIM_Base_Start_IT+0xe8>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d022      	beq.n	8007e50 <HAL_TIM_Base_Start_IT+0x94>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a26      	ldr	r2, [pc, #152]	@ (8007ea8 <HAL_TIM_Base_Start_IT+0xec>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d01d      	beq.n	8007e50 <HAL_TIM_Base_Start_IT+0x94>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a24      	ldr	r2, [pc, #144]	@ (8007eac <HAL_TIM_Base_Start_IT+0xf0>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d018      	beq.n	8007e50 <HAL_TIM_Base_Start_IT+0x94>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a23      	ldr	r2, [pc, #140]	@ (8007eb0 <HAL_TIM_Base_Start_IT+0xf4>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d013      	beq.n	8007e50 <HAL_TIM_Base_Start_IT+0x94>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a21      	ldr	r2, [pc, #132]	@ (8007eb4 <HAL_TIM_Base_Start_IT+0xf8>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d00e      	beq.n	8007e50 <HAL_TIM_Base_Start_IT+0x94>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a20      	ldr	r2, [pc, #128]	@ (8007eb8 <HAL_TIM_Base_Start_IT+0xfc>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d009      	beq.n	8007e50 <HAL_TIM_Base_Start_IT+0x94>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a1e      	ldr	r2, [pc, #120]	@ (8007ebc <HAL_TIM_Base_Start_IT+0x100>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d004      	beq.n	8007e50 <HAL_TIM_Base_Start_IT+0x94>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a1d      	ldr	r2, [pc, #116]	@ (8007ec0 <HAL_TIM_Base_Start_IT+0x104>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d115      	bne.n	8007e7c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	689a      	ldr	r2, [r3, #8]
 8007e56:	4b1b      	ldr	r3, [pc, #108]	@ (8007ec4 <HAL_TIM_Base_Start_IT+0x108>)
 8007e58:	4013      	ands	r3, r2
 8007e5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2b06      	cmp	r3, #6
 8007e60:	d015      	beq.n	8007e8e <HAL_TIM_Base_Start_IT+0xd2>
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e68:	d011      	beq.n	8007e8e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f042 0201 	orr.w	r2, r2, #1
 8007e78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e7a:	e008      	b.n	8007e8e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f042 0201 	orr.w	r2, r2, #1
 8007e8a:	601a      	str	r2, [r3, #0]
 8007e8c:	e000      	b.n	8007e90 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3714      	adds	r7, #20
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	40010000 	.word	0x40010000
 8007ea4:	40000400 	.word	0x40000400
 8007ea8:	40000800 	.word	0x40000800
 8007eac:	40000c00 	.word	0x40000c00
 8007eb0:	40010400 	.word	0x40010400
 8007eb4:	40001800 	.word	0x40001800
 8007eb8:	40014000 	.word	0x40014000
 8007ebc:	4000e000 	.word	0x4000e000
 8007ec0:	4000e400 	.word	0x4000e400
 8007ec4:	00010007 	.word	0x00010007

08007ec8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	68db      	ldr	r3, [r3, #12]
 8007ed6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	691b      	ldr	r3, [r3, #16]
 8007ede:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	f003 0302 	and.w	r3, r3, #2
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d020      	beq.n	8007f2c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f003 0302 	and.w	r3, r3, #2
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d01b      	beq.n	8007f2c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f06f 0202 	mvn.w	r2, #2
 8007efc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2201      	movs	r2, #1
 8007f02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	699b      	ldr	r3, [r3, #24]
 8007f0a:	f003 0303 	and.w	r3, r3, #3
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d003      	beq.n	8007f1a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 f8e9 	bl	80080ea <HAL_TIM_IC_CaptureCallback>
 8007f18:	e005      	b.n	8007f26 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 f8db 	bl	80080d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 f8ec 	bl	80080fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	f003 0304 	and.w	r3, r3, #4
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d020      	beq.n	8007f78 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f003 0304 	and.w	r3, r3, #4
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d01b      	beq.n	8007f78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f06f 0204 	mvn.w	r2, #4
 8007f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2202      	movs	r2, #2
 8007f4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	699b      	ldr	r3, [r3, #24]
 8007f56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d003      	beq.n	8007f66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 f8c3 	bl	80080ea <HAL_TIM_IC_CaptureCallback>
 8007f64:	e005      	b.n	8007f72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 f8b5 	bl	80080d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 f8c6 	bl	80080fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2200      	movs	r2, #0
 8007f76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	f003 0308 	and.w	r3, r3, #8
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d020      	beq.n	8007fc4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	f003 0308 	and.w	r3, r3, #8
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d01b      	beq.n	8007fc4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f06f 0208 	mvn.w	r2, #8
 8007f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2204      	movs	r2, #4
 8007f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	69db      	ldr	r3, [r3, #28]
 8007fa2:	f003 0303 	and.w	r3, r3, #3
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d003      	beq.n	8007fb2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 f89d 	bl	80080ea <HAL_TIM_IC_CaptureCallback>
 8007fb0:	e005      	b.n	8007fbe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 f88f 	bl	80080d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f000 f8a0 	bl	80080fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	f003 0310 	and.w	r3, r3, #16
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d020      	beq.n	8008010 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f003 0310 	and.w	r3, r3, #16
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d01b      	beq.n	8008010 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f06f 0210 	mvn.w	r2, #16
 8007fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2208      	movs	r2, #8
 8007fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	69db      	ldr	r3, [r3, #28]
 8007fee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d003      	beq.n	8007ffe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 f877 	bl	80080ea <HAL_TIM_IC_CaptureCallback>
 8007ffc:	e005      	b.n	800800a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 f869 	bl	80080d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 f87a 	bl	80080fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	f003 0301 	and.w	r3, r3, #1
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00c      	beq.n	8008034 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f003 0301 	and.w	r3, r3, #1
 8008020:	2b00      	cmp	r3, #0
 8008022:	d007      	beq.n	8008034 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f06f 0201 	mvn.w	r2, #1
 800802c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f7f8 ffca 	bl	8000fc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800803a:	2b00      	cmp	r3, #0
 800803c:	d104      	bne.n	8008048 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008044:	2b00      	cmp	r3, #0
 8008046:	d00c      	beq.n	8008062 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800804e:	2b00      	cmp	r3, #0
 8008050:	d007      	beq.n	8008062 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800805a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 f91f 	bl	80082a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008068:	2b00      	cmp	r3, #0
 800806a:	d00c      	beq.n	8008086 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008072:	2b00      	cmp	r3, #0
 8008074:	d007      	beq.n	8008086 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800807e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 f917 	bl	80082b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800808c:	2b00      	cmp	r3, #0
 800808e:	d00c      	beq.n	80080aa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008096:	2b00      	cmp	r3, #0
 8008098:	d007      	beq.n	80080aa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80080a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 f834 	bl	8008112 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	f003 0320 	and.w	r3, r3, #32
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d00c      	beq.n	80080ce <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f003 0320 	and.w	r3, r3, #32
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d007      	beq.n	80080ce <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f06f 0220 	mvn.w	r2, #32
 80080c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f000 f8df 	bl	800828c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80080ce:	bf00      	nop
 80080d0:	3710      	adds	r7, #16
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}

080080d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80080d6:	b480      	push	{r7}
 80080d8:	b083      	sub	sp, #12
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80080de:	bf00      	nop
 80080e0:	370c      	adds	r7, #12
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr

080080ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80080ea:	b480      	push	{r7}
 80080ec:	b083      	sub	sp, #12
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80080f2:	bf00      	nop
 80080f4:	370c      	adds	r7, #12
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr

080080fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80080fe:	b480      	push	{r7}
 8008100:	b083      	sub	sp, #12
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008106:	bf00      	nop
 8008108:	370c      	adds	r7, #12
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr

08008112 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008112:	b480      	push	{r7}
 8008114:	b083      	sub	sp, #12
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800811a:	bf00      	nop
 800811c:	370c      	adds	r7, #12
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr
	...

08008128 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008128:	b480      	push	{r7}
 800812a:	b085      	sub	sp, #20
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	4a4a      	ldr	r2, [pc, #296]	@ (8008264 <TIM_Base_SetConfig+0x13c>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d013      	beq.n	8008168 <TIM_Base_SetConfig+0x40>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008146:	d00f      	beq.n	8008168 <TIM_Base_SetConfig+0x40>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	4a47      	ldr	r2, [pc, #284]	@ (8008268 <TIM_Base_SetConfig+0x140>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d00b      	beq.n	8008168 <TIM_Base_SetConfig+0x40>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	4a46      	ldr	r2, [pc, #280]	@ (800826c <TIM_Base_SetConfig+0x144>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d007      	beq.n	8008168 <TIM_Base_SetConfig+0x40>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	4a45      	ldr	r2, [pc, #276]	@ (8008270 <TIM_Base_SetConfig+0x148>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d003      	beq.n	8008168 <TIM_Base_SetConfig+0x40>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	4a44      	ldr	r2, [pc, #272]	@ (8008274 <TIM_Base_SetConfig+0x14c>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d108      	bne.n	800817a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800816e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	68fa      	ldr	r2, [r7, #12]
 8008176:	4313      	orrs	r3, r2
 8008178:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	4a39      	ldr	r2, [pc, #228]	@ (8008264 <TIM_Base_SetConfig+0x13c>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d027      	beq.n	80081d2 <TIM_Base_SetConfig+0xaa>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008188:	d023      	beq.n	80081d2 <TIM_Base_SetConfig+0xaa>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	4a36      	ldr	r2, [pc, #216]	@ (8008268 <TIM_Base_SetConfig+0x140>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d01f      	beq.n	80081d2 <TIM_Base_SetConfig+0xaa>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	4a35      	ldr	r2, [pc, #212]	@ (800826c <TIM_Base_SetConfig+0x144>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d01b      	beq.n	80081d2 <TIM_Base_SetConfig+0xaa>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	4a34      	ldr	r2, [pc, #208]	@ (8008270 <TIM_Base_SetConfig+0x148>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d017      	beq.n	80081d2 <TIM_Base_SetConfig+0xaa>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	4a33      	ldr	r2, [pc, #204]	@ (8008274 <TIM_Base_SetConfig+0x14c>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d013      	beq.n	80081d2 <TIM_Base_SetConfig+0xaa>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	4a32      	ldr	r2, [pc, #200]	@ (8008278 <TIM_Base_SetConfig+0x150>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d00f      	beq.n	80081d2 <TIM_Base_SetConfig+0xaa>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	4a31      	ldr	r2, [pc, #196]	@ (800827c <TIM_Base_SetConfig+0x154>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d00b      	beq.n	80081d2 <TIM_Base_SetConfig+0xaa>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	4a30      	ldr	r2, [pc, #192]	@ (8008280 <TIM_Base_SetConfig+0x158>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d007      	beq.n	80081d2 <TIM_Base_SetConfig+0xaa>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	4a2f      	ldr	r2, [pc, #188]	@ (8008284 <TIM_Base_SetConfig+0x15c>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d003      	beq.n	80081d2 <TIM_Base_SetConfig+0xaa>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	4a2e      	ldr	r2, [pc, #184]	@ (8008288 <TIM_Base_SetConfig+0x160>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d108      	bne.n	80081e4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80081d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	68db      	ldr	r3, [r3, #12]
 80081de:	68fa      	ldr	r2, [r7, #12]
 80081e0:	4313      	orrs	r3, r2
 80081e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	695b      	ldr	r3, [r3, #20]
 80081ee:	4313      	orrs	r3, r2
 80081f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	68fa      	ldr	r2, [r7, #12]
 80081f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	689a      	ldr	r2, [r3, #8]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4a16      	ldr	r2, [pc, #88]	@ (8008264 <TIM_Base_SetConfig+0x13c>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d00f      	beq.n	8008230 <TIM_Base_SetConfig+0x108>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	4a18      	ldr	r2, [pc, #96]	@ (8008274 <TIM_Base_SetConfig+0x14c>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d00b      	beq.n	8008230 <TIM_Base_SetConfig+0x108>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	4a17      	ldr	r2, [pc, #92]	@ (8008278 <TIM_Base_SetConfig+0x150>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d007      	beq.n	8008230 <TIM_Base_SetConfig+0x108>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	4a16      	ldr	r2, [pc, #88]	@ (800827c <TIM_Base_SetConfig+0x154>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d003      	beq.n	8008230 <TIM_Base_SetConfig+0x108>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	4a15      	ldr	r2, [pc, #84]	@ (8008280 <TIM_Base_SetConfig+0x158>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d103      	bne.n	8008238 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	691a      	ldr	r2, [r3, #16]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2201      	movs	r2, #1
 800823c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	691b      	ldr	r3, [r3, #16]
 8008242:	f003 0301 	and.w	r3, r3, #1
 8008246:	2b01      	cmp	r3, #1
 8008248:	d105      	bne.n	8008256 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	691b      	ldr	r3, [r3, #16]
 800824e:	f023 0201 	bic.w	r2, r3, #1
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	611a      	str	r2, [r3, #16]
  }
}
 8008256:	bf00      	nop
 8008258:	3714      	adds	r7, #20
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr
 8008262:	bf00      	nop
 8008264:	40010000 	.word	0x40010000
 8008268:	40000400 	.word	0x40000400
 800826c:	40000800 	.word	0x40000800
 8008270:	40000c00 	.word	0x40000c00
 8008274:	40010400 	.word	0x40010400
 8008278:	40014000 	.word	0x40014000
 800827c:	40014400 	.word	0x40014400
 8008280:	40014800 	.word	0x40014800
 8008284:	4000e000 	.word	0x4000e000
 8008288:	4000e400 	.word	0x4000e400

0800828c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800828c:	b480      	push	{r7}
 800828e:	b083      	sub	sp, #12
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008294:	bf00      	nop
 8008296:	370c      	adds	r7, #12
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr

080082a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b083      	sub	sp, #12
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80082a8:	bf00      	nop
 80082aa:	370c      	adds	r7, #12
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr

080082b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b083      	sub	sp, #12
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80082bc:	bf00      	nop
 80082be:	370c      	adds	r7, #12
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr

080082c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d101      	bne.n	80082da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80082d6:	2301      	movs	r3, #1
 80082d8:	e042      	b.n	8008360 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d106      	bne.n	80082f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2200      	movs	r2, #0
 80082e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f7f9 f95b 	bl	80015a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2224      	movs	r2, #36	@ 0x24
 80082f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f022 0201 	bic.w	r2, r2, #1
 8008308:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800830e:	2b00      	cmp	r3, #0
 8008310:	d002      	beq.n	8008318 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f001 fafc 	bl	8009910 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f000 fc8d 	bl	8008c38 <UART_SetConfig>
 800831e:	4603      	mov	r3, r0
 8008320:	2b01      	cmp	r3, #1
 8008322:	d101      	bne.n	8008328 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008324:	2301      	movs	r3, #1
 8008326:	e01b      	b.n	8008360 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	685a      	ldr	r2, [r3, #4]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008336:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	689a      	ldr	r2, [r3, #8]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008346:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f042 0201 	orr.w	r2, r2, #1
 8008356:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f001 fb7b 	bl	8009a54 <UART_CheckIdleState>
 800835e:	4603      	mov	r3, r0
}
 8008360:	4618      	mov	r0, r3
 8008362:	3708      	adds	r7, #8
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b08a      	sub	sp, #40	@ 0x28
 800836c:	af02      	add	r7, sp, #8
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	60b9      	str	r1, [r7, #8]
 8008372:	603b      	str	r3, [r7, #0]
 8008374:	4613      	mov	r3, r2
 8008376:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800837e:	2b20      	cmp	r3, #32
 8008380:	d17b      	bne.n	800847a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d002      	beq.n	800838e <HAL_UART_Transmit+0x26>
 8008388:	88fb      	ldrh	r3, [r7, #6]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d101      	bne.n	8008392 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800838e:	2301      	movs	r3, #1
 8008390:	e074      	b.n	800847c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2200      	movs	r2, #0
 8008396:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2221      	movs	r2, #33	@ 0x21
 800839e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80083a2:	f7f9 fbb5 	bl	8001b10 <HAL_GetTick>
 80083a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	88fa      	ldrh	r2, [r7, #6]
 80083ac:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	88fa      	ldrh	r2, [r7, #6]
 80083b4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083c0:	d108      	bne.n	80083d4 <HAL_UART_Transmit+0x6c>
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	691b      	ldr	r3, [r3, #16]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d104      	bne.n	80083d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80083ca:	2300      	movs	r3, #0
 80083cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	61bb      	str	r3, [r7, #24]
 80083d2:	e003      	b.n	80083dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80083d8:	2300      	movs	r3, #0
 80083da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80083dc:	e030      	b.n	8008440 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	9300      	str	r3, [sp, #0]
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	2200      	movs	r2, #0
 80083e6:	2180      	movs	r1, #128	@ 0x80
 80083e8:	68f8      	ldr	r0, [r7, #12]
 80083ea:	f001 fbdd 	bl	8009ba8 <UART_WaitOnFlagUntilTimeout>
 80083ee:	4603      	mov	r3, r0
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d005      	beq.n	8008400 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2220      	movs	r2, #32
 80083f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80083fc:	2303      	movs	r3, #3
 80083fe:	e03d      	b.n	800847c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008400:	69fb      	ldr	r3, [r7, #28]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d10b      	bne.n	800841e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008406:	69bb      	ldr	r3, [r7, #24]
 8008408:	881b      	ldrh	r3, [r3, #0]
 800840a:	461a      	mov	r2, r3
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008414:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008416:	69bb      	ldr	r3, [r7, #24]
 8008418:	3302      	adds	r3, #2
 800841a:	61bb      	str	r3, [r7, #24]
 800841c:	e007      	b.n	800842e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800841e:	69fb      	ldr	r3, [r7, #28]
 8008420:	781a      	ldrb	r2, [r3, #0]
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008428:	69fb      	ldr	r3, [r7, #28]
 800842a:	3301      	adds	r3, #1
 800842c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008434:	b29b      	uxth	r3, r3
 8008436:	3b01      	subs	r3, #1
 8008438:	b29a      	uxth	r2, r3
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008446:	b29b      	uxth	r3, r3
 8008448:	2b00      	cmp	r3, #0
 800844a:	d1c8      	bne.n	80083de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	9300      	str	r3, [sp, #0]
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	2200      	movs	r2, #0
 8008454:	2140      	movs	r1, #64	@ 0x40
 8008456:	68f8      	ldr	r0, [r7, #12]
 8008458:	f001 fba6 	bl	8009ba8 <UART_WaitOnFlagUntilTimeout>
 800845c:	4603      	mov	r3, r0
 800845e:	2b00      	cmp	r3, #0
 8008460:	d005      	beq.n	800846e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2220      	movs	r2, #32
 8008466:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800846a:	2303      	movs	r3, #3
 800846c:	e006      	b.n	800847c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2220      	movs	r2, #32
 8008472:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008476:	2300      	movs	r3, #0
 8008478:	e000      	b.n	800847c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800847a:	2302      	movs	r3, #2
  }
}
 800847c:	4618      	mov	r0, r3
 800847e:	3720      	adds	r7, #32
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b0ba      	sub	sp, #232	@ 0xe8
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	69db      	ldr	r3, [r3, #28]
 8008492:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	689b      	ldr	r3, [r3, #8]
 80084a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80084aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80084ae:	f640 030f 	movw	r3, #2063	@ 0x80f
 80084b2:	4013      	ands	r3, r2
 80084b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80084b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d11b      	bne.n	80084f8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80084c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084c4:	f003 0320 	and.w	r3, r3, #32
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d015      	beq.n	80084f8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80084cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084d0:	f003 0320 	and.w	r3, r3, #32
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d105      	bne.n	80084e4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80084d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80084dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d009      	beq.n	80084f8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	f000 8377 	beq.w	8008bdc <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	4798      	blx	r3
      }
      return;
 80084f6:	e371      	b.n	8008bdc <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80084f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	f000 8123 	beq.w	8008748 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008502:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008506:	4b8d      	ldr	r3, [pc, #564]	@ (800873c <HAL_UART_IRQHandler+0x2b8>)
 8008508:	4013      	ands	r3, r2
 800850a:	2b00      	cmp	r3, #0
 800850c:	d106      	bne.n	800851c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800850e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008512:	4b8b      	ldr	r3, [pc, #556]	@ (8008740 <HAL_UART_IRQHandler+0x2bc>)
 8008514:	4013      	ands	r3, r2
 8008516:	2b00      	cmp	r3, #0
 8008518:	f000 8116 	beq.w	8008748 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800851c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008520:	f003 0301 	and.w	r3, r3, #1
 8008524:	2b00      	cmp	r3, #0
 8008526:	d011      	beq.n	800854c <HAL_UART_IRQHandler+0xc8>
 8008528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800852c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008530:	2b00      	cmp	r3, #0
 8008532:	d00b      	beq.n	800854c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	2201      	movs	r2, #1
 800853a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008542:	f043 0201 	orr.w	r2, r3, #1
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800854c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008550:	f003 0302 	and.w	r3, r3, #2
 8008554:	2b00      	cmp	r3, #0
 8008556:	d011      	beq.n	800857c <HAL_UART_IRQHandler+0xf8>
 8008558:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800855c:	f003 0301 	and.w	r3, r3, #1
 8008560:	2b00      	cmp	r3, #0
 8008562:	d00b      	beq.n	800857c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	2202      	movs	r2, #2
 800856a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008572:	f043 0204 	orr.w	r2, r3, #4
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800857c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008580:	f003 0304 	and.w	r3, r3, #4
 8008584:	2b00      	cmp	r3, #0
 8008586:	d011      	beq.n	80085ac <HAL_UART_IRQHandler+0x128>
 8008588:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800858c:	f003 0301 	and.w	r3, r3, #1
 8008590:	2b00      	cmp	r3, #0
 8008592:	d00b      	beq.n	80085ac <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	2204      	movs	r2, #4
 800859a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085a2:	f043 0202 	orr.w	r2, r3, #2
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80085ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085b0:	f003 0308 	and.w	r3, r3, #8
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d017      	beq.n	80085e8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80085b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085bc:	f003 0320 	and.w	r3, r3, #32
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d105      	bne.n	80085d0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80085c4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80085c8:	4b5c      	ldr	r3, [pc, #368]	@ (800873c <HAL_UART_IRQHandler+0x2b8>)
 80085ca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d00b      	beq.n	80085e8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2208      	movs	r2, #8
 80085d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085de:	f043 0208 	orr.w	r2, r3, #8
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80085e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d012      	beq.n	800861a <HAL_UART_IRQHandler+0x196>
 80085f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085f8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d00c      	beq.n	800861a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008608:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008610:	f043 0220 	orr.w	r2, r3, #32
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008620:	2b00      	cmp	r3, #0
 8008622:	f000 82dd 	beq.w	8008be0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800862a:	f003 0320 	and.w	r3, r3, #32
 800862e:	2b00      	cmp	r3, #0
 8008630:	d013      	beq.n	800865a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008632:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008636:	f003 0320 	and.w	r3, r3, #32
 800863a:	2b00      	cmp	r3, #0
 800863c:	d105      	bne.n	800864a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800863e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008642:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008646:	2b00      	cmp	r3, #0
 8008648:	d007      	beq.n	800865a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800864e:	2b00      	cmp	r3, #0
 8008650:	d003      	beq.n	800865a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008660:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800866e:	2b40      	cmp	r3, #64	@ 0x40
 8008670:	d005      	beq.n	800867e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008672:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008676:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800867a:	2b00      	cmp	r3, #0
 800867c:	d054      	beq.n	8008728 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f001 fb00 	bl	8009c84 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	689b      	ldr	r3, [r3, #8]
 800868a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800868e:	2b40      	cmp	r3, #64	@ 0x40
 8008690:	d146      	bne.n	8008720 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	3308      	adds	r3, #8
 8008698:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800869c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80086a0:	e853 3f00 	ldrex	r3, [r3]
 80086a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80086a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80086ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	3308      	adds	r3, #8
 80086ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80086be:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80086c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80086ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80086ce:	e841 2300 	strex	r3, r2, [r1]
 80086d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80086d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d1d9      	bne.n	8008692 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d017      	beq.n	8008718 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086ee:	4a15      	ldr	r2, [pc, #84]	@ (8008744 <HAL_UART_IRQHandler+0x2c0>)
 80086f0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086f8:	4618      	mov	r0, r3
 80086fa:	f7f9 fe27 	bl	800234c <HAL_DMA_Abort_IT>
 80086fe:	4603      	mov	r3, r0
 8008700:	2b00      	cmp	r3, #0
 8008702:	d019      	beq.n	8008738 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800870a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800870c:	687a      	ldr	r2, [r7, #4]
 800870e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008712:	4610      	mov	r0, r2
 8008714:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008716:	e00f      	b.n	8008738 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 fa77 	bl	8008c0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800871e:	e00b      	b.n	8008738 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 fa73 	bl	8008c0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008726:	e007      	b.n	8008738 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 fa6f 	bl	8008c0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008736:	e253      	b.n	8008be0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008738:	bf00      	nop
    return;
 800873a:	e251      	b.n	8008be0 <HAL_UART_IRQHandler+0x75c>
 800873c:	10000001 	.word	0x10000001
 8008740:	04000120 	.word	0x04000120
 8008744:	08009d51 	.word	0x08009d51

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800874c:	2b01      	cmp	r3, #1
 800874e:	f040 81e7 	bne.w	8008b20 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008756:	f003 0310 	and.w	r3, r3, #16
 800875a:	2b00      	cmp	r3, #0
 800875c:	f000 81e0 	beq.w	8008b20 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008764:	f003 0310 	and.w	r3, r3, #16
 8008768:	2b00      	cmp	r3, #0
 800876a:	f000 81d9 	beq.w	8008b20 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	2210      	movs	r2, #16
 8008774:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	689b      	ldr	r3, [r3, #8]
 800877c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008780:	2b40      	cmp	r3, #64	@ 0x40
 8008782:	f040 8151 	bne.w	8008a28 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a96      	ldr	r2, [pc, #600]	@ (80089e8 <HAL_UART_IRQHandler+0x564>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d068      	beq.n	8008866 <HAL_UART_IRQHandler+0x3e2>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a93      	ldr	r2, [pc, #588]	@ (80089ec <HAL_UART_IRQHandler+0x568>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d061      	beq.n	8008866 <HAL_UART_IRQHandler+0x3e2>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a91      	ldr	r2, [pc, #580]	@ (80089f0 <HAL_UART_IRQHandler+0x56c>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d05a      	beq.n	8008866 <HAL_UART_IRQHandler+0x3e2>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a8e      	ldr	r2, [pc, #568]	@ (80089f4 <HAL_UART_IRQHandler+0x570>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d053      	beq.n	8008866 <HAL_UART_IRQHandler+0x3e2>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a8c      	ldr	r2, [pc, #560]	@ (80089f8 <HAL_UART_IRQHandler+0x574>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d04c      	beq.n	8008866 <HAL_UART_IRQHandler+0x3e2>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a89      	ldr	r2, [pc, #548]	@ (80089fc <HAL_UART_IRQHandler+0x578>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d045      	beq.n	8008866 <HAL_UART_IRQHandler+0x3e2>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4a87      	ldr	r2, [pc, #540]	@ (8008a00 <HAL_UART_IRQHandler+0x57c>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d03e      	beq.n	8008866 <HAL_UART_IRQHandler+0x3e2>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a84      	ldr	r2, [pc, #528]	@ (8008a04 <HAL_UART_IRQHandler+0x580>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d037      	beq.n	8008866 <HAL_UART_IRQHandler+0x3e2>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a82      	ldr	r2, [pc, #520]	@ (8008a08 <HAL_UART_IRQHandler+0x584>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d030      	beq.n	8008866 <HAL_UART_IRQHandler+0x3e2>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a7f      	ldr	r2, [pc, #508]	@ (8008a0c <HAL_UART_IRQHandler+0x588>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d029      	beq.n	8008866 <HAL_UART_IRQHandler+0x3e2>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a7d      	ldr	r2, [pc, #500]	@ (8008a10 <HAL_UART_IRQHandler+0x58c>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d022      	beq.n	8008866 <HAL_UART_IRQHandler+0x3e2>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a7a      	ldr	r2, [pc, #488]	@ (8008a14 <HAL_UART_IRQHandler+0x590>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d01b      	beq.n	8008866 <HAL_UART_IRQHandler+0x3e2>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a78      	ldr	r2, [pc, #480]	@ (8008a18 <HAL_UART_IRQHandler+0x594>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d014      	beq.n	8008866 <HAL_UART_IRQHandler+0x3e2>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a75      	ldr	r2, [pc, #468]	@ (8008a1c <HAL_UART_IRQHandler+0x598>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d00d      	beq.n	8008866 <HAL_UART_IRQHandler+0x3e2>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a73      	ldr	r2, [pc, #460]	@ (8008a20 <HAL_UART_IRQHandler+0x59c>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d006      	beq.n	8008866 <HAL_UART_IRQHandler+0x3e2>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a70      	ldr	r2, [pc, #448]	@ (8008a24 <HAL_UART_IRQHandler+0x5a0>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d106      	bne.n	8008874 <HAL_UART_IRQHandler+0x3f0>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	b29b      	uxth	r3, r3
 8008872:	e005      	b.n	8008880 <HAL_UART_IRQHandler+0x3fc>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	b29b      	uxth	r3, r3
 8008880:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008884:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008888:	2b00      	cmp	r3, #0
 800888a:	f000 81ab 	beq.w	8008be4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008894:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008898:	429a      	cmp	r2, r3
 800889a:	f080 81a3 	bcs.w	8008be4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80088a4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088ae:	69db      	ldr	r3, [r3, #28]
 80088b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088b4:	f000 8087 	beq.w	80089c6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80088c4:	e853 3f00 	ldrex	r3, [r3]
 80088c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80088cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80088d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80088d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	461a      	mov	r2, r3
 80088de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80088e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80088e6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80088ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80088f2:	e841 2300 	strex	r3, r2, [r1]
 80088f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80088fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d1da      	bne.n	80088b8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	3308      	adds	r3, #8
 8008908:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800890a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800890c:	e853 3f00 	ldrex	r3, [r3]
 8008910:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008912:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008914:	f023 0301 	bic.w	r3, r3, #1
 8008918:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	3308      	adds	r3, #8
 8008922:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008926:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800892a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800892c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800892e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008932:	e841 2300 	strex	r3, r2, [r1]
 8008936:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008938:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800893a:	2b00      	cmp	r3, #0
 800893c:	d1e1      	bne.n	8008902 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	3308      	adds	r3, #8
 8008944:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008946:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008948:	e853 3f00 	ldrex	r3, [r3]
 800894c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800894e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008950:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008954:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	3308      	adds	r3, #8
 800895e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008962:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008964:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008966:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008968:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800896a:	e841 2300 	strex	r3, r2, [r1]
 800896e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008970:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008972:	2b00      	cmp	r3, #0
 8008974:	d1e3      	bne.n	800893e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2220      	movs	r2, #32
 800897a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2200      	movs	r2, #0
 8008982:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800898a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800898c:	e853 3f00 	ldrex	r3, [r3]
 8008990:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008992:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008994:	f023 0310 	bic.w	r3, r3, #16
 8008998:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	461a      	mov	r2, r3
 80089a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80089a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80089a8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80089ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80089ae:	e841 2300 	strex	r3, r2, [r1]
 80089b2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80089b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d1e4      	bne.n	8008984 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089c0:	4618      	mov	r0, r3
 80089c2:	f7f9 f9a5 	bl	8001d10 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2202      	movs	r2, #2
 80089ca:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80089d8:	b29b      	uxth	r3, r3
 80089da:	1ad3      	subs	r3, r2, r3
 80089dc:	b29b      	uxth	r3, r3
 80089de:	4619      	mov	r1, r3
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 f91d 	bl	8008c20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80089e6:	e0fd      	b.n	8008be4 <HAL_UART_IRQHandler+0x760>
 80089e8:	40020010 	.word	0x40020010
 80089ec:	40020028 	.word	0x40020028
 80089f0:	40020040 	.word	0x40020040
 80089f4:	40020058 	.word	0x40020058
 80089f8:	40020070 	.word	0x40020070
 80089fc:	40020088 	.word	0x40020088
 8008a00:	400200a0 	.word	0x400200a0
 8008a04:	400200b8 	.word	0x400200b8
 8008a08:	40020410 	.word	0x40020410
 8008a0c:	40020428 	.word	0x40020428
 8008a10:	40020440 	.word	0x40020440
 8008a14:	40020458 	.word	0x40020458
 8008a18:	40020470 	.word	0x40020470
 8008a1c:	40020488 	.word	0x40020488
 8008a20:	400204a0 	.word	0x400204a0
 8008a24:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	1ad3      	subs	r3, r2, r3
 8008a38:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	f000 80cf 	beq.w	8008be8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8008a4a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	f000 80ca 	beq.w	8008be8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a5c:	e853 3f00 	ldrex	r3, [r3]
 8008a60:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008a62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a68:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	461a      	mov	r2, r3
 8008a72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008a76:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a78:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a7a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008a7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a7e:	e841 2300 	strex	r3, r2, [r1]
 8008a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008a84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d1e4      	bne.n	8008a54 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	3308      	adds	r3, #8
 8008a90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a94:	e853 3f00 	ldrex	r3, [r3]
 8008a98:	623b      	str	r3, [r7, #32]
   return(result);
 8008a9a:	6a3a      	ldr	r2, [r7, #32]
 8008a9c:	4b55      	ldr	r3, [pc, #340]	@ (8008bf4 <HAL_UART_IRQHandler+0x770>)
 8008a9e:	4013      	ands	r3, r2
 8008aa0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	3308      	adds	r3, #8
 8008aaa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008aae:	633a      	str	r2, [r7, #48]	@ 0x30
 8008ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ab4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ab6:	e841 2300 	strex	r3, r2, [r1]
 8008aba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d1e3      	bne.n	8008a8a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2220      	movs	r2, #32
 8008ac6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2200      	movs	r2, #0
 8008ace:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	e853 3f00 	ldrex	r3, [r3]
 8008ae2:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	f023 0310 	bic.w	r3, r3, #16
 8008aea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	461a      	mov	r2, r3
 8008af4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008af8:	61fb      	str	r3, [r7, #28]
 8008afa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008afc:	69b9      	ldr	r1, [r7, #24]
 8008afe:	69fa      	ldr	r2, [r7, #28]
 8008b00:	e841 2300 	strex	r3, r2, [r1]
 8008b04:	617b      	str	r3, [r7, #20]
   return(result);
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d1e4      	bne.n	8008ad6 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2202      	movs	r2, #2
 8008b10:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008b12:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008b16:	4619      	mov	r1, r3
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 f881 	bl	8008c20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008b1e:	e063      	b.n	8008be8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008b20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d00e      	beq.n	8008b4a <HAL_UART_IRQHandler+0x6c6>
 8008b2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d008      	beq.n	8008b4a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008b40:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f001 f945 	bl	8009dd2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008b48:	e051      	b.n	8008bee <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d014      	beq.n	8008b80 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008b56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d105      	bne.n	8008b6e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008b62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d008      	beq.n	8008b80 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d03a      	beq.n	8008bec <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	4798      	blx	r3
    }
    return;
 8008b7e:	e035      	b.n	8008bec <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d009      	beq.n	8008ba0 <HAL_UART_IRQHandler+0x71c>
 8008b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d003      	beq.n	8008ba0 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f001 f8ef 	bl	8009d7c <UART_EndTransmit_IT>
    return;
 8008b9e:	e026      	b.n	8008bee <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008ba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ba4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d009      	beq.n	8008bc0 <HAL_UART_IRQHandler+0x73c>
 8008bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bb0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d003      	beq.n	8008bc0 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f001 f91e 	bl	8009dfa <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008bbe:	e016      	b.n	8008bee <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bc4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d010      	beq.n	8008bee <HAL_UART_IRQHandler+0x76a>
 8008bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	da0c      	bge.n	8008bee <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f001 f906 	bl	8009de6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008bda:	e008      	b.n	8008bee <HAL_UART_IRQHandler+0x76a>
      return;
 8008bdc:	bf00      	nop
 8008bde:	e006      	b.n	8008bee <HAL_UART_IRQHandler+0x76a>
    return;
 8008be0:	bf00      	nop
 8008be2:	e004      	b.n	8008bee <HAL_UART_IRQHandler+0x76a>
      return;
 8008be4:	bf00      	nop
 8008be6:	e002      	b.n	8008bee <HAL_UART_IRQHandler+0x76a>
      return;
 8008be8:	bf00      	nop
 8008bea:	e000      	b.n	8008bee <HAL_UART_IRQHandler+0x76a>
    return;
 8008bec:	bf00      	nop
  }
}
 8008bee:	37e8      	adds	r7, #232	@ 0xe8
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}
 8008bf4:	effffffe 	.word	0xeffffffe

08008bf8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b083      	sub	sp, #12
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008c00:	bf00      	nop
 8008c02:	370c      	adds	r7, #12
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr

08008c0c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008c14:	bf00      	nop
 8008c16:	370c      	adds	r7, #12
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b083      	sub	sp, #12
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	460b      	mov	r3, r1
 8008c2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008c2c:	bf00      	nop
 8008c2e:	370c      	adds	r7, #12
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr

08008c38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c3c:	b092      	sub	sp, #72	@ 0x48
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008c42:	2300      	movs	r3, #0
 8008c44:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	689a      	ldr	r2, [r3, #8]
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	691b      	ldr	r3, [r3, #16]
 8008c50:	431a      	orrs	r2, r3
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	695b      	ldr	r3, [r3, #20]
 8008c56:	431a      	orrs	r2, r3
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	69db      	ldr	r3, [r3, #28]
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	4bbe      	ldr	r3, [pc, #760]	@ (8008f60 <UART_SetConfig+0x328>)
 8008c68:	4013      	ands	r3, r2
 8008c6a:	697a      	ldr	r2, [r7, #20]
 8008c6c:	6812      	ldr	r2, [r2, #0]
 8008c6e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008c70:	430b      	orrs	r3, r1
 8008c72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	68da      	ldr	r2, [r3, #12]
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	430a      	orrs	r2, r1
 8008c88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	699b      	ldr	r3, [r3, #24]
 8008c8e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4ab3      	ldr	r2, [pc, #716]	@ (8008f64 <UART_SetConfig+0x32c>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d004      	beq.n	8008ca4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	6a1b      	ldr	r3, [r3, #32]
 8008c9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	689a      	ldr	r2, [r3, #8]
 8008caa:	4baf      	ldr	r3, [pc, #700]	@ (8008f68 <UART_SetConfig+0x330>)
 8008cac:	4013      	ands	r3, r2
 8008cae:	697a      	ldr	r2, [r7, #20]
 8008cb0:	6812      	ldr	r2, [r2, #0]
 8008cb2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008cb4:	430b      	orrs	r3, r1
 8008cb6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cbe:	f023 010f 	bic.w	r1, r3, #15
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	430a      	orrs	r2, r1
 8008ccc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4aa6      	ldr	r2, [pc, #664]	@ (8008f6c <UART_SetConfig+0x334>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d177      	bne.n	8008dc8 <UART_SetConfig+0x190>
 8008cd8:	4ba5      	ldr	r3, [pc, #660]	@ (8008f70 <UART_SetConfig+0x338>)
 8008cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cdc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ce0:	2b28      	cmp	r3, #40	@ 0x28
 8008ce2:	d86d      	bhi.n	8008dc0 <UART_SetConfig+0x188>
 8008ce4:	a201      	add	r2, pc, #4	@ (adr r2, 8008cec <UART_SetConfig+0xb4>)
 8008ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cea:	bf00      	nop
 8008cec:	08008d91 	.word	0x08008d91
 8008cf0:	08008dc1 	.word	0x08008dc1
 8008cf4:	08008dc1 	.word	0x08008dc1
 8008cf8:	08008dc1 	.word	0x08008dc1
 8008cfc:	08008dc1 	.word	0x08008dc1
 8008d00:	08008dc1 	.word	0x08008dc1
 8008d04:	08008dc1 	.word	0x08008dc1
 8008d08:	08008dc1 	.word	0x08008dc1
 8008d0c:	08008d99 	.word	0x08008d99
 8008d10:	08008dc1 	.word	0x08008dc1
 8008d14:	08008dc1 	.word	0x08008dc1
 8008d18:	08008dc1 	.word	0x08008dc1
 8008d1c:	08008dc1 	.word	0x08008dc1
 8008d20:	08008dc1 	.word	0x08008dc1
 8008d24:	08008dc1 	.word	0x08008dc1
 8008d28:	08008dc1 	.word	0x08008dc1
 8008d2c:	08008da1 	.word	0x08008da1
 8008d30:	08008dc1 	.word	0x08008dc1
 8008d34:	08008dc1 	.word	0x08008dc1
 8008d38:	08008dc1 	.word	0x08008dc1
 8008d3c:	08008dc1 	.word	0x08008dc1
 8008d40:	08008dc1 	.word	0x08008dc1
 8008d44:	08008dc1 	.word	0x08008dc1
 8008d48:	08008dc1 	.word	0x08008dc1
 8008d4c:	08008da9 	.word	0x08008da9
 8008d50:	08008dc1 	.word	0x08008dc1
 8008d54:	08008dc1 	.word	0x08008dc1
 8008d58:	08008dc1 	.word	0x08008dc1
 8008d5c:	08008dc1 	.word	0x08008dc1
 8008d60:	08008dc1 	.word	0x08008dc1
 8008d64:	08008dc1 	.word	0x08008dc1
 8008d68:	08008dc1 	.word	0x08008dc1
 8008d6c:	08008db1 	.word	0x08008db1
 8008d70:	08008dc1 	.word	0x08008dc1
 8008d74:	08008dc1 	.word	0x08008dc1
 8008d78:	08008dc1 	.word	0x08008dc1
 8008d7c:	08008dc1 	.word	0x08008dc1
 8008d80:	08008dc1 	.word	0x08008dc1
 8008d84:	08008dc1 	.word	0x08008dc1
 8008d88:	08008dc1 	.word	0x08008dc1
 8008d8c:	08008db9 	.word	0x08008db9
 8008d90:	2301      	movs	r3, #1
 8008d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d96:	e326      	b.n	80093e6 <UART_SetConfig+0x7ae>
 8008d98:	2304      	movs	r3, #4
 8008d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d9e:	e322      	b.n	80093e6 <UART_SetConfig+0x7ae>
 8008da0:	2308      	movs	r3, #8
 8008da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008da6:	e31e      	b.n	80093e6 <UART_SetConfig+0x7ae>
 8008da8:	2310      	movs	r3, #16
 8008daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dae:	e31a      	b.n	80093e6 <UART_SetConfig+0x7ae>
 8008db0:	2320      	movs	r3, #32
 8008db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008db6:	e316      	b.n	80093e6 <UART_SetConfig+0x7ae>
 8008db8:	2340      	movs	r3, #64	@ 0x40
 8008dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dbe:	e312      	b.n	80093e6 <UART_SetConfig+0x7ae>
 8008dc0:	2380      	movs	r3, #128	@ 0x80
 8008dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dc6:	e30e      	b.n	80093e6 <UART_SetConfig+0x7ae>
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4a69      	ldr	r2, [pc, #420]	@ (8008f74 <UART_SetConfig+0x33c>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d130      	bne.n	8008e34 <UART_SetConfig+0x1fc>
 8008dd2:	4b67      	ldr	r3, [pc, #412]	@ (8008f70 <UART_SetConfig+0x338>)
 8008dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dd6:	f003 0307 	and.w	r3, r3, #7
 8008dda:	2b05      	cmp	r3, #5
 8008ddc:	d826      	bhi.n	8008e2c <UART_SetConfig+0x1f4>
 8008dde:	a201      	add	r2, pc, #4	@ (adr r2, 8008de4 <UART_SetConfig+0x1ac>)
 8008de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de4:	08008dfd 	.word	0x08008dfd
 8008de8:	08008e05 	.word	0x08008e05
 8008dec:	08008e0d 	.word	0x08008e0d
 8008df0:	08008e15 	.word	0x08008e15
 8008df4:	08008e1d 	.word	0x08008e1d
 8008df8:	08008e25 	.word	0x08008e25
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e02:	e2f0      	b.n	80093e6 <UART_SetConfig+0x7ae>
 8008e04:	2304      	movs	r3, #4
 8008e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e0a:	e2ec      	b.n	80093e6 <UART_SetConfig+0x7ae>
 8008e0c:	2308      	movs	r3, #8
 8008e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e12:	e2e8      	b.n	80093e6 <UART_SetConfig+0x7ae>
 8008e14:	2310      	movs	r3, #16
 8008e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e1a:	e2e4      	b.n	80093e6 <UART_SetConfig+0x7ae>
 8008e1c:	2320      	movs	r3, #32
 8008e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e22:	e2e0      	b.n	80093e6 <UART_SetConfig+0x7ae>
 8008e24:	2340      	movs	r3, #64	@ 0x40
 8008e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e2a:	e2dc      	b.n	80093e6 <UART_SetConfig+0x7ae>
 8008e2c:	2380      	movs	r3, #128	@ 0x80
 8008e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e32:	e2d8      	b.n	80093e6 <UART_SetConfig+0x7ae>
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a4f      	ldr	r2, [pc, #316]	@ (8008f78 <UART_SetConfig+0x340>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d130      	bne.n	8008ea0 <UART_SetConfig+0x268>
 8008e3e:	4b4c      	ldr	r3, [pc, #304]	@ (8008f70 <UART_SetConfig+0x338>)
 8008e40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e42:	f003 0307 	and.w	r3, r3, #7
 8008e46:	2b05      	cmp	r3, #5
 8008e48:	d826      	bhi.n	8008e98 <UART_SetConfig+0x260>
 8008e4a:	a201      	add	r2, pc, #4	@ (adr r2, 8008e50 <UART_SetConfig+0x218>)
 8008e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e50:	08008e69 	.word	0x08008e69
 8008e54:	08008e71 	.word	0x08008e71
 8008e58:	08008e79 	.word	0x08008e79
 8008e5c:	08008e81 	.word	0x08008e81
 8008e60:	08008e89 	.word	0x08008e89
 8008e64:	08008e91 	.word	0x08008e91
 8008e68:	2300      	movs	r3, #0
 8008e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e6e:	e2ba      	b.n	80093e6 <UART_SetConfig+0x7ae>
 8008e70:	2304      	movs	r3, #4
 8008e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e76:	e2b6      	b.n	80093e6 <UART_SetConfig+0x7ae>
 8008e78:	2308      	movs	r3, #8
 8008e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e7e:	e2b2      	b.n	80093e6 <UART_SetConfig+0x7ae>
 8008e80:	2310      	movs	r3, #16
 8008e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e86:	e2ae      	b.n	80093e6 <UART_SetConfig+0x7ae>
 8008e88:	2320      	movs	r3, #32
 8008e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e8e:	e2aa      	b.n	80093e6 <UART_SetConfig+0x7ae>
 8008e90:	2340      	movs	r3, #64	@ 0x40
 8008e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e96:	e2a6      	b.n	80093e6 <UART_SetConfig+0x7ae>
 8008e98:	2380      	movs	r3, #128	@ 0x80
 8008e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e9e:	e2a2      	b.n	80093e6 <UART_SetConfig+0x7ae>
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a35      	ldr	r2, [pc, #212]	@ (8008f7c <UART_SetConfig+0x344>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d130      	bne.n	8008f0c <UART_SetConfig+0x2d4>
 8008eaa:	4b31      	ldr	r3, [pc, #196]	@ (8008f70 <UART_SetConfig+0x338>)
 8008eac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008eae:	f003 0307 	and.w	r3, r3, #7
 8008eb2:	2b05      	cmp	r3, #5
 8008eb4:	d826      	bhi.n	8008f04 <UART_SetConfig+0x2cc>
 8008eb6:	a201      	add	r2, pc, #4	@ (adr r2, 8008ebc <UART_SetConfig+0x284>)
 8008eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ebc:	08008ed5 	.word	0x08008ed5
 8008ec0:	08008edd 	.word	0x08008edd
 8008ec4:	08008ee5 	.word	0x08008ee5
 8008ec8:	08008eed 	.word	0x08008eed
 8008ecc:	08008ef5 	.word	0x08008ef5
 8008ed0:	08008efd 	.word	0x08008efd
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eda:	e284      	b.n	80093e6 <UART_SetConfig+0x7ae>
 8008edc:	2304      	movs	r3, #4
 8008ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ee2:	e280      	b.n	80093e6 <UART_SetConfig+0x7ae>
 8008ee4:	2308      	movs	r3, #8
 8008ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eea:	e27c      	b.n	80093e6 <UART_SetConfig+0x7ae>
 8008eec:	2310      	movs	r3, #16
 8008eee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ef2:	e278      	b.n	80093e6 <UART_SetConfig+0x7ae>
 8008ef4:	2320      	movs	r3, #32
 8008ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008efa:	e274      	b.n	80093e6 <UART_SetConfig+0x7ae>
 8008efc:	2340      	movs	r3, #64	@ 0x40
 8008efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f02:	e270      	b.n	80093e6 <UART_SetConfig+0x7ae>
 8008f04:	2380      	movs	r3, #128	@ 0x80
 8008f06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f0a:	e26c      	b.n	80093e6 <UART_SetConfig+0x7ae>
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a1b      	ldr	r2, [pc, #108]	@ (8008f80 <UART_SetConfig+0x348>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d142      	bne.n	8008f9c <UART_SetConfig+0x364>
 8008f16:	4b16      	ldr	r3, [pc, #88]	@ (8008f70 <UART_SetConfig+0x338>)
 8008f18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f1a:	f003 0307 	and.w	r3, r3, #7
 8008f1e:	2b05      	cmp	r3, #5
 8008f20:	d838      	bhi.n	8008f94 <UART_SetConfig+0x35c>
 8008f22:	a201      	add	r2, pc, #4	@ (adr r2, 8008f28 <UART_SetConfig+0x2f0>)
 8008f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f28:	08008f41 	.word	0x08008f41
 8008f2c:	08008f49 	.word	0x08008f49
 8008f30:	08008f51 	.word	0x08008f51
 8008f34:	08008f59 	.word	0x08008f59
 8008f38:	08008f85 	.word	0x08008f85
 8008f3c:	08008f8d 	.word	0x08008f8d
 8008f40:	2300      	movs	r3, #0
 8008f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f46:	e24e      	b.n	80093e6 <UART_SetConfig+0x7ae>
 8008f48:	2304      	movs	r3, #4
 8008f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f4e:	e24a      	b.n	80093e6 <UART_SetConfig+0x7ae>
 8008f50:	2308      	movs	r3, #8
 8008f52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f56:	e246      	b.n	80093e6 <UART_SetConfig+0x7ae>
 8008f58:	2310      	movs	r3, #16
 8008f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f5e:	e242      	b.n	80093e6 <UART_SetConfig+0x7ae>
 8008f60:	cfff69f3 	.word	0xcfff69f3
 8008f64:	58000c00 	.word	0x58000c00
 8008f68:	11fff4ff 	.word	0x11fff4ff
 8008f6c:	40011000 	.word	0x40011000
 8008f70:	58024400 	.word	0x58024400
 8008f74:	40004400 	.word	0x40004400
 8008f78:	40004800 	.word	0x40004800
 8008f7c:	40004c00 	.word	0x40004c00
 8008f80:	40005000 	.word	0x40005000
 8008f84:	2320      	movs	r3, #32
 8008f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f8a:	e22c      	b.n	80093e6 <UART_SetConfig+0x7ae>
 8008f8c:	2340      	movs	r3, #64	@ 0x40
 8008f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f92:	e228      	b.n	80093e6 <UART_SetConfig+0x7ae>
 8008f94:	2380      	movs	r3, #128	@ 0x80
 8008f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f9a:	e224      	b.n	80093e6 <UART_SetConfig+0x7ae>
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4ab1      	ldr	r2, [pc, #708]	@ (8009268 <UART_SetConfig+0x630>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d176      	bne.n	8009094 <UART_SetConfig+0x45c>
 8008fa6:	4bb1      	ldr	r3, [pc, #708]	@ (800926c <UART_SetConfig+0x634>)
 8008fa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008faa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008fae:	2b28      	cmp	r3, #40	@ 0x28
 8008fb0:	d86c      	bhi.n	800908c <UART_SetConfig+0x454>
 8008fb2:	a201      	add	r2, pc, #4	@ (adr r2, 8008fb8 <UART_SetConfig+0x380>)
 8008fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fb8:	0800905d 	.word	0x0800905d
 8008fbc:	0800908d 	.word	0x0800908d
 8008fc0:	0800908d 	.word	0x0800908d
 8008fc4:	0800908d 	.word	0x0800908d
 8008fc8:	0800908d 	.word	0x0800908d
 8008fcc:	0800908d 	.word	0x0800908d
 8008fd0:	0800908d 	.word	0x0800908d
 8008fd4:	0800908d 	.word	0x0800908d
 8008fd8:	08009065 	.word	0x08009065
 8008fdc:	0800908d 	.word	0x0800908d
 8008fe0:	0800908d 	.word	0x0800908d
 8008fe4:	0800908d 	.word	0x0800908d
 8008fe8:	0800908d 	.word	0x0800908d
 8008fec:	0800908d 	.word	0x0800908d
 8008ff0:	0800908d 	.word	0x0800908d
 8008ff4:	0800908d 	.word	0x0800908d
 8008ff8:	0800906d 	.word	0x0800906d
 8008ffc:	0800908d 	.word	0x0800908d
 8009000:	0800908d 	.word	0x0800908d
 8009004:	0800908d 	.word	0x0800908d
 8009008:	0800908d 	.word	0x0800908d
 800900c:	0800908d 	.word	0x0800908d
 8009010:	0800908d 	.word	0x0800908d
 8009014:	0800908d 	.word	0x0800908d
 8009018:	08009075 	.word	0x08009075
 800901c:	0800908d 	.word	0x0800908d
 8009020:	0800908d 	.word	0x0800908d
 8009024:	0800908d 	.word	0x0800908d
 8009028:	0800908d 	.word	0x0800908d
 800902c:	0800908d 	.word	0x0800908d
 8009030:	0800908d 	.word	0x0800908d
 8009034:	0800908d 	.word	0x0800908d
 8009038:	0800907d 	.word	0x0800907d
 800903c:	0800908d 	.word	0x0800908d
 8009040:	0800908d 	.word	0x0800908d
 8009044:	0800908d 	.word	0x0800908d
 8009048:	0800908d 	.word	0x0800908d
 800904c:	0800908d 	.word	0x0800908d
 8009050:	0800908d 	.word	0x0800908d
 8009054:	0800908d 	.word	0x0800908d
 8009058:	08009085 	.word	0x08009085
 800905c:	2301      	movs	r3, #1
 800905e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009062:	e1c0      	b.n	80093e6 <UART_SetConfig+0x7ae>
 8009064:	2304      	movs	r3, #4
 8009066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800906a:	e1bc      	b.n	80093e6 <UART_SetConfig+0x7ae>
 800906c:	2308      	movs	r3, #8
 800906e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009072:	e1b8      	b.n	80093e6 <UART_SetConfig+0x7ae>
 8009074:	2310      	movs	r3, #16
 8009076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800907a:	e1b4      	b.n	80093e6 <UART_SetConfig+0x7ae>
 800907c:	2320      	movs	r3, #32
 800907e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009082:	e1b0      	b.n	80093e6 <UART_SetConfig+0x7ae>
 8009084:	2340      	movs	r3, #64	@ 0x40
 8009086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800908a:	e1ac      	b.n	80093e6 <UART_SetConfig+0x7ae>
 800908c:	2380      	movs	r3, #128	@ 0x80
 800908e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009092:	e1a8      	b.n	80093e6 <UART_SetConfig+0x7ae>
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4a75      	ldr	r2, [pc, #468]	@ (8009270 <UART_SetConfig+0x638>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d130      	bne.n	8009100 <UART_SetConfig+0x4c8>
 800909e:	4b73      	ldr	r3, [pc, #460]	@ (800926c <UART_SetConfig+0x634>)
 80090a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090a2:	f003 0307 	and.w	r3, r3, #7
 80090a6:	2b05      	cmp	r3, #5
 80090a8:	d826      	bhi.n	80090f8 <UART_SetConfig+0x4c0>
 80090aa:	a201      	add	r2, pc, #4	@ (adr r2, 80090b0 <UART_SetConfig+0x478>)
 80090ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090b0:	080090c9 	.word	0x080090c9
 80090b4:	080090d1 	.word	0x080090d1
 80090b8:	080090d9 	.word	0x080090d9
 80090bc:	080090e1 	.word	0x080090e1
 80090c0:	080090e9 	.word	0x080090e9
 80090c4:	080090f1 	.word	0x080090f1
 80090c8:	2300      	movs	r3, #0
 80090ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ce:	e18a      	b.n	80093e6 <UART_SetConfig+0x7ae>
 80090d0:	2304      	movs	r3, #4
 80090d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090d6:	e186      	b.n	80093e6 <UART_SetConfig+0x7ae>
 80090d8:	2308      	movs	r3, #8
 80090da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090de:	e182      	b.n	80093e6 <UART_SetConfig+0x7ae>
 80090e0:	2310      	movs	r3, #16
 80090e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090e6:	e17e      	b.n	80093e6 <UART_SetConfig+0x7ae>
 80090e8:	2320      	movs	r3, #32
 80090ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ee:	e17a      	b.n	80093e6 <UART_SetConfig+0x7ae>
 80090f0:	2340      	movs	r3, #64	@ 0x40
 80090f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090f6:	e176      	b.n	80093e6 <UART_SetConfig+0x7ae>
 80090f8:	2380      	movs	r3, #128	@ 0x80
 80090fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090fe:	e172      	b.n	80093e6 <UART_SetConfig+0x7ae>
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a5b      	ldr	r2, [pc, #364]	@ (8009274 <UART_SetConfig+0x63c>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d130      	bne.n	800916c <UART_SetConfig+0x534>
 800910a:	4b58      	ldr	r3, [pc, #352]	@ (800926c <UART_SetConfig+0x634>)
 800910c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800910e:	f003 0307 	and.w	r3, r3, #7
 8009112:	2b05      	cmp	r3, #5
 8009114:	d826      	bhi.n	8009164 <UART_SetConfig+0x52c>
 8009116:	a201      	add	r2, pc, #4	@ (adr r2, 800911c <UART_SetConfig+0x4e4>)
 8009118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800911c:	08009135 	.word	0x08009135
 8009120:	0800913d 	.word	0x0800913d
 8009124:	08009145 	.word	0x08009145
 8009128:	0800914d 	.word	0x0800914d
 800912c:	08009155 	.word	0x08009155
 8009130:	0800915d 	.word	0x0800915d
 8009134:	2300      	movs	r3, #0
 8009136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800913a:	e154      	b.n	80093e6 <UART_SetConfig+0x7ae>
 800913c:	2304      	movs	r3, #4
 800913e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009142:	e150      	b.n	80093e6 <UART_SetConfig+0x7ae>
 8009144:	2308      	movs	r3, #8
 8009146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800914a:	e14c      	b.n	80093e6 <UART_SetConfig+0x7ae>
 800914c:	2310      	movs	r3, #16
 800914e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009152:	e148      	b.n	80093e6 <UART_SetConfig+0x7ae>
 8009154:	2320      	movs	r3, #32
 8009156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800915a:	e144      	b.n	80093e6 <UART_SetConfig+0x7ae>
 800915c:	2340      	movs	r3, #64	@ 0x40
 800915e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009162:	e140      	b.n	80093e6 <UART_SetConfig+0x7ae>
 8009164:	2380      	movs	r3, #128	@ 0x80
 8009166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800916a:	e13c      	b.n	80093e6 <UART_SetConfig+0x7ae>
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a41      	ldr	r2, [pc, #260]	@ (8009278 <UART_SetConfig+0x640>)
 8009172:	4293      	cmp	r3, r2
 8009174:	f040 8082 	bne.w	800927c <UART_SetConfig+0x644>
 8009178:	4b3c      	ldr	r3, [pc, #240]	@ (800926c <UART_SetConfig+0x634>)
 800917a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800917c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009180:	2b28      	cmp	r3, #40	@ 0x28
 8009182:	d86d      	bhi.n	8009260 <UART_SetConfig+0x628>
 8009184:	a201      	add	r2, pc, #4	@ (adr r2, 800918c <UART_SetConfig+0x554>)
 8009186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800918a:	bf00      	nop
 800918c:	08009231 	.word	0x08009231
 8009190:	08009261 	.word	0x08009261
 8009194:	08009261 	.word	0x08009261
 8009198:	08009261 	.word	0x08009261
 800919c:	08009261 	.word	0x08009261
 80091a0:	08009261 	.word	0x08009261
 80091a4:	08009261 	.word	0x08009261
 80091a8:	08009261 	.word	0x08009261
 80091ac:	08009239 	.word	0x08009239
 80091b0:	08009261 	.word	0x08009261
 80091b4:	08009261 	.word	0x08009261
 80091b8:	08009261 	.word	0x08009261
 80091bc:	08009261 	.word	0x08009261
 80091c0:	08009261 	.word	0x08009261
 80091c4:	08009261 	.word	0x08009261
 80091c8:	08009261 	.word	0x08009261
 80091cc:	08009241 	.word	0x08009241
 80091d0:	08009261 	.word	0x08009261
 80091d4:	08009261 	.word	0x08009261
 80091d8:	08009261 	.word	0x08009261
 80091dc:	08009261 	.word	0x08009261
 80091e0:	08009261 	.word	0x08009261
 80091e4:	08009261 	.word	0x08009261
 80091e8:	08009261 	.word	0x08009261
 80091ec:	08009249 	.word	0x08009249
 80091f0:	08009261 	.word	0x08009261
 80091f4:	08009261 	.word	0x08009261
 80091f8:	08009261 	.word	0x08009261
 80091fc:	08009261 	.word	0x08009261
 8009200:	08009261 	.word	0x08009261
 8009204:	08009261 	.word	0x08009261
 8009208:	08009261 	.word	0x08009261
 800920c:	08009251 	.word	0x08009251
 8009210:	08009261 	.word	0x08009261
 8009214:	08009261 	.word	0x08009261
 8009218:	08009261 	.word	0x08009261
 800921c:	08009261 	.word	0x08009261
 8009220:	08009261 	.word	0x08009261
 8009224:	08009261 	.word	0x08009261
 8009228:	08009261 	.word	0x08009261
 800922c:	08009259 	.word	0x08009259
 8009230:	2301      	movs	r3, #1
 8009232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009236:	e0d6      	b.n	80093e6 <UART_SetConfig+0x7ae>
 8009238:	2304      	movs	r3, #4
 800923a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800923e:	e0d2      	b.n	80093e6 <UART_SetConfig+0x7ae>
 8009240:	2308      	movs	r3, #8
 8009242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009246:	e0ce      	b.n	80093e6 <UART_SetConfig+0x7ae>
 8009248:	2310      	movs	r3, #16
 800924a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800924e:	e0ca      	b.n	80093e6 <UART_SetConfig+0x7ae>
 8009250:	2320      	movs	r3, #32
 8009252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009256:	e0c6      	b.n	80093e6 <UART_SetConfig+0x7ae>
 8009258:	2340      	movs	r3, #64	@ 0x40
 800925a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800925e:	e0c2      	b.n	80093e6 <UART_SetConfig+0x7ae>
 8009260:	2380      	movs	r3, #128	@ 0x80
 8009262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009266:	e0be      	b.n	80093e6 <UART_SetConfig+0x7ae>
 8009268:	40011400 	.word	0x40011400
 800926c:	58024400 	.word	0x58024400
 8009270:	40007800 	.word	0x40007800
 8009274:	40007c00 	.word	0x40007c00
 8009278:	40011800 	.word	0x40011800
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4aad      	ldr	r2, [pc, #692]	@ (8009538 <UART_SetConfig+0x900>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d176      	bne.n	8009374 <UART_SetConfig+0x73c>
 8009286:	4bad      	ldr	r3, [pc, #692]	@ (800953c <UART_SetConfig+0x904>)
 8009288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800928a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800928e:	2b28      	cmp	r3, #40	@ 0x28
 8009290:	d86c      	bhi.n	800936c <UART_SetConfig+0x734>
 8009292:	a201      	add	r2, pc, #4	@ (adr r2, 8009298 <UART_SetConfig+0x660>)
 8009294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009298:	0800933d 	.word	0x0800933d
 800929c:	0800936d 	.word	0x0800936d
 80092a0:	0800936d 	.word	0x0800936d
 80092a4:	0800936d 	.word	0x0800936d
 80092a8:	0800936d 	.word	0x0800936d
 80092ac:	0800936d 	.word	0x0800936d
 80092b0:	0800936d 	.word	0x0800936d
 80092b4:	0800936d 	.word	0x0800936d
 80092b8:	08009345 	.word	0x08009345
 80092bc:	0800936d 	.word	0x0800936d
 80092c0:	0800936d 	.word	0x0800936d
 80092c4:	0800936d 	.word	0x0800936d
 80092c8:	0800936d 	.word	0x0800936d
 80092cc:	0800936d 	.word	0x0800936d
 80092d0:	0800936d 	.word	0x0800936d
 80092d4:	0800936d 	.word	0x0800936d
 80092d8:	0800934d 	.word	0x0800934d
 80092dc:	0800936d 	.word	0x0800936d
 80092e0:	0800936d 	.word	0x0800936d
 80092e4:	0800936d 	.word	0x0800936d
 80092e8:	0800936d 	.word	0x0800936d
 80092ec:	0800936d 	.word	0x0800936d
 80092f0:	0800936d 	.word	0x0800936d
 80092f4:	0800936d 	.word	0x0800936d
 80092f8:	08009355 	.word	0x08009355
 80092fc:	0800936d 	.word	0x0800936d
 8009300:	0800936d 	.word	0x0800936d
 8009304:	0800936d 	.word	0x0800936d
 8009308:	0800936d 	.word	0x0800936d
 800930c:	0800936d 	.word	0x0800936d
 8009310:	0800936d 	.word	0x0800936d
 8009314:	0800936d 	.word	0x0800936d
 8009318:	0800935d 	.word	0x0800935d
 800931c:	0800936d 	.word	0x0800936d
 8009320:	0800936d 	.word	0x0800936d
 8009324:	0800936d 	.word	0x0800936d
 8009328:	0800936d 	.word	0x0800936d
 800932c:	0800936d 	.word	0x0800936d
 8009330:	0800936d 	.word	0x0800936d
 8009334:	0800936d 	.word	0x0800936d
 8009338:	08009365 	.word	0x08009365
 800933c:	2301      	movs	r3, #1
 800933e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009342:	e050      	b.n	80093e6 <UART_SetConfig+0x7ae>
 8009344:	2304      	movs	r3, #4
 8009346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800934a:	e04c      	b.n	80093e6 <UART_SetConfig+0x7ae>
 800934c:	2308      	movs	r3, #8
 800934e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009352:	e048      	b.n	80093e6 <UART_SetConfig+0x7ae>
 8009354:	2310      	movs	r3, #16
 8009356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800935a:	e044      	b.n	80093e6 <UART_SetConfig+0x7ae>
 800935c:	2320      	movs	r3, #32
 800935e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009362:	e040      	b.n	80093e6 <UART_SetConfig+0x7ae>
 8009364:	2340      	movs	r3, #64	@ 0x40
 8009366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800936a:	e03c      	b.n	80093e6 <UART_SetConfig+0x7ae>
 800936c:	2380      	movs	r3, #128	@ 0x80
 800936e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009372:	e038      	b.n	80093e6 <UART_SetConfig+0x7ae>
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	4a71      	ldr	r2, [pc, #452]	@ (8009540 <UART_SetConfig+0x908>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d130      	bne.n	80093e0 <UART_SetConfig+0x7a8>
 800937e:	4b6f      	ldr	r3, [pc, #444]	@ (800953c <UART_SetConfig+0x904>)
 8009380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009382:	f003 0307 	and.w	r3, r3, #7
 8009386:	2b05      	cmp	r3, #5
 8009388:	d826      	bhi.n	80093d8 <UART_SetConfig+0x7a0>
 800938a:	a201      	add	r2, pc, #4	@ (adr r2, 8009390 <UART_SetConfig+0x758>)
 800938c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009390:	080093a9 	.word	0x080093a9
 8009394:	080093b1 	.word	0x080093b1
 8009398:	080093b9 	.word	0x080093b9
 800939c:	080093c1 	.word	0x080093c1
 80093a0:	080093c9 	.word	0x080093c9
 80093a4:	080093d1 	.word	0x080093d1
 80093a8:	2302      	movs	r3, #2
 80093aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ae:	e01a      	b.n	80093e6 <UART_SetConfig+0x7ae>
 80093b0:	2304      	movs	r3, #4
 80093b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093b6:	e016      	b.n	80093e6 <UART_SetConfig+0x7ae>
 80093b8:	2308      	movs	r3, #8
 80093ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093be:	e012      	b.n	80093e6 <UART_SetConfig+0x7ae>
 80093c0:	2310      	movs	r3, #16
 80093c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093c6:	e00e      	b.n	80093e6 <UART_SetConfig+0x7ae>
 80093c8:	2320      	movs	r3, #32
 80093ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ce:	e00a      	b.n	80093e6 <UART_SetConfig+0x7ae>
 80093d0:	2340      	movs	r3, #64	@ 0x40
 80093d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093d6:	e006      	b.n	80093e6 <UART_SetConfig+0x7ae>
 80093d8:	2380      	movs	r3, #128	@ 0x80
 80093da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093de:	e002      	b.n	80093e6 <UART_SetConfig+0x7ae>
 80093e0:	2380      	movs	r3, #128	@ 0x80
 80093e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	4a55      	ldr	r2, [pc, #340]	@ (8009540 <UART_SetConfig+0x908>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	f040 80f8 	bne.w	80095e2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80093f2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80093f6:	2b20      	cmp	r3, #32
 80093f8:	dc46      	bgt.n	8009488 <UART_SetConfig+0x850>
 80093fa:	2b02      	cmp	r3, #2
 80093fc:	db75      	blt.n	80094ea <UART_SetConfig+0x8b2>
 80093fe:	3b02      	subs	r3, #2
 8009400:	2b1e      	cmp	r3, #30
 8009402:	d872      	bhi.n	80094ea <UART_SetConfig+0x8b2>
 8009404:	a201      	add	r2, pc, #4	@ (adr r2, 800940c <UART_SetConfig+0x7d4>)
 8009406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800940a:	bf00      	nop
 800940c:	0800948f 	.word	0x0800948f
 8009410:	080094eb 	.word	0x080094eb
 8009414:	08009497 	.word	0x08009497
 8009418:	080094eb 	.word	0x080094eb
 800941c:	080094eb 	.word	0x080094eb
 8009420:	080094eb 	.word	0x080094eb
 8009424:	080094a7 	.word	0x080094a7
 8009428:	080094eb 	.word	0x080094eb
 800942c:	080094eb 	.word	0x080094eb
 8009430:	080094eb 	.word	0x080094eb
 8009434:	080094eb 	.word	0x080094eb
 8009438:	080094eb 	.word	0x080094eb
 800943c:	080094eb 	.word	0x080094eb
 8009440:	080094eb 	.word	0x080094eb
 8009444:	080094b7 	.word	0x080094b7
 8009448:	080094eb 	.word	0x080094eb
 800944c:	080094eb 	.word	0x080094eb
 8009450:	080094eb 	.word	0x080094eb
 8009454:	080094eb 	.word	0x080094eb
 8009458:	080094eb 	.word	0x080094eb
 800945c:	080094eb 	.word	0x080094eb
 8009460:	080094eb 	.word	0x080094eb
 8009464:	080094eb 	.word	0x080094eb
 8009468:	080094eb 	.word	0x080094eb
 800946c:	080094eb 	.word	0x080094eb
 8009470:	080094eb 	.word	0x080094eb
 8009474:	080094eb 	.word	0x080094eb
 8009478:	080094eb 	.word	0x080094eb
 800947c:	080094eb 	.word	0x080094eb
 8009480:	080094eb 	.word	0x080094eb
 8009484:	080094dd 	.word	0x080094dd
 8009488:	2b40      	cmp	r3, #64	@ 0x40
 800948a:	d02a      	beq.n	80094e2 <UART_SetConfig+0x8aa>
 800948c:	e02d      	b.n	80094ea <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800948e:	f7fe f811 	bl	80074b4 <HAL_RCCEx_GetD3PCLK1Freq>
 8009492:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009494:	e02f      	b.n	80094f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009496:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800949a:	4618      	mov	r0, r3
 800949c:	f7fe f820 	bl	80074e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80094a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094a4:	e027      	b.n	80094f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094a6:	f107 0318 	add.w	r3, r7, #24
 80094aa:	4618      	mov	r0, r3
 80094ac:	f7fe f96c 	bl	8007788 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80094b0:	69fb      	ldr	r3, [r7, #28]
 80094b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094b4:	e01f      	b.n	80094f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80094b6:	4b21      	ldr	r3, [pc, #132]	@ (800953c <UART_SetConfig+0x904>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f003 0320 	and.w	r3, r3, #32
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d009      	beq.n	80094d6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80094c2:	4b1e      	ldr	r3, [pc, #120]	@ (800953c <UART_SetConfig+0x904>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	08db      	lsrs	r3, r3, #3
 80094c8:	f003 0303 	and.w	r3, r3, #3
 80094cc:	4a1d      	ldr	r2, [pc, #116]	@ (8009544 <UART_SetConfig+0x90c>)
 80094ce:	fa22 f303 	lsr.w	r3, r2, r3
 80094d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80094d4:	e00f      	b.n	80094f6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80094d6:	4b1b      	ldr	r3, [pc, #108]	@ (8009544 <UART_SetConfig+0x90c>)
 80094d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094da:	e00c      	b.n	80094f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80094dc:	4b1a      	ldr	r3, [pc, #104]	@ (8009548 <UART_SetConfig+0x910>)
 80094de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094e0:	e009      	b.n	80094f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80094e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80094e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094e8:	e005      	b.n	80094f6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80094ea:	2300      	movs	r3, #0
 80094ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80094ee:	2301      	movs	r3, #1
 80094f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80094f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80094f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	f000 81ee 	beq.w	80098da <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009502:	4a12      	ldr	r2, [pc, #72]	@ (800954c <UART_SetConfig+0x914>)
 8009504:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009508:	461a      	mov	r2, r3
 800950a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800950c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009510:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	685a      	ldr	r2, [r3, #4]
 8009516:	4613      	mov	r3, r2
 8009518:	005b      	lsls	r3, r3, #1
 800951a:	4413      	add	r3, r2
 800951c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800951e:	429a      	cmp	r2, r3
 8009520:	d305      	bcc.n	800952e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	685b      	ldr	r3, [r3, #4]
 8009526:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009528:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800952a:	429a      	cmp	r2, r3
 800952c:	d910      	bls.n	8009550 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800952e:	2301      	movs	r3, #1
 8009530:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009534:	e1d1      	b.n	80098da <UART_SetConfig+0xca2>
 8009536:	bf00      	nop
 8009538:	40011c00 	.word	0x40011c00
 800953c:	58024400 	.word	0x58024400
 8009540:	58000c00 	.word	0x58000c00
 8009544:	03d09000 	.word	0x03d09000
 8009548:	003d0900 	.word	0x003d0900
 800954c:	0800bedc 	.word	0x0800bedc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009550:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009552:	2200      	movs	r2, #0
 8009554:	60bb      	str	r3, [r7, #8]
 8009556:	60fa      	str	r2, [r7, #12]
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800955c:	4ac0      	ldr	r2, [pc, #768]	@ (8009860 <UART_SetConfig+0xc28>)
 800955e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009562:	b29b      	uxth	r3, r3
 8009564:	2200      	movs	r2, #0
 8009566:	603b      	str	r3, [r7, #0]
 8009568:	607a      	str	r2, [r7, #4]
 800956a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800956e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009572:	f7f6 fecd 	bl	8000310 <__aeabi_uldivmod>
 8009576:	4602      	mov	r2, r0
 8009578:	460b      	mov	r3, r1
 800957a:	4610      	mov	r0, r2
 800957c:	4619      	mov	r1, r3
 800957e:	f04f 0200 	mov.w	r2, #0
 8009582:	f04f 0300 	mov.w	r3, #0
 8009586:	020b      	lsls	r3, r1, #8
 8009588:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800958c:	0202      	lsls	r2, r0, #8
 800958e:	6979      	ldr	r1, [r7, #20]
 8009590:	6849      	ldr	r1, [r1, #4]
 8009592:	0849      	lsrs	r1, r1, #1
 8009594:	2000      	movs	r0, #0
 8009596:	460c      	mov	r4, r1
 8009598:	4605      	mov	r5, r0
 800959a:	eb12 0804 	adds.w	r8, r2, r4
 800959e:	eb43 0905 	adc.w	r9, r3, r5
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	685b      	ldr	r3, [r3, #4]
 80095a6:	2200      	movs	r2, #0
 80095a8:	469a      	mov	sl, r3
 80095aa:	4693      	mov	fp, r2
 80095ac:	4652      	mov	r2, sl
 80095ae:	465b      	mov	r3, fp
 80095b0:	4640      	mov	r0, r8
 80095b2:	4649      	mov	r1, r9
 80095b4:	f7f6 feac 	bl	8000310 <__aeabi_uldivmod>
 80095b8:	4602      	mov	r2, r0
 80095ba:	460b      	mov	r3, r1
 80095bc:	4613      	mov	r3, r2
 80095be:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80095c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80095c6:	d308      	bcc.n	80095da <UART_SetConfig+0x9a2>
 80095c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80095ce:	d204      	bcs.n	80095da <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80095d6:	60da      	str	r2, [r3, #12]
 80095d8:	e17f      	b.n	80098da <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80095da:	2301      	movs	r3, #1
 80095dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80095e0:	e17b      	b.n	80098da <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	69db      	ldr	r3, [r3, #28]
 80095e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80095ea:	f040 80bd 	bne.w	8009768 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80095ee:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80095f2:	2b20      	cmp	r3, #32
 80095f4:	dc48      	bgt.n	8009688 <UART_SetConfig+0xa50>
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	db7b      	blt.n	80096f2 <UART_SetConfig+0xaba>
 80095fa:	2b20      	cmp	r3, #32
 80095fc:	d879      	bhi.n	80096f2 <UART_SetConfig+0xaba>
 80095fe:	a201      	add	r2, pc, #4	@ (adr r2, 8009604 <UART_SetConfig+0x9cc>)
 8009600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009604:	0800968f 	.word	0x0800968f
 8009608:	08009697 	.word	0x08009697
 800960c:	080096f3 	.word	0x080096f3
 8009610:	080096f3 	.word	0x080096f3
 8009614:	0800969f 	.word	0x0800969f
 8009618:	080096f3 	.word	0x080096f3
 800961c:	080096f3 	.word	0x080096f3
 8009620:	080096f3 	.word	0x080096f3
 8009624:	080096af 	.word	0x080096af
 8009628:	080096f3 	.word	0x080096f3
 800962c:	080096f3 	.word	0x080096f3
 8009630:	080096f3 	.word	0x080096f3
 8009634:	080096f3 	.word	0x080096f3
 8009638:	080096f3 	.word	0x080096f3
 800963c:	080096f3 	.word	0x080096f3
 8009640:	080096f3 	.word	0x080096f3
 8009644:	080096bf 	.word	0x080096bf
 8009648:	080096f3 	.word	0x080096f3
 800964c:	080096f3 	.word	0x080096f3
 8009650:	080096f3 	.word	0x080096f3
 8009654:	080096f3 	.word	0x080096f3
 8009658:	080096f3 	.word	0x080096f3
 800965c:	080096f3 	.word	0x080096f3
 8009660:	080096f3 	.word	0x080096f3
 8009664:	080096f3 	.word	0x080096f3
 8009668:	080096f3 	.word	0x080096f3
 800966c:	080096f3 	.word	0x080096f3
 8009670:	080096f3 	.word	0x080096f3
 8009674:	080096f3 	.word	0x080096f3
 8009678:	080096f3 	.word	0x080096f3
 800967c:	080096f3 	.word	0x080096f3
 8009680:	080096f3 	.word	0x080096f3
 8009684:	080096e5 	.word	0x080096e5
 8009688:	2b40      	cmp	r3, #64	@ 0x40
 800968a:	d02e      	beq.n	80096ea <UART_SetConfig+0xab2>
 800968c:	e031      	b.n	80096f2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800968e:	f7fc fd03 	bl	8006098 <HAL_RCC_GetPCLK1Freq>
 8009692:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009694:	e033      	b.n	80096fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009696:	f7fc fd15 	bl	80060c4 <HAL_RCC_GetPCLK2Freq>
 800969a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800969c:	e02f      	b.n	80096fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800969e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80096a2:	4618      	mov	r0, r3
 80096a4:	f7fd ff1c 	bl	80074e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80096a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096ac:	e027      	b.n	80096fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096ae:	f107 0318 	add.w	r3, r7, #24
 80096b2:	4618      	mov	r0, r3
 80096b4:	f7fe f868 	bl	8007788 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80096b8:	69fb      	ldr	r3, [r7, #28]
 80096ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096bc:	e01f      	b.n	80096fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80096be:	4b69      	ldr	r3, [pc, #420]	@ (8009864 <UART_SetConfig+0xc2c>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f003 0320 	and.w	r3, r3, #32
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d009      	beq.n	80096de <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80096ca:	4b66      	ldr	r3, [pc, #408]	@ (8009864 <UART_SetConfig+0xc2c>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	08db      	lsrs	r3, r3, #3
 80096d0:	f003 0303 	and.w	r3, r3, #3
 80096d4:	4a64      	ldr	r2, [pc, #400]	@ (8009868 <UART_SetConfig+0xc30>)
 80096d6:	fa22 f303 	lsr.w	r3, r2, r3
 80096da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80096dc:	e00f      	b.n	80096fe <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80096de:	4b62      	ldr	r3, [pc, #392]	@ (8009868 <UART_SetConfig+0xc30>)
 80096e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096e2:	e00c      	b.n	80096fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80096e4:	4b61      	ldr	r3, [pc, #388]	@ (800986c <UART_SetConfig+0xc34>)
 80096e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096e8:	e009      	b.n	80096fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80096ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80096ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096f0:	e005      	b.n	80096fe <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80096f2:	2300      	movs	r3, #0
 80096f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80096f6:	2301      	movs	r3, #1
 80096f8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80096fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80096fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009700:	2b00      	cmp	r3, #0
 8009702:	f000 80ea 	beq.w	80098da <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800970a:	4a55      	ldr	r2, [pc, #340]	@ (8009860 <UART_SetConfig+0xc28>)
 800970c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009710:	461a      	mov	r2, r3
 8009712:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009714:	fbb3 f3f2 	udiv	r3, r3, r2
 8009718:	005a      	lsls	r2, r3, #1
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	685b      	ldr	r3, [r3, #4]
 800971e:	085b      	lsrs	r3, r3, #1
 8009720:	441a      	add	r2, r3
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	fbb2 f3f3 	udiv	r3, r2, r3
 800972a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800972c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800972e:	2b0f      	cmp	r3, #15
 8009730:	d916      	bls.n	8009760 <UART_SetConfig+0xb28>
 8009732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009734:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009738:	d212      	bcs.n	8009760 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800973a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800973c:	b29b      	uxth	r3, r3
 800973e:	f023 030f 	bic.w	r3, r3, #15
 8009742:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009746:	085b      	lsrs	r3, r3, #1
 8009748:	b29b      	uxth	r3, r3
 800974a:	f003 0307 	and.w	r3, r3, #7
 800974e:	b29a      	uxth	r2, r3
 8009750:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009752:	4313      	orrs	r3, r2
 8009754:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800975c:	60da      	str	r2, [r3, #12]
 800975e:	e0bc      	b.n	80098da <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009760:	2301      	movs	r3, #1
 8009762:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009766:	e0b8      	b.n	80098da <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009768:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800976c:	2b20      	cmp	r3, #32
 800976e:	dc4b      	bgt.n	8009808 <UART_SetConfig+0xbd0>
 8009770:	2b00      	cmp	r3, #0
 8009772:	f2c0 8087 	blt.w	8009884 <UART_SetConfig+0xc4c>
 8009776:	2b20      	cmp	r3, #32
 8009778:	f200 8084 	bhi.w	8009884 <UART_SetConfig+0xc4c>
 800977c:	a201      	add	r2, pc, #4	@ (adr r2, 8009784 <UART_SetConfig+0xb4c>)
 800977e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009782:	bf00      	nop
 8009784:	0800980f 	.word	0x0800980f
 8009788:	08009817 	.word	0x08009817
 800978c:	08009885 	.word	0x08009885
 8009790:	08009885 	.word	0x08009885
 8009794:	0800981f 	.word	0x0800981f
 8009798:	08009885 	.word	0x08009885
 800979c:	08009885 	.word	0x08009885
 80097a0:	08009885 	.word	0x08009885
 80097a4:	0800982f 	.word	0x0800982f
 80097a8:	08009885 	.word	0x08009885
 80097ac:	08009885 	.word	0x08009885
 80097b0:	08009885 	.word	0x08009885
 80097b4:	08009885 	.word	0x08009885
 80097b8:	08009885 	.word	0x08009885
 80097bc:	08009885 	.word	0x08009885
 80097c0:	08009885 	.word	0x08009885
 80097c4:	0800983f 	.word	0x0800983f
 80097c8:	08009885 	.word	0x08009885
 80097cc:	08009885 	.word	0x08009885
 80097d0:	08009885 	.word	0x08009885
 80097d4:	08009885 	.word	0x08009885
 80097d8:	08009885 	.word	0x08009885
 80097dc:	08009885 	.word	0x08009885
 80097e0:	08009885 	.word	0x08009885
 80097e4:	08009885 	.word	0x08009885
 80097e8:	08009885 	.word	0x08009885
 80097ec:	08009885 	.word	0x08009885
 80097f0:	08009885 	.word	0x08009885
 80097f4:	08009885 	.word	0x08009885
 80097f8:	08009885 	.word	0x08009885
 80097fc:	08009885 	.word	0x08009885
 8009800:	08009885 	.word	0x08009885
 8009804:	08009877 	.word	0x08009877
 8009808:	2b40      	cmp	r3, #64	@ 0x40
 800980a:	d037      	beq.n	800987c <UART_SetConfig+0xc44>
 800980c:	e03a      	b.n	8009884 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800980e:	f7fc fc43 	bl	8006098 <HAL_RCC_GetPCLK1Freq>
 8009812:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009814:	e03c      	b.n	8009890 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009816:	f7fc fc55 	bl	80060c4 <HAL_RCC_GetPCLK2Freq>
 800981a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800981c:	e038      	b.n	8009890 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800981e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009822:	4618      	mov	r0, r3
 8009824:	f7fd fe5c 	bl	80074e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800982a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800982c:	e030      	b.n	8009890 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800982e:	f107 0318 	add.w	r3, r7, #24
 8009832:	4618      	mov	r0, r3
 8009834:	f7fd ffa8 	bl	8007788 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009838:	69fb      	ldr	r3, [r7, #28]
 800983a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800983c:	e028      	b.n	8009890 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800983e:	4b09      	ldr	r3, [pc, #36]	@ (8009864 <UART_SetConfig+0xc2c>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f003 0320 	and.w	r3, r3, #32
 8009846:	2b00      	cmp	r3, #0
 8009848:	d012      	beq.n	8009870 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800984a:	4b06      	ldr	r3, [pc, #24]	@ (8009864 <UART_SetConfig+0xc2c>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	08db      	lsrs	r3, r3, #3
 8009850:	f003 0303 	and.w	r3, r3, #3
 8009854:	4a04      	ldr	r2, [pc, #16]	@ (8009868 <UART_SetConfig+0xc30>)
 8009856:	fa22 f303 	lsr.w	r3, r2, r3
 800985a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800985c:	e018      	b.n	8009890 <UART_SetConfig+0xc58>
 800985e:	bf00      	nop
 8009860:	0800bedc 	.word	0x0800bedc
 8009864:	58024400 	.word	0x58024400
 8009868:	03d09000 	.word	0x03d09000
 800986c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009870:	4b24      	ldr	r3, [pc, #144]	@ (8009904 <UART_SetConfig+0xccc>)
 8009872:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009874:	e00c      	b.n	8009890 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009876:	4b24      	ldr	r3, [pc, #144]	@ (8009908 <UART_SetConfig+0xcd0>)
 8009878:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800987a:	e009      	b.n	8009890 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800987c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009880:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009882:	e005      	b.n	8009890 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009884:	2300      	movs	r3, #0
 8009886:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009888:	2301      	movs	r3, #1
 800988a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800988e:	bf00      	nop
    }

    if (pclk != 0U)
 8009890:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009892:	2b00      	cmp	r3, #0
 8009894:	d021      	beq.n	80098da <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800989a:	4a1c      	ldr	r2, [pc, #112]	@ (800990c <UART_SetConfig+0xcd4>)
 800989c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80098a0:	461a      	mov	r2, r3
 80098a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098a4:	fbb3 f2f2 	udiv	r2, r3, r2
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	685b      	ldr	r3, [r3, #4]
 80098ac:	085b      	lsrs	r3, r3, #1
 80098ae:	441a      	add	r2, r3
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80098b8:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80098ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098bc:	2b0f      	cmp	r3, #15
 80098be:	d909      	bls.n	80098d4 <UART_SetConfig+0xc9c>
 80098c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80098c6:	d205      	bcs.n	80098d4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80098c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ca:	b29a      	uxth	r2, r3
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	60da      	str	r2, [r3, #12]
 80098d2:	e002      	b.n	80098da <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80098d4:	2301      	movs	r3, #1
 80098d6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	2201      	movs	r2, #1
 80098de:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	2201      	movs	r2, #1
 80098e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	2200      	movs	r2, #0
 80098ee:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	2200      	movs	r2, #0
 80098f4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80098f6:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3748      	adds	r7, #72	@ 0x48
 80098fe:	46bd      	mov	sp, r7
 8009900:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009904:	03d09000 	.word	0x03d09000
 8009908:	003d0900 	.word	0x003d0900
 800990c:	0800bedc 	.word	0x0800bedc

08009910 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009910:	b480      	push	{r7}
 8009912:	b083      	sub	sp, #12
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800991c:	f003 0308 	and.w	r3, r3, #8
 8009920:	2b00      	cmp	r3, #0
 8009922:	d00a      	beq.n	800993a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	685b      	ldr	r3, [r3, #4]
 800992a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	430a      	orrs	r2, r1
 8009938:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800993e:	f003 0301 	and.w	r3, r3, #1
 8009942:	2b00      	cmp	r3, #0
 8009944:	d00a      	beq.n	800995c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	430a      	orrs	r2, r1
 800995a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009960:	f003 0302 	and.w	r3, r3, #2
 8009964:	2b00      	cmp	r3, #0
 8009966:	d00a      	beq.n	800997e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	430a      	orrs	r2, r1
 800997c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009982:	f003 0304 	and.w	r3, r3, #4
 8009986:	2b00      	cmp	r3, #0
 8009988:	d00a      	beq.n	80099a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	685b      	ldr	r3, [r3, #4]
 8009990:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	430a      	orrs	r2, r1
 800999e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099a4:	f003 0310 	and.w	r3, r3, #16
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d00a      	beq.n	80099c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	430a      	orrs	r2, r1
 80099c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099c6:	f003 0320 	and.w	r3, r3, #32
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d00a      	beq.n	80099e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	689b      	ldr	r3, [r3, #8]
 80099d4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	430a      	orrs	r2, r1
 80099e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d01a      	beq.n	8009a26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	685b      	ldr	r3, [r3, #4]
 80099f6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	430a      	orrs	r2, r1
 8009a04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009a0e:	d10a      	bne.n	8009a26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	685b      	ldr	r3, [r3, #4]
 8009a16:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	430a      	orrs	r2, r1
 8009a24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d00a      	beq.n	8009a48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	430a      	orrs	r2, r1
 8009a46:	605a      	str	r2, [r3, #4]
  }
}
 8009a48:	bf00      	nop
 8009a4a:	370c      	adds	r7, #12
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a52:	4770      	bx	lr

08009a54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b098      	sub	sp, #96	@ 0x60
 8009a58:	af02      	add	r7, sp, #8
 8009a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009a64:	f7f8 f854 	bl	8001b10 <HAL_GetTick>
 8009a68:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f003 0308 	and.w	r3, r3, #8
 8009a74:	2b08      	cmp	r3, #8
 8009a76:	d12f      	bne.n	8009ad8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a78:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009a7c:	9300      	str	r3, [sp, #0]
 8009a7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a80:	2200      	movs	r2, #0
 8009a82:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f000 f88e 	bl	8009ba8 <UART_WaitOnFlagUntilTimeout>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d022      	beq.n	8009ad8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a9a:	e853 3f00 	ldrex	r3, [r3]
 8009a9e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009aa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009aa2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009aa6:	653b      	str	r3, [r7, #80]	@ 0x50
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	461a      	mov	r2, r3
 8009aae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ab0:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ab2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ab4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009ab6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009ab8:	e841 2300 	strex	r3, r2, [r1]
 8009abc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009abe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d1e6      	bne.n	8009a92 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2220      	movs	r2, #32
 8009ac8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ad4:	2303      	movs	r3, #3
 8009ad6:	e063      	b.n	8009ba0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f003 0304 	and.w	r3, r3, #4
 8009ae2:	2b04      	cmp	r3, #4
 8009ae4:	d149      	bne.n	8009b7a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ae6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009aea:	9300      	str	r3, [sp, #0]
 8009aec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009aee:	2200      	movs	r2, #0
 8009af0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 f857 	bl	8009ba8 <UART_WaitOnFlagUntilTimeout>
 8009afa:	4603      	mov	r3, r0
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d03c      	beq.n	8009b7a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b08:	e853 3f00 	ldrex	r3, [r3]
 8009b0c:	623b      	str	r3, [r7, #32]
   return(result);
 8009b0e:	6a3b      	ldr	r3, [r7, #32]
 8009b10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009b14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	461a      	mov	r2, r3
 8009b1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b20:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009b24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b26:	e841 2300 	strex	r3, r2, [r1]
 8009b2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d1e6      	bne.n	8009b00 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	3308      	adds	r3, #8
 8009b38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	e853 3f00 	ldrex	r3, [r3]
 8009b40:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	f023 0301 	bic.w	r3, r3, #1
 8009b48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	3308      	adds	r3, #8
 8009b50:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009b52:	61fa      	str	r2, [r7, #28]
 8009b54:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b56:	69b9      	ldr	r1, [r7, #24]
 8009b58:	69fa      	ldr	r2, [r7, #28]
 8009b5a:	e841 2300 	strex	r3, r2, [r1]
 8009b5e:	617b      	str	r3, [r7, #20]
   return(result);
 8009b60:	697b      	ldr	r3, [r7, #20]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d1e5      	bne.n	8009b32 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2220      	movs	r2, #32
 8009b6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2200      	movs	r2, #0
 8009b72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b76:	2303      	movs	r3, #3
 8009b78:	e012      	b.n	8009ba0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2220      	movs	r2, #32
 8009b7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2220      	movs	r2, #32
 8009b86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2200      	movs	r2, #0
 8009b94:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009b9e:	2300      	movs	r3, #0
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3758      	adds	r7, #88	@ 0x58
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}

08009ba8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b084      	sub	sp, #16
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	60f8      	str	r0, [r7, #12]
 8009bb0:	60b9      	str	r1, [r7, #8]
 8009bb2:	603b      	str	r3, [r7, #0]
 8009bb4:	4613      	mov	r3, r2
 8009bb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009bb8:	e04f      	b.n	8009c5a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009bba:	69bb      	ldr	r3, [r7, #24]
 8009bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bc0:	d04b      	beq.n	8009c5a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009bc2:	f7f7 ffa5 	bl	8001b10 <HAL_GetTick>
 8009bc6:	4602      	mov	r2, r0
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	1ad3      	subs	r3, r2, r3
 8009bcc:	69ba      	ldr	r2, [r7, #24]
 8009bce:	429a      	cmp	r2, r3
 8009bd0:	d302      	bcc.n	8009bd8 <UART_WaitOnFlagUntilTimeout+0x30>
 8009bd2:	69bb      	ldr	r3, [r7, #24]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d101      	bne.n	8009bdc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009bd8:	2303      	movs	r3, #3
 8009bda:	e04e      	b.n	8009c7a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f003 0304 	and.w	r3, r3, #4
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d037      	beq.n	8009c5a <UART_WaitOnFlagUntilTimeout+0xb2>
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	2b80      	cmp	r3, #128	@ 0x80
 8009bee:	d034      	beq.n	8009c5a <UART_WaitOnFlagUntilTimeout+0xb2>
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	2b40      	cmp	r3, #64	@ 0x40
 8009bf4:	d031      	beq.n	8009c5a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	69db      	ldr	r3, [r3, #28]
 8009bfc:	f003 0308 	and.w	r3, r3, #8
 8009c00:	2b08      	cmp	r3, #8
 8009c02:	d110      	bne.n	8009c26 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	2208      	movs	r2, #8
 8009c0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009c0c:	68f8      	ldr	r0, [r7, #12]
 8009c0e:	f000 f839 	bl	8009c84 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2208      	movs	r2, #8
 8009c16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009c22:	2301      	movs	r3, #1
 8009c24:	e029      	b.n	8009c7a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	69db      	ldr	r3, [r3, #28]
 8009c2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009c30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009c34:	d111      	bne.n	8009c5a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009c3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009c40:	68f8      	ldr	r0, [r7, #12]
 8009c42:	f000 f81f 	bl	8009c84 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2220      	movs	r2, #32
 8009c4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2200      	movs	r2, #0
 8009c52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009c56:	2303      	movs	r3, #3
 8009c58:	e00f      	b.n	8009c7a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	69da      	ldr	r2, [r3, #28]
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	4013      	ands	r3, r2
 8009c64:	68ba      	ldr	r2, [r7, #8]
 8009c66:	429a      	cmp	r2, r3
 8009c68:	bf0c      	ite	eq
 8009c6a:	2301      	moveq	r3, #1
 8009c6c:	2300      	movne	r3, #0
 8009c6e:	b2db      	uxtb	r3, r3
 8009c70:	461a      	mov	r2, r3
 8009c72:	79fb      	ldrb	r3, [r7, #7]
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d0a0      	beq.n	8009bba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009c78:	2300      	movs	r3, #0
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3710      	adds	r7, #16
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}
	...

08009c84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b095      	sub	sp, #84	@ 0x54
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c94:	e853 3f00 	ldrex	r3, [r3]
 8009c98:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009ca0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	461a      	mov	r2, r3
 8009ca8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009caa:	643b      	str	r3, [r7, #64]	@ 0x40
 8009cac:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009cb0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009cb2:	e841 2300 	strex	r3, r2, [r1]
 8009cb6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d1e6      	bne.n	8009c8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	3308      	adds	r3, #8
 8009cc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cc6:	6a3b      	ldr	r3, [r7, #32]
 8009cc8:	e853 3f00 	ldrex	r3, [r3]
 8009ccc:	61fb      	str	r3, [r7, #28]
   return(result);
 8009cce:	69fa      	ldr	r2, [r7, #28]
 8009cd0:	4b1e      	ldr	r3, [pc, #120]	@ (8009d4c <UART_EndRxTransfer+0xc8>)
 8009cd2:	4013      	ands	r3, r2
 8009cd4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	3308      	adds	r3, #8
 8009cdc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009cde:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ce2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ce4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ce6:	e841 2300 	strex	r3, r2, [r1]
 8009cea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d1e5      	bne.n	8009cbe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009cf6:	2b01      	cmp	r3, #1
 8009cf8:	d118      	bne.n	8009d2c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	e853 3f00 	ldrex	r3, [r3]
 8009d06:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	f023 0310 	bic.w	r3, r3, #16
 8009d0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	461a      	mov	r2, r3
 8009d16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d18:	61bb      	str	r3, [r7, #24]
 8009d1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d1c:	6979      	ldr	r1, [r7, #20]
 8009d1e:	69ba      	ldr	r2, [r7, #24]
 8009d20:	e841 2300 	strex	r3, r2, [r1]
 8009d24:	613b      	str	r3, [r7, #16]
   return(result);
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d1e6      	bne.n	8009cfa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2220      	movs	r2, #32
 8009d30:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2200      	movs	r2, #0
 8009d38:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009d40:	bf00      	nop
 8009d42:	3754      	adds	r7, #84	@ 0x54
 8009d44:	46bd      	mov	sp, r7
 8009d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4a:	4770      	bx	lr
 8009d4c:	effffffe 	.word	0xeffffffe

08009d50 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b084      	sub	sp, #16
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d5c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	2200      	movs	r2, #0
 8009d62:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009d6e:	68f8      	ldr	r0, [r7, #12]
 8009d70:	f7fe ff4c 	bl	8008c0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d74:	bf00      	nop
 8009d76:	3710      	adds	r7, #16
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b088      	sub	sp, #32
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	e853 3f00 	ldrex	r3, [r3]
 8009d90:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d98:	61fb      	str	r3, [r7, #28]
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	461a      	mov	r2, r3
 8009da0:	69fb      	ldr	r3, [r7, #28]
 8009da2:	61bb      	str	r3, [r7, #24]
 8009da4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009da6:	6979      	ldr	r1, [r7, #20]
 8009da8:	69ba      	ldr	r2, [r7, #24]
 8009daa:	e841 2300 	strex	r3, r2, [r1]
 8009dae:	613b      	str	r3, [r7, #16]
   return(result);
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d1e6      	bne.n	8009d84 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2220      	movs	r2, #32
 8009dba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f7fe ff17 	bl	8008bf8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009dca:	bf00      	nop
 8009dcc:	3720      	adds	r7, #32
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}

08009dd2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009dd2:	b480      	push	{r7}
 8009dd4:	b083      	sub	sp, #12
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009dda:	bf00      	nop
 8009ddc:	370c      	adds	r7, #12
 8009dde:	46bd      	mov	sp, r7
 8009de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de4:	4770      	bx	lr

08009de6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009de6:	b480      	push	{r7}
 8009de8:	b083      	sub	sp, #12
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009dee:	bf00      	nop
 8009df0:	370c      	adds	r7, #12
 8009df2:	46bd      	mov	sp, r7
 8009df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df8:	4770      	bx	lr

08009dfa <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009dfa:	b480      	push	{r7}
 8009dfc:	b083      	sub	sp, #12
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009e02:	bf00      	nop
 8009e04:	370c      	adds	r7, #12
 8009e06:	46bd      	mov	sp, r7
 8009e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0c:	4770      	bx	lr

08009e0e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009e0e:	b480      	push	{r7}
 8009e10:	b085      	sub	sp, #20
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009e1c:	2b01      	cmp	r3, #1
 8009e1e:	d101      	bne.n	8009e24 <HAL_UARTEx_DisableFifoMode+0x16>
 8009e20:	2302      	movs	r3, #2
 8009e22:	e027      	b.n	8009e74 <HAL_UARTEx_DisableFifoMode+0x66>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2201      	movs	r2, #1
 8009e28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2224      	movs	r2, #36	@ 0x24
 8009e30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	681a      	ldr	r2, [r3, #0]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f022 0201 	bic.w	r2, r2, #1
 8009e4a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009e52:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2200      	movs	r2, #0
 8009e58:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	68fa      	ldr	r2, [r7, #12]
 8009e60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2220      	movs	r2, #32
 8009e66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009e72:	2300      	movs	r3, #0
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3714      	adds	r7, #20
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7e:	4770      	bx	lr

08009e80 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b084      	sub	sp, #16
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009e90:	2b01      	cmp	r3, #1
 8009e92:	d101      	bne.n	8009e98 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009e94:	2302      	movs	r3, #2
 8009e96:	e02d      	b.n	8009ef4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2201      	movs	r2, #1
 8009e9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2224      	movs	r2, #36	@ 0x24
 8009ea4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	681a      	ldr	r2, [r3, #0]
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f022 0201 	bic.w	r2, r2, #1
 8009ebe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	689b      	ldr	r3, [r3, #8]
 8009ec6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	683a      	ldr	r2, [r7, #0]
 8009ed0:	430a      	orrs	r2, r1
 8009ed2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f000 f84f 	bl	8009f78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	68fa      	ldr	r2, [r7, #12]
 8009ee0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2220      	movs	r2, #32
 8009ee6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2200      	movs	r2, #0
 8009eee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009ef2:	2300      	movs	r3, #0
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3710      	adds	r7, #16
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}

08009efc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b084      	sub	sp, #16
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009f0c:	2b01      	cmp	r3, #1
 8009f0e:	d101      	bne.n	8009f14 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009f10:	2302      	movs	r3, #2
 8009f12:	e02d      	b.n	8009f70 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2201      	movs	r2, #1
 8009f18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2224      	movs	r2, #36	@ 0x24
 8009f20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	681a      	ldr	r2, [r3, #0]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f022 0201 	bic.w	r2, r2, #1
 8009f3a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	689b      	ldr	r3, [r3, #8]
 8009f42:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	683a      	ldr	r2, [r7, #0]
 8009f4c:	430a      	orrs	r2, r1
 8009f4e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f000 f811 	bl	8009f78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	68fa      	ldr	r2, [r7, #12]
 8009f5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2220      	movs	r2, #32
 8009f62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009f6e:	2300      	movs	r3, #0
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3710      	adds	r7, #16
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b085      	sub	sp, #20
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d108      	bne.n	8009f9a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2201      	movs	r2, #1
 8009f94:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009f98:	e031      	b.n	8009ffe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009f9a:	2310      	movs	r3, #16
 8009f9c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009f9e:	2310      	movs	r3, #16
 8009fa0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	689b      	ldr	r3, [r3, #8]
 8009fa8:	0e5b      	lsrs	r3, r3, #25
 8009faa:	b2db      	uxtb	r3, r3
 8009fac:	f003 0307 	and.w	r3, r3, #7
 8009fb0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	689b      	ldr	r3, [r3, #8]
 8009fb8:	0f5b      	lsrs	r3, r3, #29
 8009fba:	b2db      	uxtb	r3, r3
 8009fbc:	f003 0307 	and.w	r3, r3, #7
 8009fc0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009fc2:	7bbb      	ldrb	r3, [r7, #14]
 8009fc4:	7b3a      	ldrb	r2, [r7, #12]
 8009fc6:	4911      	ldr	r1, [pc, #68]	@ (800a00c <UARTEx_SetNbDataToProcess+0x94>)
 8009fc8:	5c8a      	ldrb	r2, [r1, r2]
 8009fca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009fce:	7b3a      	ldrb	r2, [r7, #12]
 8009fd0:	490f      	ldr	r1, [pc, #60]	@ (800a010 <UARTEx_SetNbDataToProcess+0x98>)
 8009fd2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009fd4:	fb93 f3f2 	sdiv	r3, r3, r2
 8009fd8:	b29a      	uxth	r2, r3
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009fe0:	7bfb      	ldrb	r3, [r7, #15]
 8009fe2:	7b7a      	ldrb	r2, [r7, #13]
 8009fe4:	4909      	ldr	r1, [pc, #36]	@ (800a00c <UARTEx_SetNbDataToProcess+0x94>)
 8009fe6:	5c8a      	ldrb	r2, [r1, r2]
 8009fe8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009fec:	7b7a      	ldrb	r2, [r7, #13]
 8009fee:	4908      	ldr	r1, [pc, #32]	@ (800a010 <UARTEx_SetNbDataToProcess+0x98>)
 8009ff0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ff2:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ff6:	b29a      	uxth	r2, r3
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009ffe:	bf00      	nop
 800a000:	3714      	adds	r7, #20
 800a002:	46bd      	mov	sp, r7
 800a004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a008:	4770      	bx	lr
 800a00a:	bf00      	nop
 800a00c:	0800bef4 	.word	0x0800bef4
 800a010:	0800befc 	.word	0x0800befc

0800a014 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a014:	b480      	push	{r7}
 800a016:	b085      	sub	sp, #20
 800a018:	af00      	add	r7, sp, #0
 800a01a:	4603      	mov	r3, r0
 800a01c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a01e:	2300      	movs	r3, #0
 800a020:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a022:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a026:	2b84      	cmp	r3, #132	@ 0x84
 800a028:	d005      	beq.n	800a036 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a02a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	4413      	add	r3, r2
 800a032:	3303      	adds	r3, #3
 800a034:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a036:	68fb      	ldr	r3, [r7, #12]
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3714      	adds	r7, #20
 800a03c:	46bd      	mov	sp, r7
 800a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a042:	4770      	bx	lr

0800a044 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a048:	f000 fa7a 	bl	800a540 <vTaskStartScheduler>
  
  return osOK;
 800a04c:	2300      	movs	r3, #0
}
 800a04e:	4618      	mov	r0, r3
 800a050:	bd80      	pop	{r7, pc}

0800a052 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a052:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a054:	b089      	sub	sp, #36	@ 0x24
 800a056:	af04      	add	r7, sp, #16
 800a058:	6078      	str	r0, [r7, #4]
 800a05a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	695b      	ldr	r3, [r3, #20]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d020      	beq.n	800a0a6 <osThreadCreate+0x54>
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	699b      	ldr	r3, [r3, #24]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d01c      	beq.n	800a0a6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	685c      	ldr	r4, [r3, #4]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	691e      	ldr	r6, [r3, #16]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a07e:	4618      	mov	r0, r3
 800a080:	f7ff ffc8 	bl	800a014 <makeFreeRtosPriority>
 800a084:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	695b      	ldr	r3, [r3, #20]
 800a08a:	687a      	ldr	r2, [r7, #4]
 800a08c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a08e:	9202      	str	r2, [sp, #8]
 800a090:	9301      	str	r3, [sp, #4]
 800a092:	9100      	str	r1, [sp, #0]
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	4632      	mov	r2, r6
 800a098:	4629      	mov	r1, r5
 800a09a:	4620      	mov	r0, r4
 800a09c:	f000 f8a0 	bl	800a1e0 <xTaskCreateStatic>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	60fb      	str	r3, [r7, #12]
 800a0a4:	e01c      	b.n	800a0e0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	685c      	ldr	r4, [r3, #4]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a0b2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f7ff ffaa 	bl	800a014 <makeFreeRtosPriority>
 800a0c0:	4602      	mov	r2, r0
 800a0c2:	f107 030c 	add.w	r3, r7, #12
 800a0c6:	9301      	str	r3, [sp, #4]
 800a0c8:	9200      	str	r2, [sp, #0]
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	4632      	mov	r2, r6
 800a0ce:	4629      	mov	r1, r5
 800a0d0:	4620      	mov	r0, r4
 800a0d2:	f000 f8e5 	bl	800a2a0 <xTaskCreate>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	2b01      	cmp	r3, #1
 800a0da:	d001      	beq.n	800a0e0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	e000      	b.n	800a0e2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3714      	adds	r7, #20
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a0ea <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a0ea:	b480      	push	{r7}
 800a0ec:	b083      	sub	sp, #12
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f103 0208 	add.w	r2, r3, #8
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f04f 32ff 	mov.w	r2, #4294967295
 800a102:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f103 0208 	add.w	r2, r3, #8
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f103 0208 	add.w	r2, r3, #8
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2200      	movs	r2, #0
 800a11c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a11e:	bf00      	nop
 800a120:	370c      	adds	r7, #12
 800a122:	46bd      	mov	sp, r7
 800a124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a128:	4770      	bx	lr

0800a12a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a12a:	b480      	push	{r7}
 800a12c:	b083      	sub	sp, #12
 800a12e:	af00      	add	r7, sp, #0
 800a130:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2200      	movs	r2, #0
 800a136:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a138:	bf00      	nop
 800a13a:	370c      	adds	r7, #12
 800a13c:	46bd      	mov	sp, r7
 800a13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a142:	4770      	bx	lr

0800a144 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a144:	b480      	push	{r7}
 800a146:	b085      	sub	sp, #20
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
 800a14c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	68fa      	ldr	r2, [r7, #12]
 800a158:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	689a      	ldr	r2, [r3, #8]
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	689b      	ldr	r3, [r3, #8]
 800a166:	683a      	ldr	r2, [r7, #0]
 800a168:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	683a      	ldr	r2, [r7, #0]
 800a16e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	1c5a      	adds	r2, r3, #1
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	601a      	str	r2, [r3, #0]
}
 800a180:	bf00      	nop
 800a182:	3714      	adds	r7, #20
 800a184:	46bd      	mov	sp, r7
 800a186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18a:	4770      	bx	lr

0800a18c <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a18c:	b480      	push	{r7}
 800a18e:	b085      	sub	sp, #20
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	691b      	ldr	r3, [r3, #16]
 800a198:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	685b      	ldr	r3, [r3, #4]
 800a19e:	687a      	ldr	r2, [r7, #4]
 800a1a0:	6892      	ldr	r2, [r2, #8]
 800a1a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	689b      	ldr	r3, [r3, #8]
 800a1a8:	687a      	ldr	r2, [r7, #4]
 800a1aa:	6852      	ldr	r2, [r2, #4]
 800a1ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	685b      	ldr	r3, [r3, #4]
 800a1b2:	687a      	ldr	r2, [r7, #4]
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d103      	bne.n	800a1c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	689a      	ldr	r2, [r3, #8]
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	1e5a      	subs	r2, r3, #1
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3714      	adds	r7, #20
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1de:	4770      	bx	lr

0800a1e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b08e      	sub	sp, #56	@ 0x38
 800a1e4:	af04      	add	r7, sp, #16
 800a1e6:	60f8      	str	r0, [r7, #12]
 800a1e8:	60b9      	str	r1, [r7, #8]
 800a1ea:	607a      	str	r2, [r7, #4]
 800a1ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a1ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d10b      	bne.n	800a20c <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a1f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1f8:	f383 8811 	msr	BASEPRI, r3
 800a1fc:	f3bf 8f6f 	isb	sy
 800a200:	f3bf 8f4f 	dsb	sy
 800a204:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a206:	bf00      	nop
 800a208:	bf00      	nop
 800a20a:	e7fd      	b.n	800a208 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a20c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d10b      	bne.n	800a22a <xTaskCreateStatic+0x4a>
	__asm volatile
 800a212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a216:	f383 8811 	msr	BASEPRI, r3
 800a21a:	f3bf 8f6f 	isb	sy
 800a21e:	f3bf 8f4f 	dsb	sy
 800a222:	61fb      	str	r3, [r7, #28]
}
 800a224:	bf00      	nop
 800a226:	bf00      	nop
 800a228:	e7fd      	b.n	800a226 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a22a:	23a0      	movs	r3, #160	@ 0xa0
 800a22c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	2ba0      	cmp	r3, #160	@ 0xa0
 800a232:	d00b      	beq.n	800a24c <xTaskCreateStatic+0x6c>
	__asm volatile
 800a234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a238:	f383 8811 	msr	BASEPRI, r3
 800a23c:	f3bf 8f6f 	isb	sy
 800a240:	f3bf 8f4f 	dsb	sy
 800a244:	61bb      	str	r3, [r7, #24]
}
 800a246:	bf00      	nop
 800a248:	bf00      	nop
 800a24a:	e7fd      	b.n	800a248 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a24c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a24e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a250:	2b00      	cmp	r3, #0
 800a252:	d01e      	beq.n	800a292 <xTaskCreateStatic+0xb2>
 800a254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a256:	2b00      	cmp	r3, #0
 800a258:	d01b      	beq.n	800a292 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a25a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a25c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a25e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a260:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a262:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a266:	2202      	movs	r2, #2
 800a268:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a26c:	2300      	movs	r3, #0
 800a26e:	9303      	str	r3, [sp, #12]
 800a270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a272:	9302      	str	r3, [sp, #8]
 800a274:	f107 0314 	add.w	r3, r7, #20
 800a278:	9301      	str	r3, [sp, #4]
 800a27a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a27c:	9300      	str	r3, [sp, #0]
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	687a      	ldr	r2, [r7, #4]
 800a282:	68b9      	ldr	r1, [r7, #8]
 800a284:	68f8      	ldr	r0, [r7, #12]
 800a286:	f000 f851 	bl	800a32c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a28a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a28c:	f000 f8ee 	bl	800a46c <prvAddNewTaskToReadyList>
 800a290:	e001      	b.n	800a296 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a292:	2300      	movs	r3, #0
 800a294:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a296:	697b      	ldr	r3, [r7, #20]
	}
 800a298:	4618      	mov	r0, r3
 800a29a:	3728      	adds	r7, #40	@ 0x28
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}

0800a2a0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b08c      	sub	sp, #48	@ 0x30
 800a2a4:	af04      	add	r7, sp, #16
 800a2a6:	60f8      	str	r0, [r7, #12]
 800a2a8:	60b9      	str	r1, [r7, #8]
 800a2aa:	603b      	str	r3, [r7, #0]
 800a2ac:	4613      	mov	r3, r2
 800a2ae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a2b0:	88fb      	ldrh	r3, [r7, #6]
 800a2b2:	009b      	lsls	r3, r3, #2
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	f000 fe67 	bl	800af88 <pvPortMalloc>
 800a2ba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d00e      	beq.n	800a2e0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a2c2:	20a0      	movs	r0, #160	@ 0xa0
 800a2c4:	f000 fe60 	bl	800af88 <pvPortMalloc>
 800a2c8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a2ca:	69fb      	ldr	r3, [r7, #28]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d003      	beq.n	800a2d8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a2d0:	69fb      	ldr	r3, [r7, #28]
 800a2d2:	697a      	ldr	r2, [r7, #20]
 800a2d4:	631a      	str	r2, [r3, #48]	@ 0x30
 800a2d6:	e005      	b.n	800a2e4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a2d8:	6978      	ldr	r0, [r7, #20]
 800a2da:	f000 ff23 	bl	800b124 <vPortFree>
 800a2de:	e001      	b.n	800a2e4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a2e4:	69fb      	ldr	r3, [r7, #28]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d017      	beq.n	800a31a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a2ea:	69fb      	ldr	r3, [r7, #28]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a2f2:	88fa      	ldrh	r2, [r7, #6]
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	9303      	str	r3, [sp, #12]
 800a2f8:	69fb      	ldr	r3, [r7, #28]
 800a2fa:	9302      	str	r3, [sp, #8]
 800a2fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2fe:	9301      	str	r3, [sp, #4]
 800a300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a302:	9300      	str	r3, [sp, #0]
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	68b9      	ldr	r1, [r7, #8]
 800a308:	68f8      	ldr	r0, [r7, #12]
 800a30a:	f000 f80f 	bl	800a32c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a30e:	69f8      	ldr	r0, [r7, #28]
 800a310:	f000 f8ac 	bl	800a46c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a314:	2301      	movs	r3, #1
 800a316:	61bb      	str	r3, [r7, #24]
 800a318:	e002      	b.n	800a320 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a31a:	f04f 33ff 	mov.w	r3, #4294967295
 800a31e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a320:	69bb      	ldr	r3, [r7, #24]
	}
 800a322:	4618      	mov	r0, r3
 800a324:	3720      	adds	r7, #32
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}
	...

0800a32c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b088      	sub	sp, #32
 800a330:	af00      	add	r7, sp, #0
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	60b9      	str	r1, [r7, #8]
 800a336:	607a      	str	r2, [r7, #4]
 800a338:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a33a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a33c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a33e:	6879      	ldr	r1, [r7, #4]
 800a340:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800a344:	440b      	add	r3, r1
 800a346:	009b      	lsls	r3, r3, #2
 800a348:	4413      	add	r3, r2
 800a34a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a34c:	69bb      	ldr	r3, [r7, #24]
 800a34e:	f023 0307 	bic.w	r3, r3, #7
 800a352:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a354:	69bb      	ldr	r3, [r7, #24]
 800a356:	f003 0307 	and.w	r3, r3, #7
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d00b      	beq.n	800a376 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800a35e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a362:	f383 8811 	msr	BASEPRI, r3
 800a366:	f3bf 8f6f 	isb	sy
 800a36a:	f3bf 8f4f 	dsb	sy
 800a36e:	617b      	str	r3, [r7, #20]
}
 800a370:	bf00      	nop
 800a372:	bf00      	nop
 800a374:	e7fd      	b.n	800a372 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d01f      	beq.n	800a3bc <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a37c:	2300      	movs	r3, #0
 800a37e:	61fb      	str	r3, [r7, #28]
 800a380:	e012      	b.n	800a3a8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a382:	68ba      	ldr	r2, [r7, #8]
 800a384:	69fb      	ldr	r3, [r7, #28]
 800a386:	4413      	add	r3, r2
 800a388:	7819      	ldrb	r1, [r3, #0]
 800a38a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a38c:	69fb      	ldr	r3, [r7, #28]
 800a38e:	4413      	add	r3, r2
 800a390:	3334      	adds	r3, #52	@ 0x34
 800a392:	460a      	mov	r2, r1
 800a394:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a396:	68ba      	ldr	r2, [r7, #8]
 800a398:	69fb      	ldr	r3, [r7, #28]
 800a39a:	4413      	add	r3, r2
 800a39c:	781b      	ldrb	r3, [r3, #0]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d006      	beq.n	800a3b0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a3a2:	69fb      	ldr	r3, [r7, #28]
 800a3a4:	3301      	adds	r3, #1
 800a3a6:	61fb      	str	r3, [r7, #28]
 800a3a8:	69fb      	ldr	r3, [r7, #28]
 800a3aa:	2b0f      	cmp	r3, #15
 800a3ac:	d9e9      	bls.n	800a382 <prvInitialiseNewTask+0x56>
 800a3ae:	e000      	b.n	800a3b2 <prvInitialiseNewTask+0x86>
			{
				break;
 800a3b0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a3b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a3ba:	e003      	b.n	800a3c4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a3bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3be:	2200      	movs	r2, #0
 800a3c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a3c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3c6:	2b06      	cmp	r3, #6
 800a3c8:	d901      	bls.n	800a3ce <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a3ca:	2306      	movs	r3, #6
 800a3cc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a3ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a3d2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a3d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a3d8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a3da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3dc:	2200      	movs	r2, #0
 800a3de:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a3e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3e2:	3304      	adds	r3, #4
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f7ff fea0 	bl	800a12a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a3ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ec:	3318      	adds	r3, #24
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f7ff fe9b 	bl	800a12a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a3f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3f8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3fc:	f1c3 0207 	rsb	r2, r3, #7
 800a400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a402:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a406:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a408:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a40a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a40c:	2200      	movs	r2, #0
 800a40e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a414:	2200      	movs	r2, #0
 800a416:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a41a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a41c:	334c      	adds	r3, #76	@ 0x4c
 800a41e:	224c      	movs	r2, #76	@ 0x4c
 800a420:	2100      	movs	r1, #0
 800a422:	4618      	mov	r0, r3
 800a424:	f001 f996 	bl	800b754 <memset>
 800a428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a42a:	4a0d      	ldr	r2, [pc, #52]	@ (800a460 <prvInitialiseNewTask+0x134>)
 800a42c:	651a      	str	r2, [r3, #80]	@ 0x50
 800a42e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a430:	4a0c      	ldr	r2, [pc, #48]	@ (800a464 <prvInitialiseNewTask+0x138>)
 800a432:	655a      	str	r2, [r3, #84]	@ 0x54
 800a434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a436:	4a0c      	ldr	r2, [pc, #48]	@ (800a468 <prvInitialiseNewTask+0x13c>)
 800a438:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a43a:	683a      	ldr	r2, [r7, #0]
 800a43c:	68f9      	ldr	r1, [r7, #12]
 800a43e:	69b8      	ldr	r0, [r7, #24]
 800a440:	f000 fb8e 	bl	800ab60 <pxPortInitialiseStack>
 800a444:	4602      	mov	r2, r0
 800a446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a448:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a44a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d002      	beq.n	800a456 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a452:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a454:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a456:	bf00      	nop
 800a458:	3720      	adds	r7, #32
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}
 800a45e:	bf00      	nop
 800a460:	24004568 	.word	0x24004568
 800a464:	240045d0 	.word	0x240045d0
 800a468:	24004638 	.word	0x24004638

0800a46c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b082      	sub	sp, #8
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a474:	f000 fca8 	bl	800adc8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a478:	4b2a      	ldr	r3, [pc, #168]	@ (800a524 <prvAddNewTaskToReadyList+0xb8>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	3301      	adds	r3, #1
 800a47e:	4a29      	ldr	r2, [pc, #164]	@ (800a524 <prvAddNewTaskToReadyList+0xb8>)
 800a480:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a482:	4b29      	ldr	r3, [pc, #164]	@ (800a528 <prvAddNewTaskToReadyList+0xbc>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d109      	bne.n	800a49e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a48a:	4a27      	ldr	r2, [pc, #156]	@ (800a528 <prvAddNewTaskToReadyList+0xbc>)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a490:	4b24      	ldr	r3, [pc, #144]	@ (800a524 <prvAddNewTaskToReadyList+0xb8>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	2b01      	cmp	r3, #1
 800a496:	d110      	bne.n	800a4ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a498:	f000 fa9e 	bl	800a9d8 <prvInitialiseTaskLists>
 800a49c:	e00d      	b.n	800a4ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a49e:	4b23      	ldr	r3, [pc, #140]	@ (800a52c <prvAddNewTaskToReadyList+0xc0>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d109      	bne.n	800a4ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a4a6:	4b20      	ldr	r3, [pc, #128]	@ (800a528 <prvAddNewTaskToReadyList+0xbc>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	d802      	bhi.n	800a4ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a4b4:	4a1c      	ldr	r2, [pc, #112]	@ (800a528 <prvAddNewTaskToReadyList+0xbc>)
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a4ba:	4b1d      	ldr	r3, [pc, #116]	@ (800a530 <prvAddNewTaskToReadyList+0xc4>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	3301      	adds	r3, #1
 800a4c0:	4a1b      	ldr	r2, [pc, #108]	@ (800a530 <prvAddNewTaskToReadyList+0xc4>)
 800a4c2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4c8:	2201      	movs	r2, #1
 800a4ca:	409a      	lsls	r2, r3
 800a4cc:	4b19      	ldr	r3, [pc, #100]	@ (800a534 <prvAddNewTaskToReadyList+0xc8>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	4313      	orrs	r3, r2
 800a4d2:	4a18      	ldr	r2, [pc, #96]	@ (800a534 <prvAddNewTaskToReadyList+0xc8>)
 800a4d4:	6013      	str	r3, [r2, #0]
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4da:	4613      	mov	r3, r2
 800a4dc:	009b      	lsls	r3, r3, #2
 800a4de:	4413      	add	r3, r2
 800a4e0:	009b      	lsls	r3, r3, #2
 800a4e2:	4a15      	ldr	r2, [pc, #84]	@ (800a538 <prvAddNewTaskToReadyList+0xcc>)
 800a4e4:	441a      	add	r2, r3
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	3304      	adds	r3, #4
 800a4ea:	4619      	mov	r1, r3
 800a4ec:	4610      	mov	r0, r2
 800a4ee:	f7ff fe29 	bl	800a144 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a4f2:	f000 fc9b 	bl	800ae2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a4f6:	4b0d      	ldr	r3, [pc, #52]	@ (800a52c <prvAddNewTaskToReadyList+0xc0>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d00e      	beq.n	800a51c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a4fe:	4b0a      	ldr	r3, [pc, #40]	@ (800a528 <prvAddNewTaskToReadyList+0xbc>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a508:	429a      	cmp	r2, r3
 800a50a:	d207      	bcs.n	800a51c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a50c:	4b0b      	ldr	r3, [pc, #44]	@ (800a53c <prvAddNewTaskToReadyList+0xd0>)
 800a50e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a512:	601a      	str	r2, [r3, #0]
 800a514:	f3bf 8f4f 	dsb	sy
 800a518:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a51c:	bf00      	nop
 800a51e:	3708      	adds	r7, #8
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}
 800a524:	24000914 	.word	0x24000914
 800a528:	24000814 	.word	0x24000814
 800a52c:	24000920 	.word	0x24000920
 800a530:	24000930 	.word	0x24000930
 800a534:	2400091c 	.word	0x2400091c
 800a538:	24000818 	.word	0x24000818
 800a53c:	e000ed04 	.word	0xe000ed04

0800a540 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b08a      	sub	sp, #40	@ 0x28
 800a544:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a546:	2300      	movs	r3, #0
 800a548:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a54a:	2300      	movs	r3, #0
 800a54c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a54e:	463a      	mov	r2, r7
 800a550:	1d39      	adds	r1, r7, #4
 800a552:	f107 0308 	add.w	r3, r7, #8
 800a556:	4618      	mov	r0, r3
 800a558:	f7f6 fa38 	bl	80009cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a55c:	6839      	ldr	r1, [r7, #0]
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	68ba      	ldr	r2, [r7, #8]
 800a562:	9202      	str	r2, [sp, #8]
 800a564:	9301      	str	r3, [sp, #4]
 800a566:	2300      	movs	r3, #0
 800a568:	9300      	str	r3, [sp, #0]
 800a56a:	2300      	movs	r3, #0
 800a56c:	460a      	mov	r2, r1
 800a56e:	4921      	ldr	r1, [pc, #132]	@ (800a5f4 <vTaskStartScheduler+0xb4>)
 800a570:	4821      	ldr	r0, [pc, #132]	@ (800a5f8 <vTaskStartScheduler+0xb8>)
 800a572:	f7ff fe35 	bl	800a1e0 <xTaskCreateStatic>
 800a576:	4603      	mov	r3, r0
 800a578:	4a20      	ldr	r2, [pc, #128]	@ (800a5fc <vTaskStartScheduler+0xbc>)
 800a57a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a57c:	4b1f      	ldr	r3, [pc, #124]	@ (800a5fc <vTaskStartScheduler+0xbc>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d002      	beq.n	800a58a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a584:	2301      	movs	r3, #1
 800a586:	617b      	str	r3, [r7, #20]
 800a588:	e001      	b.n	800a58e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a58a:	2300      	movs	r3, #0
 800a58c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a58e:	697b      	ldr	r3, [r7, #20]
 800a590:	2b01      	cmp	r3, #1
 800a592:	d11b      	bne.n	800a5cc <vTaskStartScheduler+0x8c>
	__asm volatile
 800a594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a598:	f383 8811 	msr	BASEPRI, r3
 800a59c:	f3bf 8f6f 	isb	sy
 800a5a0:	f3bf 8f4f 	dsb	sy
 800a5a4:	613b      	str	r3, [r7, #16]
}
 800a5a6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a5a8:	4b15      	ldr	r3, [pc, #84]	@ (800a600 <vTaskStartScheduler+0xc0>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	334c      	adds	r3, #76	@ 0x4c
 800a5ae:	4a15      	ldr	r2, [pc, #84]	@ (800a604 <vTaskStartScheduler+0xc4>)
 800a5b0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a5b2:	4b15      	ldr	r3, [pc, #84]	@ (800a608 <vTaskStartScheduler+0xc8>)
 800a5b4:	f04f 32ff 	mov.w	r2, #4294967295
 800a5b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a5ba:	4b14      	ldr	r3, [pc, #80]	@ (800a60c <vTaskStartScheduler+0xcc>)
 800a5bc:	2201      	movs	r2, #1
 800a5be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a5c0:	4b13      	ldr	r3, [pc, #76]	@ (800a610 <vTaskStartScheduler+0xd0>)
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a5c6:	f000 fb5b 	bl	800ac80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a5ca:	e00f      	b.n	800a5ec <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5d2:	d10b      	bne.n	800a5ec <vTaskStartScheduler+0xac>
	__asm volatile
 800a5d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5d8:	f383 8811 	msr	BASEPRI, r3
 800a5dc:	f3bf 8f6f 	isb	sy
 800a5e0:	f3bf 8f4f 	dsb	sy
 800a5e4:	60fb      	str	r3, [r7, #12]
}
 800a5e6:	bf00      	nop
 800a5e8:	bf00      	nop
 800a5ea:	e7fd      	b.n	800a5e8 <vTaskStartScheduler+0xa8>
}
 800a5ec:	bf00      	nop
 800a5ee:	3718      	adds	r7, #24
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}
 800a5f4:	0800bec4 	.word	0x0800bec4
 800a5f8:	0800a9a9 	.word	0x0800a9a9
 800a5fc:	24000938 	.word	0x24000938
 800a600:	24000814 	.word	0x24000814
 800a604:	24000020 	.word	0x24000020
 800a608:	24000934 	.word	0x24000934
 800a60c:	24000920 	.word	0x24000920
 800a610:	24000918 	.word	0x24000918

0800a614 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a614:	b480      	push	{r7}
 800a616:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a618:	4b04      	ldr	r3, [pc, #16]	@ (800a62c <vTaskSuspendAll+0x18>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	3301      	adds	r3, #1
 800a61e:	4a03      	ldr	r2, [pc, #12]	@ (800a62c <vTaskSuspendAll+0x18>)
 800a620:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a622:	bf00      	nop
 800a624:	46bd      	mov	sp, r7
 800a626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62a:	4770      	bx	lr
 800a62c:	2400093c 	.word	0x2400093c

0800a630 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b084      	sub	sp, #16
 800a634:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a636:	2300      	movs	r3, #0
 800a638:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a63a:	2300      	movs	r3, #0
 800a63c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a63e:	4b42      	ldr	r3, [pc, #264]	@ (800a748 <xTaskResumeAll+0x118>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d10b      	bne.n	800a65e <xTaskResumeAll+0x2e>
	__asm volatile
 800a646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a64a:	f383 8811 	msr	BASEPRI, r3
 800a64e:	f3bf 8f6f 	isb	sy
 800a652:	f3bf 8f4f 	dsb	sy
 800a656:	603b      	str	r3, [r7, #0]
}
 800a658:	bf00      	nop
 800a65a:	bf00      	nop
 800a65c:	e7fd      	b.n	800a65a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a65e:	f000 fbb3 	bl	800adc8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a662:	4b39      	ldr	r3, [pc, #228]	@ (800a748 <xTaskResumeAll+0x118>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	3b01      	subs	r3, #1
 800a668:	4a37      	ldr	r2, [pc, #220]	@ (800a748 <xTaskResumeAll+0x118>)
 800a66a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a66c:	4b36      	ldr	r3, [pc, #216]	@ (800a748 <xTaskResumeAll+0x118>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d161      	bne.n	800a738 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a674:	4b35      	ldr	r3, [pc, #212]	@ (800a74c <xTaskResumeAll+0x11c>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d05d      	beq.n	800a738 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a67c:	e02e      	b.n	800a6dc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a67e:	4b34      	ldr	r3, [pc, #208]	@ (800a750 <xTaskResumeAll+0x120>)
 800a680:	68db      	ldr	r3, [r3, #12]
 800a682:	68db      	ldr	r3, [r3, #12]
 800a684:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	3318      	adds	r3, #24
 800a68a:	4618      	mov	r0, r3
 800a68c:	f7ff fd7e 	bl	800a18c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	3304      	adds	r3, #4
 800a694:	4618      	mov	r0, r3
 800a696:	f7ff fd79 	bl	800a18c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a69e:	2201      	movs	r2, #1
 800a6a0:	409a      	lsls	r2, r3
 800a6a2:	4b2c      	ldr	r3, [pc, #176]	@ (800a754 <xTaskResumeAll+0x124>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	4313      	orrs	r3, r2
 800a6a8:	4a2a      	ldr	r2, [pc, #168]	@ (800a754 <xTaskResumeAll+0x124>)
 800a6aa:	6013      	str	r3, [r2, #0]
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6b0:	4613      	mov	r3, r2
 800a6b2:	009b      	lsls	r3, r3, #2
 800a6b4:	4413      	add	r3, r2
 800a6b6:	009b      	lsls	r3, r3, #2
 800a6b8:	4a27      	ldr	r2, [pc, #156]	@ (800a758 <xTaskResumeAll+0x128>)
 800a6ba:	441a      	add	r2, r3
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	3304      	adds	r3, #4
 800a6c0:	4619      	mov	r1, r3
 800a6c2:	4610      	mov	r0, r2
 800a6c4:	f7ff fd3e 	bl	800a144 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6cc:	4b23      	ldr	r3, [pc, #140]	@ (800a75c <xTaskResumeAll+0x12c>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	d302      	bcc.n	800a6dc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a6d6:	4b22      	ldr	r3, [pc, #136]	@ (800a760 <xTaskResumeAll+0x130>)
 800a6d8:	2201      	movs	r2, #1
 800a6da:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a6dc:	4b1c      	ldr	r3, [pc, #112]	@ (800a750 <xTaskResumeAll+0x120>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d1cc      	bne.n	800a67e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d001      	beq.n	800a6ee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a6ea:	f000 fa19 	bl	800ab20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a6ee:	4b1d      	ldr	r3, [pc, #116]	@ (800a764 <xTaskResumeAll+0x134>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d010      	beq.n	800a71c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a6fa:	f000 f837 	bl	800a76c <xTaskIncrementTick>
 800a6fe:	4603      	mov	r3, r0
 800a700:	2b00      	cmp	r3, #0
 800a702:	d002      	beq.n	800a70a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a704:	4b16      	ldr	r3, [pc, #88]	@ (800a760 <xTaskResumeAll+0x130>)
 800a706:	2201      	movs	r2, #1
 800a708:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	3b01      	subs	r3, #1
 800a70e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d1f1      	bne.n	800a6fa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a716:	4b13      	ldr	r3, [pc, #76]	@ (800a764 <xTaskResumeAll+0x134>)
 800a718:	2200      	movs	r2, #0
 800a71a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a71c:	4b10      	ldr	r3, [pc, #64]	@ (800a760 <xTaskResumeAll+0x130>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d009      	beq.n	800a738 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a724:	2301      	movs	r3, #1
 800a726:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a728:	4b0f      	ldr	r3, [pc, #60]	@ (800a768 <xTaskResumeAll+0x138>)
 800a72a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a72e:	601a      	str	r2, [r3, #0]
 800a730:	f3bf 8f4f 	dsb	sy
 800a734:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a738:	f000 fb78 	bl	800ae2c <vPortExitCritical>

	return xAlreadyYielded;
 800a73c:	68bb      	ldr	r3, [r7, #8]
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3710      	adds	r7, #16
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}
 800a746:	bf00      	nop
 800a748:	2400093c 	.word	0x2400093c
 800a74c:	24000914 	.word	0x24000914
 800a750:	240008d4 	.word	0x240008d4
 800a754:	2400091c 	.word	0x2400091c
 800a758:	24000818 	.word	0x24000818
 800a75c:	24000814 	.word	0x24000814
 800a760:	24000928 	.word	0x24000928
 800a764:	24000924 	.word	0x24000924
 800a768:	e000ed04 	.word	0xe000ed04

0800a76c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b086      	sub	sp, #24
 800a770:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a772:	2300      	movs	r3, #0
 800a774:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a776:	4b4f      	ldr	r3, [pc, #316]	@ (800a8b4 <xTaskIncrementTick+0x148>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	f040 808f 	bne.w	800a89e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a780:	4b4d      	ldr	r3, [pc, #308]	@ (800a8b8 <xTaskIncrementTick+0x14c>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	3301      	adds	r3, #1
 800a786:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a788:	4a4b      	ldr	r2, [pc, #300]	@ (800a8b8 <xTaskIncrementTick+0x14c>)
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d121      	bne.n	800a7d8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a794:	4b49      	ldr	r3, [pc, #292]	@ (800a8bc <xTaskIncrementTick+0x150>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d00b      	beq.n	800a7b6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800a79e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7a2:	f383 8811 	msr	BASEPRI, r3
 800a7a6:	f3bf 8f6f 	isb	sy
 800a7aa:	f3bf 8f4f 	dsb	sy
 800a7ae:	603b      	str	r3, [r7, #0]
}
 800a7b0:	bf00      	nop
 800a7b2:	bf00      	nop
 800a7b4:	e7fd      	b.n	800a7b2 <xTaskIncrementTick+0x46>
 800a7b6:	4b41      	ldr	r3, [pc, #260]	@ (800a8bc <xTaskIncrementTick+0x150>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	60fb      	str	r3, [r7, #12]
 800a7bc:	4b40      	ldr	r3, [pc, #256]	@ (800a8c0 <xTaskIncrementTick+0x154>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	4a3e      	ldr	r2, [pc, #248]	@ (800a8bc <xTaskIncrementTick+0x150>)
 800a7c2:	6013      	str	r3, [r2, #0]
 800a7c4:	4a3e      	ldr	r2, [pc, #248]	@ (800a8c0 <xTaskIncrementTick+0x154>)
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	6013      	str	r3, [r2, #0]
 800a7ca:	4b3e      	ldr	r3, [pc, #248]	@ (800a8c4 <xTaskIncrementTick+0x158>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	3301      	adds	r3, #1
 800a7d0:	4a3c      	ldr	r2, [pc, #240]	@ (800a8c4 <xTaskIncrementTick+0x158>)
 800a7d2:	6013      	str	r3, [r2, #0]
 800a7d4:	f000 f9a4 	bl	800ab20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a7d8:	4b3b      	ldr	r3, [pc, #236]	@ (800a8c8 <xTaskIncrementTick+0x15c>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	693a      	ldr	r2, [r7, #16]
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	d348      	bcc.n	800a874 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a7e2:	4b36      	ldr	r3, [pc, #216]	@ (800a8bc <xTaskIncrementTick+0x150>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d104      	bne.n	800a7f6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7ec:	4b36      	ldr	r3, [pc, #216]	@ (800a8c8 <xTaskIncrementTick+0x15c>)
 800a7ee:	f04f 32ff 	mov.w	r2, #4294967295
 800a7f2:	601a      	str	r2, [r3, #0]
					break;
 800a7f4:	e03e      	b.n	800a874 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7f6:	4b31      	ldr	r3, [pc, #196]	@ (800a8bc <xTaskIncrementTick+0x150>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	68db      	ldr	r3, [r3, #12]
 800a7fc:	68db      	ldr	r3, [r3, #12]
 800a7fe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a806:	693a      	ldr	r2, [r7, #16]
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d203      	bcs.n	800a816 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a80e:	4a2e      	ldr	r2, [pc, #184]	@ (800a8c8 <xTaskIncrementTick+0x15c>)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a814:	e02e      	b.n	800a874 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	3304      	adds	r3, #4
 800a81a:	4618      	mov	r0, r3
 800a81c:	f7ff fcb6 	bl	800a18c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a824:	2b00      	cmp	r3, #0
 800a826:	d004      	beq.n	800a832 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	3318      	adds	r3, #24
 800a82c:	4618      	mov	r0, r3
 800a82e:	f7ff fcad 	bl	800a18c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a836:	2201      	movs	r2, #1
 800a838:	409a      	lsls	r2, r3
 800a83a:	4b24      	ldr	r3, [pc, #144]	@ (800a8cc <xTaskIncrementTick+0x160>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	4313      	orrs	r3, r2
 800a840:	4a22      	ldr	r2, [pc, #136]	@ (800a8cc <xTaskIncrementTick+0x160>)
 800a842:	6013      	str	r3, [r2, #0]
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a848:	4613      	mov	r3, r2
 800a84a:	009b      	lsls	r3, r3, #2
 800a84c:	4413      	add	r3, r2
 800a84e:	009b      	lsls	r3, r3, #2
 800a850:	4a1f      	ldr	r2, [pc, #124]	@ (800a8d0 <xTaskIncrementTick+0x164>)
 800a852:	441a      	add	r2, r3
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	3304      	adds	r3, #4
 800a858:	4619      	mov	r1, r3
 800a85a:	4610      	mov	r0, r2
 800a85c:	f7ff fc72 	bl	800a144 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a864:	4b1b      	ldr	r3, [pc, #108]	@ (800a8d4 <xTaskIncrementTick+0x168>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d3b9      	bcc.n	800a7e2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a86e:	2301      	movs	r3, #1
 800a870:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a872:	e7b6      	b.n	800a7e2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a874:	4b17      	ldr	r3, [pc, #92]	@ (800a8d4 <xTaskIncrementTick+0x168>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a87a:	4915      	ldr	r1, [pc, #84]	@ (800a8d0 <xTaskIncrementTick+0x164>)
 800a87c:	4613      	mov	r3, r2
 800a87e:	009b      	lsls	r3, r3, #2
 800a880:	4413      	add	r3, r2
 800a882:	009b      	lsls	r3, r3, #2
 800a884:	440b      	add	r3, r1
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	2b01      	cmp	r3, #1
 800a88a:	d901      	bls.n	800a890 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a88c:	2301      	movs	r3, #1
 800a88e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a890:	4b11      	ldr	r3, [pc, #68]	@ (800a8d8 <xTaskIncrementTick+0x16c>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d007      	beq.n	800a8a8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a898:	2301      	movs	r3, #1
 800a89a:	617b      	str	r3, [r7, #20]
 800a89c:	e004      	b.n	800a8a8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a89e:	4b0f      	ldr	r3, [pc, #60]	@ (800a8dc <xTaskIncrementTick+0x170>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	3301      	adds	r3, #1
 800a8a4:	4a0d      	ldr	r2, [pc, #52]	@ (800a8dc <xTaskIncrementTick+0x170>)
 800a8a6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a8a8:	697b      	ldr	r3, [r7, #20]
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3718      	adds	r7, #24
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}
 800a8b2:	bf00      	nop
 800a8b4:	2400093c 	.word	0x2400093c
 800a8b8:	24000918 	.word	0x24000918
 800a8bc:	240008cc 	.word	0x240008cc
 800a8c0:	240008d0 	.word	0x240008d0
 800a8c4:	2400092c 	.word	0x2400092c
 800a8c8:	24000934 	.word	0x24000934
 800a8cc:	2400091c 	.word	0x2400091c
 800a8d0:	24000818 	.word	0x24000818
 800a8d4:	24000814 	.word	0x24000814
 800a8d8:	24000928 	.word	0x24000928
 800a8dc:	24000924 	.word	0x24000924

0800a8e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b087      	sub	sp, #28
 800a8e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a8e6:	4b2a      	ldr	r3, [pc, #168]	@ (800a990 <vTaskSwitchContext+0xb0>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d003      	beq.n	800a8f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a8ee:	4b29      	ldr	r3, [pc, #164]	@ (800a994 <vTaskSwitchContext+0xb4>)
 800a8f0:	2201      	movs	r2, #1
 800a8f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a8f4:	e045      	b.n	800a982 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800a8f6:	4b27      	ldr	r3, [pc, #156]	@ (800a994 <vTaskSwitchContext+0xb4>)
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8fc:	4b26      	ldr	r3, [pc, #152]	@ (800a998 <vTaskSwitchContext+0xb8>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	fab3 f383 	clz	r3, r3
 800a908:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a90a:	7afb      	ldrb	r3, [r7, #11]
 800a90c:	f1c3 031f 	rsb	r3, r3, #31
 800a910:	617b      	str	r3, [r7, #20]
 800a912:	4922      	ldr	r1, [pc, #136]	@ (800a99c <vTaskSwitchContext+0xbc>)
 800a914:	697a      	ldr	r2, [r7, #20]
 800a916:	4613      	mov	r3, r2
 800a918:	009b      	lsls	r3, r3, #2
 800a91a:	4413      	add	r3, r2
 800a91c:	009b      	lsls	r3, r3, #2
 800a91e:	440b      	add	r3, r1
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d10b      	bne.n	800a93e <vTaskSwitchContext+0x5e>
	__asm volatile
 800a926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a92a:	f383 8811 	msr	BASEPRI, r3
 800a92e:	f3bf 8f6f 	isb	sy
 800a932:	f3bf 8f4f 	dsb	sy
 800a936:	607b      	str	r3, [r7, #4]
}
 800a938:	bf00      	nop
 800a93a:	bf00      	nop
 800a93c:	e7fd      	b.n	800a93a <vTaskSwitchContext+0x5a>
 800a93e:	697a      	ldr	r2, [r7, #20]
 800a940:	4613      	mov	r3, r2
 800a942:	009b      	lsls	r3, r3, #2
 800a944:	4413      	add	r3, r2
 800a946:	009b      	lsls	r3, r3, #2
 800a948:	4a14      	ldr	r2, [pc, #80]	@ (800a99c <vTaskSwitchContext+0xbc>)
 800a94a:	4413      	add	r3, r2
 800a94c:	613b      	str	r3, [r7, #16]
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	685b      	ldr	r3, [r3, #4]
 800a952:	685a      	ldr	r2, [r3, #4]
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	605a      	str	r2, [r3, #4]
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	685a      	ldr	r2, [r3, #4]
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	3308      	adds	r3, #8
 800a960:	429a      	cmp	r2, r3
 800a962:	d104      	bne.n	800a96e <vTaskSwitchContext+0x8e>
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	685b      	ldr	r3, [r3, #4]
 800a968:	685a      	ldr	r2, [r3, #4]
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	605a      	str	r2, [r3, #4]
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	685b      	ldr	r3, [r3, #4]
 800a972:	68db      	ldr	r3, [r3, #12]
 800a974:	4a0a      	ldr	r2, [pc, #40]	@ (800a9a0 <vTaskSwitchContext+0xc0>)
 800a976:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a978:	4b09      	ldr	r3, [pc, #36]	@ (800a9a0 <vTaskSwitchContext+0xc0>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	334c      	adds	r3, #76	@ 0x4c
 800a97e:	4a09      	ldr	r2, [pc, #36]	@ (800a9a4 <vTaskSwitchContext+0xc4>)
 800a980:	6013      	str	r3, [r2, #0]
}
 800a982:	bf00      	nop
 800a984:	371c      	adds	r7, #28
 800a986:	46bd      	mov	sp, r7
 800a988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98c:	4770      	bx	lr
 800a98e:	bf00      	nop
 800a990:	2400093c 	.word	0x2400093c
 800a994:	24000928 	.word	0x24000928
 800a998:	2400091c 	.word	0x2400091c
 800a99c:	24000818 	.word	0x24000818
 800a9a0:	24000814 	.word	0x24000814
 800a9a4:	24000020 	.word	0x24000020

0800a9a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b082      	sub	sp, #8
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a9b0:	f000 f852 	bl	800aa58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a9b4:	4b06      	ldr	r3, [pc, #24]	@ (800a9d0 <prvIdleTask+0x28>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	2b01      	cmp	r3, #1
 800a9ba:	d9f9      	bls.n	800a9b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a9bc:	4b05      	ldr	r3, [pc, #20]	@ (800a9d4 <prvIdleTask+0x2c>)
 800a9be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a9c2:	601a      	str	r2, [r3, #0]
 800a9c4:	f3bf 8f4f 	dsb	sy
 800a9c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a9cc:	e7f0      	b.n	800a9b0 <prvIdleTask+0x8>
 800a9ce:	bf00      	nop
 800a9d0:	24000818 	.word	0x24000818
 800a9d4:	e000ed04 	.word	0xe000ed04

0800a9d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b082      	sub	sp, #8
 800a9dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a9de:	2300      	movs	r3, #0
 800a9e0:	607b      	str	r3, [r7, #4]
 800a9e2:	e00c      	b.n	800a9fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a9e4:	687a      	ldr	r2, [r7, #4]
 800a9e6:	4613      	mov	r3, r2
 800a9e8:	009b      	lsls	r3, r3, #2
 800a9ea:	4413      	add	r3, r2
 800a9ec:	009b      	lsls	r3, r3, #2
 800a9ee:	4a12      	ldr	r2, [pc, #72]	@ (800aa38 <prvInitialiseTaskLists+0x60>)
 800a9f0:	4413      	add	r3, r2
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f7ff fb79 	bl	800a0ea <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	3301      	adds	r3, #1
 800a9fc:	607b      	str	r3, [r7, #4]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2b06      	cmp	r3, #6
 800aa02:	d9ef      	bls.n	800a9e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800aa04:	480d      	ldr	r0, [pc, #52]	@ (800aa3c <prvInitialiseTaskLists+0x64>)
 800aa06:	f7ff fb70 	bl	800a0ea <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800aa0a:	480d      	ldr	r0, [pc, #52]	@ (800aa40 <prvInitialiseTaskLists+0x68>)
 800aa0c:	f7ff fb6d 	bl	800a0ea <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800aa10:	480c      	ldr	r0, [pc, #48]	@ (800aa44 <prvInitialiseTaskLists+0x6c>)
 800aa12:	f7ff fb6a 	bl	800a0ea <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800aa16:	480c      	ldr	r0, [pc, #48]	@ (800aa48 <prvInitialiseTaskLists+0x70>)
 800aa18:	f7ff fb67 	bl	800a0ea <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800aa1c:	480b      	ldr	r0, [pc, #44]	@ (800aa4c <prvInitialiseTaskLists+0x74>)
 800aa1e:	f7ff fb64 	bl	800a0ea <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800aa22:	4b0b      	ldr	r3, [pc, #44]	@ (800aa50 <prvInitialiseTaskLists+0x78>)
 800aa24:	4a05      	ldr	r2, [pc, #20]	@ (800aa3c <prvInitialiseTaskLists+0x64>)
 800aa26:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800aa28:	4b0a      	ldr	r3, [pc, #40]	@ (800aa54 <prvInitialiseTaskLists+0x7c>)
 800aa2a:	4a05      	ldr	r2, [pc, #20]	@ (800aa40 <prvInitialiseTaskLists+0x68>)
 800aa2c:	601a      	str	r2, [r3, #0]
}
 800aa2e:	bf00      	nop
 800aa30:	3708      	adds	r7, #8
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}
 800aa36:	bf00      	nop
 800aa38:	24000818 	.word	0x24000818
 800aa3c:	240008a4 	.word	0x240008a4
 800aa40:	240008b8 	.word	0x240008b8
 800aa44:	240008d4 	.word	0x240008d4
 800aa48:	240008e8 	.word	0x240008e8
 800aa4c:	24000900 	.word	0x24000900
 800aa50:	240008cc 	.word	0x240008cc
 800aa54:	240008d0 	.word	0x240008d0

0800aa58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b082      	sub	sp, #8
 800aa5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aa5e:	e019      	b.n	800aa94 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800aa60:	f000 f9b2 	bl	800adc8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa64:	4b10      	ldr	r3, [pc, #64]	@ (800aaa8 <prvCheckTasksWaitingTermination+0x50>)
 800aa66:	68db      	ldr	r3, [r3, #12]
 800aa68:	68db      	ldr	r3, [r3, #12]
 800aa6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	3304      	adds	r3, #4
 800aa70:	4618      	mov	r0, r3
 800aa72:	f7ff fb8b 	bl	800a18c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800aa76:	4b0d      	ldr	r3, [pc, #52]	@ (800aaac <prvCheckTasksWaitingTermination+0x54>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	3b01      	subs	r3, #1
 800aa7c:	4a0b      	ldr	r2, [pc, #44]	@ (800aaac <prvCheckTasksWaitingTermination+0x54>)
 800aa7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800aa80:	4b0b      	ldr	r3, [pc, #44]	@ (800aab0 <prvCheckTasksWaitingTermination+0x58>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	3b01      	subs	r3, #1
 800aa86:	4a0a      	ldr	r2, [pc, #40]	@ (800aab0 <prvCheckTasksWaitingTermination+0x58>)
 800aa88:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800aa8a:	f000 f9cf 	bl	800ae2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f000 f810 	bl	800aab4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aa94:	4b06      	ldr	r3, [pc, #24]	@ (800aab0 <prvCheckTasksWaitingTermination+0x58>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d1e1      	bne.n	800aa60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800aa9c:	bf00      	nop
 800aa9e:	bf00      	nop
 800aaa0:	3708      	adds	r7, #8
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}
 800aaa6:	bf00      	nop
 800aaa8:	240008e8 	.word	0x240008e8
 800aaac:	24000914 	.word	0x24000914
 800aab0:	240008fc 	.word	0x240008fc

0800aab4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b084      	sub	sp, #16
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	334c      	adds	r3, #76	@ 0x4c
 800aac0:	4618      	mov	r0, r3
 800aac2:	f000 fe5f 	bl	800b784 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d108      	bne.n	800aae2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aad4:	4618      	mov	r0, r3
 800aad6:	f000 fb25 	bl	800b124 <vPortFree>
				vPortFree( pxTCB );
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f000 fb22 	bl	800b124 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aae0:	e019      	b.n	800ab16 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800aae8:	2b01      	cmp	r3, #1
 800aaea:	d103      	bne.n	800aaf4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f000 fb19 	bl	800b124 <vPortFree>
	}
 800aaf2:	e010      	b.n	800ab16 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800aafa:	2b02      	cmp	r3, #2
 800aafc:	d00b      	beq.n	800ab16 <prvDeleteTCB+0x62>
	__asm volatile
 800aafe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab02:	f383 8811 	msr	BASEPRI, r3
 800ab06:	f3bf 8f6f 	isb	sy
 800ab0a:	f3bf 8f4f 	dsb	sy
 800ab0e:	60fb      	str	r3, [r7, #12]
}
 800ab10:	bf00      	nop
 800ab12:	bf00      	nop
 800ab14:	e7fd      	b.n	800ab12 <prvDeleteTCB+0x5e>
	}
 800ab16:	bf00      	nop
 800ab18:	3710      	adds	r7, #16
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}
	...

0800ab20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ab20:	b480      	push	{r7}
 800ab22:	b083      	sub	sp, #12
 800ab24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab26:	4b0c      	ldr	r3, [pc, #48]	@ (800ab58 <prvResetNextTaskUnblockTime+0x38>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d104      	bne.n	800ab3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ab30:	4b0a      	ldr	r3, [pc, #40]	@ (800ab5c <prvResetNextTaskUnblockTime+0x3c>)
 800ab32:	f04f 32ff 	mov.w	r2, #4294967295
 800ab36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ab38:	e008      	b.n	800ab4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab3a:	4b07      	ldr	r3, [pc, #28]	@ (800ab58 <prvResetNextTaskUnblockTime+0x38>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	68db      	ldr	r3, [r3, #12]
 800ab40:	68db      	ldr	r3, [r3, #12]
 800ab42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	685b      	ldr	r3, [r3, #4]
 800ab48:	4a04      	ldr	r2, [pc, #16]	@ (800ab5c <prvResetNextTaskUnblockTime+0x3c>)
 800ab4a:	6013      	str	r3, [r2, #0]
}
 800ab4c:	bf00      	nop
 800ab4e:	370c      	adds	r7, #12
 800ab50:	46bd      	mov	sp, r7
 800ab52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab56:	4770      	bx	lr
 800ab58:	240008cc 	.word	0x240008cc
 800ab5c:	24000934 	.word	0x24000934

0800ab60 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ab60:	b480      	push	{r7}
 800ab62:	b085      	sub	sp, #20
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	60f8      	str	r0, [r7, #12]
 800ab68:	60b9      	str	r1, [r7, #8]
 800ab6a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	3b04      	subs	r3, #4
 800ab70:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ab78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	3b04      	subs	r3, #4
 800ab7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	f023 0201 	bic.w	r2, r3, #1
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	3b04      	subs	r3, #4
 800ab8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ab90:	4a0c      	ldr	r2, [pc, #48]	@ (800abc4 <pxPortInitialiseStack+0x64>)
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	3b14      	subs	r3, #20
 800ab9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ab9c:	687a      	ldr	r2, [r7, #4]
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	3b04      	subs	r3, #4
 800aba6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	f06f 0202 	mvn.w	r2, #2
 800abae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	3b20      	subs	r3, #32
 800abb4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800abb6:	68fb      	ldr	r3, [r7, #12]
}
 800abb8:	4618      	mov	r0, r3
 800abba:	3714      	adds	r7, #20
 800abbc:	46bd      	mov	sp, r7
 800abbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc2:	4770      	bx	lr
 800abc4:	0800abc9 	.word	0x0800abc9

0800abc8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800abc8:	b480      	push	{r7}
 800abca:	b085      	sub	sp, #20
 800abcc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800abce:	2300      	movs	r3, #0
 800abd0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800abd2:	4b13      	ldr	r3, [pc, #76]	@ (800ac20 <prvTaskExitError+0x58>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abda:	d00b      	beq.n	800abf4 <prvTaskExitError+0x2c>
	__asm volatile
 800abdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abe0:	f383 8811 	msr	BASEPRI, r3
 800abe4:	f3bf 8f6f 	isb	sy
 800abe8:	f3bf 8f4f 	dsb	sy
 800abec:	60fb      	str	r3, [r7, #12]
}
 800abee:	bf00      	nop
 800abf0:	bf00      	nop
 800abf2:	e7fd      	b.n	800abf0 <prvTaskExitError+0x28>
	__asm volatile
 800abf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abf8:	f383 8811 	msr	BASEPRI, r3
 800abfc:	f3bf 8f6f 	isb	sy
 800ac00:	f3bf 8f4f 	dsb	sy
 800ac04:	60bb      	str	r3, [r7, #8]
}
 800ac06:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ac08:	bf00      	nop
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d0fc      	beq.n	800ac0a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ac10:	bf00      	nop
 800ac12:	bf00      	nop
 800ac14:	3714      	adds	r7, #20
 800ac16:	46bd      	mov	sp, r7
 800ac18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1c:	4770      	bx	lr
 800ac1e:	bf00      	nop
 800ac20:	24000010 	.word	0x24000010
	...

0800ac30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ac30:	4b07      	ldr	r3, [pc, #28]	@ (800ac50 <pxCurrentTCBConst2>)
 800ac32:	6819      	ldr	r1, [r3, #0]
 800ac34:	6808      	ldr	r0, [r1, #0]
 800ac36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac3a:	f380 8809 	msr	PSP, r0
 800ac3e:	f3bf 8f6f 	isb	sy
 800ac42:	f04f 0000 	mov.w	r0, #0
 800ac46:	f380 8811 	msr	BASEPRI, r0
 800ac4a:	4770      	bx	lr
 800ac4c:	f3af 8000 	nop.w

0800ac50 <pxCurrentTCBConst2>:
 800ac50:	24000814 	.word	0x24000814
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ac54:	bf00      	nop
 800ac56:	bf00      	nop

0800ac58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ac58:	4808      	ldr	r0, [pc, #32]	@ (800ac7c <prvPortStartFirstTask+0x24>)
 800ac5a:	6800      	ldr	r0, [r0, #0]
 800ac5c:	6800      	ldr	r0, [r0, #0]
 800ac5e:	f380 8808 	msr	MSP, r0
 800ac62:	f04f 0000 	mov.w	r0, #0
 800ac66:	f380 8814 	msr	CONTROL, r0
 800ac6a:	b662      	cpsie	i
 800ac6c:	b661      	cpsie	f
 800ac6e:	f3bf 8f4f 	dsb	sy
 800ac72:	f3bf 8f6f 	isb	sy
 800ac76:	df00      	svc	0
 800ac78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ac7a:	bf00      	nop
 800ac7c:	e000ed08 	.word	0xe000ed08

0800ac80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b086      	sub	sp, #24
 800ac84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ac86:	4b47      	ldr	r3, [pc, #284]	@ (800ada4 <xPortStartScheduler+0x124>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	4a47      	ldr	r2, [pc, #284]	@ (800ada8 <xPortStartScheduler+0x128>)
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	d10b      	bne.n	800aca8 <xPortStartScheduler+0x28>
	__asm volatile
 800ac90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac94:	f383 8811 	msr	BASEPRI, r3
 800ac98:	f3bf 8f6f 	isb	sy
 800ac9c:	f3bf 8f4f 	dsb	sy
 800aca0:	613b      	str	r3, [r7, #16]
}
 800aca2:	bf00      	nop
 800aca4:	bf00      	nop
 800aca6:	e7fd      	b.n	800aca4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800aca8:	4b3e      	ldr	r3, [pc, #248]	@ (800ada4 <xPortStartScheduler+0x124>)
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	4a3f      	ldr	r2, [pc, #252]	@ (800adac <xPortStartScheduler+0x12c>)
 800acae:	4293      	cmp	r3, r2
 800acb0:	d10b      	bne.n	800acca <xPortStartScheduler+0x4a>
	__asm volatile
 800acb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acb6:	f383 8811 	msr	BASEPRI, r3
 800acba:	f3bf 8f6f 	isb	sy
 800acbe:	f3bf 8f4f 	dsb	sy
 800acc2:	60fb      	str	r3, [r7, #12]
}
 800acc4:	bf00      	nop
 800acc6:	bf00      	nop
 800acc8:	e7fd      	b.n	800acc6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800acca:	4b39      	ldr	r3, [pc, #228]	@ (800adb0 <xPortStartScheduler+0x130>)
 800accc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	781b      	ldrb	r3, [r3, #0]
 800acd2:	b2db      	uxtb	r3, r3
 800acd4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	22ff      	movs	r2, #255	@ 0xff
 800acda:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800acdc:	697b      	ldr	r3, [r7, #20]
 800acde:	781b      	ldrb	r3, [r3, #0]
 800ace0:	b2db      	uxtb	r3, r3
 800ace2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ace4:	78fb      	ldrb	r3, [r7, #3]
 800ace6:	b2db      	uxtb	r3, r3
 800ace8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800acec:	b2da      	uxtb	r2, r3
 800acee:	4b31      	ldr	r3, [pc, #196]	@ (800adb4 <xPortStartScheduler+0x134>)
 800acf0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800acf2:	4b31      	ldr	r3, [pc, #196]	@ (800adb8 <xPortStartScheduler+0x138>)
 800acf4:	2207      	movs	r2, #7
 800acf6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800acf8:	e009      	b.n	800ad0e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800acfa:	4b2f      	ldr	r3, [pc, #188]	@ (800adb8 <xPortStartScheduler+0x138>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	3b01      	subs	r3, #1
 800ad00:	4a2d      	ldr	r2, [pc, #180]	@ (800adb8 <xPortStartScheduler+0x138>)
 800ad02:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ad04:	78fb      	ldrb	r3, [r7, #3]
 800ad06:	b2db      	uxtb	r3, r3
 800ad08:	005b      	lsls	r3, r3, #1
 800ad0a:	b2db      	uxtb	r3, r3
 800ad0c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ad0e:	78fb      	ldrb	r3, [r7, #3]
 800ad10:	b2db      	uxtb	r3, r3
 800ad12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad16:	2b80      	cmp	r3, #128	@ 0x80
 800ad18:	d0ef      	beq.n	800acfa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ad1a:	4b27      	ldr	r3, [pc, #156]	@ (800adb8 <xPortStartScheduler+0x138>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	f1c3 0307 	rsb	r3, r3, #7
 800ad22:	2b04      	cmp	r3, #4
 800ad24:	d00b      	beq.n	800ad3e <xPortStartScheduler+0xbe>
	__asm volatile
 800ad26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad2a:	f383 8811 	msr	BASEPRI, r3
 800ad2e:	f3bf 8f6f 	isb	sy
 800ad32:	f3bf 8f4f 	dsb	sy
 800ad36:	60bb      	str	r3, [r7, #8]
}
 800ad38:	bf00      	nop
 800ad3a:	bf00      	nop
 800ad3c:	e7fd      	b.n	800ad3a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ad3e:	4b1e      	ldr	r3, [pc, #120]	@ (800adb8 <xPortStartScheduler+0x138>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	021b      	lsls	r3, r3, #8
 800ad44:	4a1c      	ldr	r2, [pc, #112]	@ (800adb8 <xPortStartScheduler+0x138>)
 800ad46:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ad48:	4b1b      	ldr	r3, [pc, #108]	@ (800adb8 <xPortStartScheduler+0x138>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ad50:	4a19      	ldr	r2, [pc, #100]	@ (800adb8 <xPortStartScheduler+0x138>)
 800ad52:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	b2da      	uxtb	r2, r3
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ad5c:	4b17      	ldr	r3, [pc, #92]	@ (800adbc <xPortStartScheduler+0x13c>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	4a16      	ldr	r2, [pc, #88]	@ (800adbc <xPortStartScheduler+0x13c>)
 800ad62:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ad66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ad68:	4b14      	ldr	r3, [pc, #80]	@ (800adbc <xPortStartScheduler+0x13c>)
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	4a13      	ldr	r2, [pc, #76]	@ (800adbc <xPortStartScheduler+0x13c>)
 800ad6e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ad72:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ad74:	f000 f8da 	bl	800af2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ad78:	4b11      	ldr	r3, [pc, #68]	@ (800adc0 <xPortStartScheduler+0x140>)
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ad7e:	f000 f8f9 	bl	800af74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ad82:	4b10      	ldr	r3, [pc, #64]	@ (800adc4 <xPortStartScheduler+0x144>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	4a0f      	ldr	r2, [pc, #60]	@ (800adc4 <xPortStartScheduler+0x144>)
 800ad88:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ad8c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ad8e:	f7ff ff63 	bl	800ac58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ad92:	f7ff fda5 	bl	800a8e0 <vTaskSwitchContext>
	prvTaskExitError();
 800ad96:	f7ff ff17 	bl	800abc8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ad9a:	2300      	movs	r3, #0
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3718      	adds	r7, #24
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}
 800ada4:	e000ed00 	.word	0xe000ed00
 800ada8:	410fc271 	.word	0x410fc271
 800adac:	410fc270 	.word	0x410fc270
 800adb0:	e000e400 	.word	0xe000e400
 800adb4:	24000940 	.word	0x24000940
 800adb8:	24000944 	.word	0x24000944
 800adbc:	e000ed20 	.word	0xe000ed20
 800adc0:	24000010 	.word	0x24000010
 800adc4:	e000ef34 	.word	0xe000ef34

0800adc8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800adc8:	b480      	push	{r7}
 800adca:	b083      	sub	sp, #12
 800adcc:	af00      	add	r7, sp, #0
	__asm volatile
 800adce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800add2:	f383 8811 	msr	BASEPRI, r3
 800add6:	f3bf 8f6f 	isb	sy
 800adda:	f3bf 8f4f 	dsb	sy
 800adde:	607b      	str	r3, [r7, #4]
}
 800ade0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ade2:	4b10      	ldr	r3, [pc, #64]	@ (800ae24 <vPortEnterCritical+0x5c>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	3301      	adds	r3, #1
 800ade8:	4a0e      	ldr	r2, [pc, #56]	@ (800ae24 <vPortEnterCritical+0x5c>)
 800adea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800adec:	4b0d      	ldr	r3, [pc, #52]	@ (800ae24 <vPortEnterCritical+0x5c>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	2b01      	cmp	r3, #1
 800adf2:	d110      	bne.n	800ae16 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800adf4:	4b0c      	ldr	r3, [pc, #48]	@ (800ae28 <vPortEnterCritical+0x60>)
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	b2db      	uxtb	r3, r3
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d00b      	beq.n	800ae16 <vPortEnterCritical+0x4e>
	__asm volatile
 800adfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae02:	f383 8811 	msr	BASEPRI, r3
 800ae06:	f3bf 8f6f 	isb	sy
 800ae0a:	f3bf 8f4f 	dsb	sy
 800ae0e:	603b      	str	r3, [r7, #0]
}
 800ae10:	bf00      	nop
 800ae12:	bf00      	nop
 800ae14:	e7fd      	b.n	800ae12 <vPortEnterCritical+0x4a>
	}
}
 800ae16:	bf00      	nop
 800ae18:	370c      	adds	r7, #12
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae20:	4770      	bx	lr
 800ae22:	bf00      	nop
 800ae24:	24000010 	.word	0x24000010
 800ae28:	e000ed04 	.word	0xe000ed04

0800ae2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b083      	sub	sp, #12
 800ae30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ae32:	4b12      	ldr	r3, [pc, #72]	@ (800ae7c <vPortExitCritical+0x50>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d10b      	bne.n	800ae52 <vPortExitCritical+0x26>
	__asm volatile
 800ae3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae3e:	f383 8811 	msr	BASEPRI, r3
 800ae42:	f3bf 8f6f 	isb	sy
 800ae46:	f3bf 8f4f 	dsb	sy
 800ae4a:	607b      	str	r3, [r7, #4]
}
 800ae4c:	bf00      	nop
 800ae4e:	bf00      	nop
 800ae50:	e7fd      	b.n	800ae4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ae52:	4b0a      	ldr	r3, [pc, #40]	@ (800ae7c <vPortExitCritical+0x50>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	3b01      	subs	r3, #1
 800ae58:	4a08      	ldr	r2, [pc, #32]	@ (800ae7c <vPortExitCritical+0x50>)
 800ae5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ae5c:	4b07      	ldr	r3, [pc, #28]	@ (800ae7c <vPortExitCritical+0x50>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d105      	bne.n	800ae70 <vPortExitCritical+0x44>
 800ae64:	2300      	movs	r3, #0
 800ae66:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ae6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ae70:	bf00      	nop
 800ae72:	370c      	adds	r7, #12
 800ae74:	46bd      	mov	sp, r7
 800ae76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7a:	4770      	bx	lr
 800ae7c:	24000010 	.word	0x24000010

0800ae80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ae80:	f3ef 8009 	mrs	r0, PSP
 800ae84:	f3bf 8f6f 	isb	sy
 800ae88:	4b15      	ldr	r3, [pc, #84]	@ (800aee0 <pxCurrentTCBConst>)
 800ae8a:	681a      	ldr	r2, [r3, #0]
 800ae8c:	f01e 0f10 	tst.w	lr, #16
 800ae90:	bf08      	it	eq
 800ae92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ae96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae9a:	6010      	str	r0, [r2, #0]
 800ae9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aea0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800aea4:	f380 8811 	msr	BASEPRI, r0
 800aea8:	f3bf 8f4f 	dsb	sy
 800aeac:	f3bf 8f6f 	isb	sy
 800aeb0:	f7ff fd16 	bl	800a8e0 <vTaskSwitchContext>
 800aeb4:	f04f 0000 	mov.w	r0, #0
 800aeb8:	f380 8811 	msr	BASEPRI, r0
 800aebc:	bc09      	pop	{r0, r3}
 800aebe:	6819      	ldr	r1, [r3, #0]
 800aec0:	6808      	ldr	r0, [r1, #0]
 800aec2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aec6:	f01e 0f10 	tst.w	lr, #16
 800aeca:	bf08      	it	eq
 800aecc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aed0:	f380 8809 	msr	PSP, r0
 800aed4:	f3bf 8f6f 	isb	sy
 800aed8:	4770      	bx	lr
 800aeda:	bf00      	nop
 800aedc:	f3af 8000 	nop.w

0800aee0 <pxCurrentTCBConst>:
 800aee0:	24000814 	.word	0x24000814
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aee4:	bf00      	nop
 800aee6:	bf00      	nop

0800aee8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b082      	sub	sp, #8
 800aeec:	af00      	add	r7, sp, #0
	__asm volatile
 800aeee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aef2:	f383 8811 	msr	BASEPRI, r3
 800aef6:	f3bf 8f6f 	isb	sy
 800aefa:	f3bf 8f4f 	dsb	sy
 800aefe:	607b      	str	r3, [r7, #4]
}
 800af00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800af02:	f7ff fc33 	bl	800a76c <xTaskIncrementTick>
 800af06:	4603      	mov	r3, r0
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d003      	beq.n	800af14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800af0c:	4b06      	ldr	r3, [pc, #24]	@ (800af28 <SysTick_Handler+0x40>)
 800af0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af12:	601a      	str	r2, [r3, #0]
 800af14:	2300      	movs	r3, #0
 800af16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	f383 8811 	msr	BASEPRI, r3
}
 800af1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800af20:	bf00      	nop
 800af22:	3708      	adds	r7, #8
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}
 800af28:	e000ed04 	.word	0xe000ed04

0800af2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800af2c:	b480      	push	{r7}
 800af2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800af30:	4b0b      	ldr	r3, [pc, #44]	@ (800af60 <vPortSetupTimerInterrupt+0x34>)
 800af32:	2200      	movs	r2, #0
 800af34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800af36:	4b0b      	ldr	r3, [pc, #44]	@ (800af64 <vPortSetupTimerInterrupt+0x38>)
 800af38:	2200      	movs	r2, #0
 800af3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800af3c:	4b0a      	ldr	r3, [pc, #40]	@ (800af68 <vPortSetupTimerInterrupt+0x3c>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	4a0a      	ldr	r2, [pc, #40]	@ (800af6c <vPortSetupTimerInterrupt+0x40>)
 800af42:	fba2 2303 	umull	r2, r3, r2, r3
 800af46:	099b      	lsrs	r3, r3, #6
 800af48:	4a09      	ldr	r2, [pc, #36]	@ (800af70 <vPortSetupTimerInterrupt+0x44>)
 800af4a:	3b01      	subs	r3, #1
 800af4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800af4e:	4b04      	ldr	r3, [pc, #16]	@ (800af60 <vPortSetupTimerInterrupt+0x34>)
 800af50:	2207      	movs	r2, #7
 800af52:	601a      	str	r2, [r3, #0]
}
 800af54:	bf00      	nop
 800af56:	46bd      	mov	sp, r7
 800af58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5c:	4770      	bx	lr
 800af5e:	bf00      	nop
 800af60:	e000e010 	.word	0xe000e010
 800af64:	e000e018 	.word	0xe000e018
 800af68:	24000000 	.word	0x24000000
 800af6c:	10624dd3 	.word	0x10624dd3
 800af70:	e000e014 	.word	0xe000e014

0800af74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800af74:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800af84 <vPortEnableVFP+0x10>
 800af78:	6801      	ldr	r1, [r0, #0]
 800af7a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800af7e:	6001      	str	r1, [r0, #0]
 800af80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800af82:	bf00      	nop
 800af84:	e000ed88 	.word	0xe000ed88

0800af88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b08a      	sub	sp, #40	@ 0x28
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800af90:	2300      	movs	r3, #0
 800af92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800af94:	f7ff fb3e 	bl	800a614 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800af98:	4b5c      	ldr	r3, [pc, #368]	@ (800b10c <pvPortMalloc+0x184>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d101      	bne.n	800afa4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800afa0:	f000 f924 	bl	800b1ec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800afa4:	4b5a      	ldr	r3, [pc, #360]	@ (800b110 <pvPortMalloc+0x188>)
 800afa6:	681a      	ldr	r2, [r3, #0]
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	4013      	ands	r3, r2
 800afac:	2b00      	cmp	r3, #0
 800afae:	f040 8095 	bne.w	800b0dc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d01e      	beq.n	800aff6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800afb8:	2208      	movs	r2, #8
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	4413      	add	r3, r2
 800afbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f003 0307 	and.w	r3, r3, #7
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d015      	beq.n	800aff6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f023 0307 	bic.w	r3, r3, #7
 800afd0:	3308      	adds	r3, #8
 800afd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f003 0307 	and.w	r3, r3, #7
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d00b      	beq.n	800aff6 <pvPortMalloc+0x6e>
	__asm volatile
 800afde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afe2:	f383 8811 	msr	BASEPRI, r3
 800afe6:	f3bf 8f6f 	isb	sy
 800afea:	f3bf 8f4f 	dsb	sy
 800afee:	617b      	str	r3, [r7, #20]
}
 800aff0:	bf00      	nop
 800aff2:	bf00      	nop
 800aff4:	e7fd      	b.n	800aff2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d06f      	beq.n	800b0dc <pvPortMalloc+0x154>
 800affc:	4b45      	ldr	r3, [pc, #276]	@ (800b114 <pvPortMalloc+0x18c>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	687a      	ldr	r2, [r7, #4]
 800b002:	429a      	cmp	r2, r3
 800b004:	d86a      	bhi.n	800b0dc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b006:	4b44      	ldr	r3, [pc, #272]	@ (800b118 <pvPortMalloc+0x190>)
 800b008:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b00a:	4b43      	ldr	r3, [pc, #268]	@ (800b118 <pvPortMalloc+0x190>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b010:	e004      	b.n	800b01c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b014:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b01c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b01e:	685b      	ldr	r3, [r3, #4]
 800b020:	687a      	ldr	r2, [r7, #4]
 800b022:	429a      	cmp	r2, r3
 800b024:	d903      	bls.n	800b02e <pvPortMalloc+0xa6>
 800b026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d1f1      	bne.n	800b012 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b02e:	4b37      	ldr	r3, [pc, #220]	@ (800b10c <pvPortMalloc+0x184>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b034:	429a      	cmp	r2, r3
 800b036:	d051      	beq.n	800b0dc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b038:	6a3b      	ldr	r3, [r7, #32]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	2208      	movs	r2, #8
 800b03e:	4413      	add	r3, r2
 800b040:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b044:	681a      	ldr	r2, [r3, #0]
 800b046:	6a3b      	ldr	r3, [r7, #32]
 800b048:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b04a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b04c:	685a      	ldr	r2, [r3, #4]
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	1ad2      	subs	r2, r2, r3
 800b052:	2308      	movs	r3, #8
 800b054:	005b      	lsls	r3, r3, #1
 800b056:	429a      	cmp	r2, r3
 800b058:	d920      	bls.n	800b09c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b05a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	4413      	add	r3, r2
 800b060:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b062:	69bb      	ldr	r3, [r7, #24]
 800b064:	f003 0307 	and.w	r3, r3, #7
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d00b      	beq.n	800b084 <pvPortMalloc+0xfc>
	__asm volatile
 800b06c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b070:	f383 8811 	msr	BASEPRI, r3
 800b074:	f3bf 8f6f 	isb	sy
 800b078:	f3bf 8f4f 	dsb	sy
 800b07c:	613b      	str	r3, [r7, #16]
}
 800b07e:	bf00      	nop
 800b080:	bf00      	nop
 800b082:	e7fd      	b.n	800b080 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b086:	685a      	ldr	r2, [r3, #4]
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	1ad2      	subs	r2, r2, r3
 800b08c:	69bb      	ldr	r3, [r7, #24]
 800b08e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b092:	687a      	ldr	r2, [r7, #4]
 800b094:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b096:	69b8      	ldr	r0, [r7, #24]
 800b098:	f000 f90a 	bl	800b2b0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b09c:	4b1d      	ldr	r3, [pc, #116]	@ (800b114 <pvPortMalloc+0x18c>)
 800b09e:	681a      	ldr	r2, [r3, #0]
 800b0a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0a2:	685b      	ldr	r3, [r3, #4]
 800b0a4:	1ad3      	subs	r3, r2, r3
 800b0a6:	4a1b      	ldr	r2, [pc, #108]	@ (800b114 <pvPortMalloc+0x18c>)
 800b0a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b0aa:	4b1a      	ldr	r3, [pc, #104]	@ (800b114 <pvPortMalloc+0x18c>)
 800b0ac:	681a      	ldr	r2, [r3, #0]
 800b0ae:	4b1b      	ldr	r3, [pc, #108]	@ (800b11c <pvPortMalloc+0x194>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	d203      	bcs.n	800b0be <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b0b6:	4b17      	ldr	r3, [pc, #92]	@ (800b114 <pvPortMalloc+0x18c>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	4a18      	ldr	r2, [pc, #96]	@ (800b11c <pvPortMalloc+0x194>)
 800b0bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b0be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0c0:	685a      	ldr	r2, [r3, #4]
 800b0c2:	4b13      	ldr	r3, [pc, #76]	@ (800b110 <pvPortMalloc+0x188>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	431a      	orrs	r2, r3
 800b0c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b0cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b0d2:	4b13      	ldr	r3, [pc, #76]	@ (800b120 <pvPortMalloc+0x198>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	3301      	adds	r3, #1
 800b0d8:	4a11      	ldr	r2, [pc, #68]	@ (800b120 <pvPortMalloc+0x198>)
 800b0da:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b0dc:	f7ff faa8 	bl	800a630 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b0e0:	69fb      	ldr	r3, [r7, #28]
 800b0e2:	f003 0307 	and.w	r3, r3, #7
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d00b      	beq.n	800b102 <pvPortMalloc+0x17a>
	__asm volatile
 800b0ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0ee:	f383 8811 	msr	BASEPRI, r3
 800b0f2:	f3bf 8f6f 	isb	sy
 800b0f6:	f3bf 8f4f 	dsb	sy
 800b0fa:	60fb      	str	r3, [r7, #12]
}
 800b0fc:	bf00      	nop
 800b0fe:	bf00      	nop
 800b100:	e7fd      	b.n	800b0fe <pvPortMalloc+0x176>
	return pvReturn;
 800b102:	69fb      	ldr	r3, [r7, #28]
}
 800b104:	4618      	mov	r0, r3
 800b106:	3728      	adds	r7, #40	@ 0x28
 800b108:	46bd      	mov	sp, r7
 800b10a:	bd80      	pop	{r7, pc}
 800b10c:	24004550 	.word	0x24004550
 800b110:	24004564 	.word	0x24004564
 800b114:	24004554 	.word	0x24004554
 800b118:	24004548 	.word	0x24004548
 800b11c:	24004558 	.word	0x24004558
 800b120:	2400455c 	.word	0x2400455c

0800b124 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b086      	sub	sp, #24
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d04f      	beq.n	800b1d6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b136:	2308      	movs	r3, #8
 800b138:	425b      	negs	r3, r3
 800b13a:	697a      	ldr	r2, [r7, #20]
 800b13c:	4413      	add	r3, r2
 800b13e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b140:	697b      	ldr	r3, [r7, #20]
 800b142:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b144:	693b      	ldr	r3, [r7, #16]
 800b146:	685a      	ldr	r2, [r3, #4]
 800b148:	4b25      	ldr	r3, [pc, #148]	@ (800b1e0 <vPortFree+0xbc>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	4013      	ands	r3, r2
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d10b      	bne.n	800b16a <vPortFree+0x46>
	__asm volatile
 800b152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b156:	f383 8811 	msr	BASEPRI, r3
 800b15a:	f3bf 8f6f 	isb	sy
 800b15e:	f3bf 8f4f 	dsb	sy
 800b162:	60fb      	str	r3, [r7, #12]
}
 800b164:	bf00      	nop
 800b166:	bf00      	nop
 800b168:	e7fd      	b.n	800b166 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b16a:	693b      	ldr	r3, [r7, #16]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d00b      	beq.n	800b18a <vPortFree+0x66>
	__asm volatile
 800b172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b176:	f383 8811 	msr	BASEPRI, r3
 800b17a:	f3bf 8f6f 	isb	sy
 800b17e:	f3bf 8f4f 	dsb	sy
 800b182:	60bb      	str	r3, [r7, #8]
}
 800b184:	bf00      	nop
 800b186:	bf00      	nop
 800b188:	e7fd      	b.n	800b186 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b18a:	693b      	ldr	r3, [r7, #16]
 800b18c:	685a      	ldr	r2, [r3, #4]
 800b18e:	4b14      	ldr	r3, [pc, #80]	@ (800b1e0 <vPortFree+0xbc>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	4013      	ands	r3, r2
 800b194:	2b00      	cmp	r3, #0
 800b196:	d01e      	beq.n	800b1d6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d11a      	bne.n	800b1d6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b1a0:	693b      	ldr	r3, [r7, #16]
 800b1a2:	685a      	ldr	r2, [r3, #4]
 800b1a4:	4b0e      	ldr	r3, [pc, #56]	@ (800b1e0 <vPortFree+0xbc>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	43db      	mvns	r3, r3
 800b1aa:	401a      	ands	r2, r3
 800b1ac:	693b      	ldr	r3, [r7, #16]
 800b1ae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b1b0:	f7ff fa30 	bl	800a614 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b1b4:	693b      	ldr	r3, [r7, #16]
 800b1b6:	685a      	ldr	r2, [r3, #4]
 800b1b8:	4b0a      	ldr	r3, [pc, #40]	@ (800b1e4 <vPortFree+0xc0>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	4413      	add	r3, r2
 800b1be:	4a09      	ldr	r2, [pc, #36]	@ (800b1e4 <vPortFree+0xc0>)
 800b1c0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b1c2:	6938      	ldr	r0, [r7, #16]
 800b1c4:	f000 f874 	bl	800b2b0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b1c8:	4b07      	ldr	r3, [pc, #28]	@ (800b1e8 <vPortFree+0xc4>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	3301      	adds	r3, #1
 800b1ce:	4a06      	ldr	r2, [pc, #24]	@ (800b1e8 <vPortFree+0xc4>)
 800b1d0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b1d2:	f7ff fa2d 	bl	800a630 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b1d6:	bf00      	nop
 800b1d8:	3718      	adds	r7, #24
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}
 800b1de:	bf00      	nop
 800b1e0:	24004564 	.word	0x24004564
 800b1e4:	24004554 	.word	0x24004554
 800b1e8:	24004560 	.word	0x24004560

0800b1ec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b085      	sub	sp, #20
 800b1f0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b1f2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800b1f6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b1f8:	4b27      	ldr	r3, [pc, #156]	@ (800b298 <prvHeapInit+0xac>)
 800b1fa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	f003 0307 	and.w	r3, r3, #7
 800b202:	2b00      	cmp	r3, #0
 800b204:	d00c      	beq.n	800b220 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	3307      	adds	r3, #7
 800b20a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	f023 0307 	bic.w	r3, r3, #7
 800b212:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b214:	68ba      	ldr	r2, [r7, #8]
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	1ad3      	subs	r3, r2, r3
 800b21a:	4a1f      	ldr	r2, [pc, #124]	@ (800b298 <prvHeapInit+0xac>)
 800b21c:	4413      	add	r3, r2
 800b21e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b224:	4a1d      	ldr	r2, [pc, #116]	@ (800b29c <prvHeapInit+0xb0>)
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b22a:	4b1c      	ldr	r3, [pc, #112]	@ (800b29c <prvHeapInit+0xb0>)
 800b22c:	2200      	movs	r2, #0
 800b22e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	68ba      	ldr	r2, [r7, #8]
 800b234:	4413      	add	r3, r2
 800b236:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b238:	2208      	movs	r2, #8
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	1a9b      	subs	r3, r3, r2
 800b23e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	f023 0307 	bic.w	r3, r3, #7
 800b246:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	4a15      	ldr	r2, [pc, #84]	@ (800b2a0 <prvHeapInit+0xb4>)
 800b24c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b24e:	4b14      	ldr	r3, [pc, #80]	@ (800b2a0 <prvHeapInit+0xb4>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	2200      	movs	r2, #0
 800b254:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b256:	4b12      	ldr	r3, [pc, #72]	@ (800b2a0 <prvHeapInit+0xb4>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	2200      	movs	r2, #0
 800b25c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	68fa      	ldr	r2, [r7, #12]
 800b266:	1ad2      	subs	r2, r2, r3
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b26c:	4b0c      	ldr	r3, [pc, #48]	@ (800b2a0 <prvHeapInit+0xb4>)
 800b26e:	681a      	ldr	r2, [r3, #0]
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	685b      	ldr	r3, [r3, #4]
 800b278:	4a0a      	ldr	r2, [pc, #40]	@ (800b2a4 <prvHeapInit+0xb8>)
 800b27a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	685b      	ldr	r3, [r3, #4]
 800b280:	4a09      	ldr	r2, [pc, #36]	@ (800b2a8 <prvHeapInit+0xbc>)
 800b282:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b284:	4b09      	ldr	r3, [pc, #36]	@ (800b2ac <prvHeapInit+0xc0>)
 800b286:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b28a:	601a      	str	r2, [r3, #0]
}
 800b28c:	bf00      	nop
 800b28e:	3714      	adds	r7, #20
 800b290:	46bd      	mov	sp, r7
 800b292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b296:	4770      	bx	lr
 800b298:	24000948 	.word	0x24000948
 800b29c:	24004548 	.word	0x24004548
 800b2a0:	24004550 	.word	0x24004550
 800b2a4:	24004558 	.word	0x24004558
 800b2a8:	24004554 	.word	0x24004554
 800b2ac:	24004564 	.word	0x24004564

0800b2b0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b085      	sub	sp, #20
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b2b8:	4b28      	ldr	r3, [pc, #160]	@ (800b35c <prvInsertBlockIntoFreeList+0xac>)
 800b2ba:	60fb      	str	r3, [r7, #12]
 800b2bc:	e002      	b.n	800b2c4 <prvInsertBlockIntoFreeList+0x14>
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	60fb      	str	r3, [r7, #12]
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	687a      	ldr	r2, [r7, #4]
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	d8f7      	bhi.n	800b2be <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	685b      	ldr	r3, [r3, #4]
 800b2d6:	68ba      	ldr	r2, [r7, #8]
 800b2d8:	4413      	add	r3, r2
 800b2da:	687a      	ldr	r2, [r7, #4]
 800b2dc:	429a      	cmp	r2, r3
 800b2de:	d108      	bne.n	800b2f2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	685a      	ldr	r2, [r3, #4]
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	685b      	ldr	r3, [r3, #4]
 800b2e8:	441a      	add	r2, r3
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	685b      	ldr	r3, [r3, #4]
 800b2fa:	68ba      	ldr	r2, [r7, #8]
 800b2fc:	441a      	add	r2, r3
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	429a      	cmp	r2, r3
 800b304:	d118      	bne.n	800b338 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	681a      	ldr	r2, [r3, #0]
 800b30a:	4b15      	ldr	r3, [pc, #84]	@ (800b360 <prvInsertBlockIntoFreeList+0xb0>)
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	429a      	cmp	r2, r3
 800b310:	d00d      	beq.n	800b32e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	685a      	ldr	r2, [r3, #4]
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	685b      	ldr	r3, [r3, #4]
 800b31c:	441a      	add	r2, r3
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	681a      	ldr	r2, [r3, #0]
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	601a      	str	r2, [r3, #0]
 800b32c:	e008      	b.n	800b340 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b32e:	4b0c      	ldr	r3, [pc, #48]	@ (800b360 <prvInsertBlockIntoFreeList+0xb0>)
 800b330:	681a      	ldr	r2, [r3, #0]
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	601a      	str	r2, [r3, #0]
 800b336:	e003      	b.n	800b340 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	681a      	ldr	r2, [r3, #0]
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b340:	68fa      	ldr	r2, [r7, #12]
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	429a      	cmp	r2, r3
 800b346:	d002      	beq.n	800b34e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	687a      	ldr	r2, [r7, #4]
 800b34c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b34e:	bf00      	nop
 800b350:	3714      	adds	r7, #20
 800b352:	46bd      	mov	sp, r7
 800b354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b358:	4770      	bx	lr
 800b35a:	bf00      	nop
 800b35c:	24004548 	.word	0x24004548
 800b360:	24004550 	.word	0x24004550

0800b364 <std>:
 800b364:	2300      	movs	r3, #0
 800b366:	b510      	push	{r4, lr}
 800b368:	4604      	mov	r4, r0
 800b36a:	e9c0 3300 	strd	r3, r3, [r0]
 800b36e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b372:	6083      	str	r3, [r0, #8]
 800b374:	8181      	strh	r1, [r0, #12]
 800b376:	6643      	str	r3, [r0, #100]	@ 0x64
 800b378:	81c2      	strh	r2, [r0, #14]
 800b37a:	6183      	str	r3, [r0, #24]
 800b37c:	4619      	mov	r1, r3
 800b37e:	2208      	movs	r2, #8
 800b380:	305c      	adds	r0, #92	@ 0x5c
 800b382:	f000 f9e7 	bl	800b754 <memset>
 800b386:	4b0d      	ldr	r3, [pc, #52]	@ (800b3bc <std+0x58>)
 800b388:	6263      	str	r3, [r4, #36]	@ 0x24
 800b38a:	4b0d      	ldr	r3, [pc, #52]	@ (800b3c0 <std+0x5c>)
 800b38c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b38e:	4b0d      	ldr	r3, [pc, #52]	@ (800b3c4 <std+0x60>)
 800b390:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b392:	4b0d      	ldr	r3, [pc, #52]	@ (800b3c8 <std+0x64>)
 800b394:	6323      	str	r3, [r4, #48]	@ 0x30
 800b396:	4b0d      	ldr	r3, [pc, #52]	@ (800b3cc <std+0x68>)
 800b398:	6224      	str	r4, [r4, #32]
 800b39a:	429c      	cmp	r4, r3
 800b39c:	d006      	beq.n	800b3ac <std+0x48>
 800b39e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b3a2:	4294      	cmp	r4, r2
 800b3a4:	d002      	beq.n	800b3ac <std+0x48>
 800b3a6:	33d0      	adds	r3, #208	@ 0xd0
 800b3a8:	429c      	cmp	r4, r3
 800b3aa:	d105      	bne.n	800b3b8 <std+0x54>
 800b3ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b3b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3b4:	f000 ba9c 	b.w	800b8f0 <__retarget_lock_init_recursive>
 800b3b8:	bd10      	pop	{r4, pc}
 800b3ba:	bf00      	nop
 800b3bc:	0800b5a5 	.word	0x0800b5a5
 800b3c0:	0800b5c7 	.word	0x0800b5c7
 800b3c4:	0800b5ff 	.word	0x0800b5ff
 800b3c8:	0800b623 	.word	0x0800b623
 800b3cc:	24004568 	.word	0x24004568

0800b3d0 <stdio_exit_handler>:
 800b3d0:	4a02      	ldr	r2, [pc, #8]	@ (800b3dc <stdio_exit_handler+0xc>)
 800b3d2:	4903      	ldr	r1, [pc, #12]	@ (800b3e0 <stdio_exit_handler+0x10>)
 800b3d4:	4803      	ldr	r0, [pc, #12]	@ (800b3e4 <stdio_exit_handler+0x14>)
 800b3d6:	f000 b869 	b.w	800b4ac <_fwalk_sglue>
 800b3da:	bf00      	nop
 800b3dc:	24000014 	.word	0x24000014
 800b3e0:	0800bc0d 	.word	0x0800bc0d
 800b3e4:	24000024 	.word	0x24000024

0800b3e8 <cleanup_stdio>:
 800b3e8:	6841      	ldr	r1, [r0, #4]
 800b3ea:	4b0c      	ldr	r3, [pc, #48]	@ (800b41c <cleanup_stdio+0x34>)
 800b3ec:	4299      	cmp	r1, r3
 800b3ee:	b510      	push	{r4, lr}
 800b3f0:	4604      	mov	r4, r0
 800b3f2:	d001      	beq.n	800b3f8 <cleanup_stdio+0x10>
 800b3f4:	f000 fc0a 	bl	800bc0c <_fflush_r>
 800b3f8:	68a1      	ldr	r1, [r4, #8]
 800b3fa:	4b09      	ldr	r3, [pc, #36]	@ (800b420 <cleanup_stdio+0x38>)
 800b3fc:	4299      	cmp	r1, r3
 800b3fe:	d002      	beq.n	800b406 <cleanup_stdio+0x1e>
 800b400:	4620      	mov	r0, r4
 800b402:	f000 fc03 	bl	800bc0c <_fflush_r>
 800b406:	68e1      	ldr	r1, [r4, #12]
 800b408:	4b06      	ldr	r3, [pc, #24]	@ (800b424 <cleanup_stdio+0x3c>)
 800b40a:	4299      	cmp	r1, r3
 800b40c:	d004      	beq.n	800b418 <cleanup_stdio+0x30>
 800b40e:	4620      	mov	r0, r4
 800b410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b414:	f000 bbfa 	b.w	800bc0c <_fflush_r>
 800b418:	bd10      	pop	{r4, pc}
 800b41a:	bf00      	nop
 800b41c:	24004568 	.word	0x24004568
 800b420:	240045d0 	.word	0x240045d0
 800b424:	24004638 	.word	0x24004638

0800b428 <global_stdio_init.part.0>:
 800b428:	b510      	push	{r4, lr}
 800b42a:	4b0b      	ldr	r3, [pc, #44]	@ (800b458 <global_stdio_init.part.0+0x30>)
 800b42c:	4c0b      	ldr	r4, [pc, #44]	@ (800b45c <global_stdio_init.part.0+0x34>)
 800b42e:	4a0c      	ldr	r2, [pc, #48]	@ (800b460 <global_stdio_init.part.0+0x38>)
 800b430:	601a      	str	r2, [r3, #0]
 800b432:	4620      	mov	r0, r4
 800b434:	2200      	movs	r2, #0
 800b436:	2104      	movs	r1, #4
 800b438:	f7ff ff94 	bl	800b364 <std>
 800b43c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b440:	2201      	movs	r2, #1
 800b442:	2109      	movs	r1, #9
 800b444:	f7ff ff8e 	bl	800b364 <std>
 800b448:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b44c:	2202      	movs	r2, #2
 800b44e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b452:	2112      	movs	r1, #18
 800b454:	f7ff bf86 	b.w	800b364 <std>
 800b458:	240046a0 	.word	0x240046a0
 800b45c:	24004568 	.word	0x24004568
 800b460:	0800b3d1 	.word	0x0800b3d1

0800b464 <__sfp_lock_acquire>:
 800b464:	4801      	ldr	r0, [pc, #4]	@ (800b46c <__sfp_lock_acquire+0x8>)
 800b466:	f000 ba44 	b.w	800b8f2 <__retarget_lock_acquire_recursive>
 800b46a:	bf00      	nop
 800b46c:	240046a9 	.word	0x240046a9

0800b470 <__sfp_lock_release>:
 800b470:	4801      	ldr	r0, [pc, #4]	@ (800b478 <__sfp_lock_release+0x8>)
 800b472:	f000 ba3f 	b.w	800b8f4 <__retarget_lock_release_recursive>
 800b476:	bf00      	nop
 800b478:	240046a9 	.word	0x240046a9

0800b47c <__sinit>:
 800b47c:	b510      	push	{r4, lr}
 800b47e:	4604      	mov	r4, r0
 800b480:	f7ff fff0 	bl	800b464 <__sfp_lock_acquire>
 800b484:	6a23      	ldr	r3, [r4, #32]
 800b486:	b11b      	cbz	r3, 800b490 <__sinit+0x14>
 800b488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b48c:	f7ff bff0 	b.w	800b470 <__sfp_lock_release>
 800b490:	4b04      	ldr	r3, [pc, #16]	@ (800b4a4 <__sinit+0x28>)
 800b492:	6223      	str	r3, [r4, #32]
 800b494:	4b04      	ldr	r3, [pc, #16]	@ (800b4a8 <__sinit+0x2c>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d1f5      	bne.n	800b488 <__sinit+0xc>
 800b49c:	f7ff ffc4 	bl	800b428 <global_stdio_init.part.0>
 800b4a0:	e7f2      	b.n	800b488 <__sinit+0xc>
 800b4a2:	bf00      	nop
 800b4a4:	0800b3e9 	.word	0x0800b3e9
 800b4a8:	240046a0 	.word	0x240046a0

0800b4ac <_fwalk_sglue>:
 800b4ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4b0:	4607      	mov	r7, r0
 800b4b2:	4688      	mov	r8, r1
 800b4b4:	4614      	mov	r4, r2
 800b4b6:	2600      	movs	r6, #0
 800b4b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b4bc:	f1b9 0901 	subs.w	r9, r9, #1
 800b4c0:	d505      	bpl.n	800b4ce <_fwalk_sglue+0x22>
 800b4c2:	6824      	ldr	r4, [r4, #0]
 800b4c4:	2c00      	cmp	r4, #0
 800b4c6:	d1f7      	bne.n	800b4b8 <_fwalk_sglue+0xc>
 800b4c8:	4630      	mov	r0, r6
 800b4ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4ce:	89ab      	ldrh	r3, [r5, #12]
 800b4d0:	2b01      	cmp	r3, #1
 800b4d2:	d907      	bls.n	800b4e4 <_fwalk_sglue+0x38>
 800b4d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b4d8:	3301      	adds	r3, #1
 800b4da:	d003      	beq.n	800b4e4 <_fwalk_sglue+0x38>
 800b4dc:	4629      	mov	r1, r5
 800b4de:	4638      	mov	r0, r7
 800b4e0:	47c0      	blx	r8
 800b4e2:	4306      	orrs	r6, r0
 800b4e4:	3568      	adds	r5, #104	@ 0x68
 800b4e6:	e7e9      	b.n	800b4bc <_fwalk_sglue+0x10>

0800b4e8 <_puts_r>:
 800b4e8:	6a03      	ldr	r3, [r0, #32]
 800b4ea:	b570      	push	{r4, r5, r6, lr}
 800b4ec:	6884      	ldr	r4, [r0, #8]
 800b4ee:	4605      	mov	r5, r0
 800b4f0:	460e      	mov	r6, r1
 800b4f2:	b90b      	cbnz	r3, 800b4f8 <_puts_r+0x10>
 800b4f4:	f7ff ffc2 	bl	800b47c <__sinit>
 800b4f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b4fa:	07db      	lsls	r3, r3, #31
 800b4fc:	d405      	bmi.n	800b50a <_puts_r+0x22>
 800b4fe:	89a3      	ldrh	r3, [r4, #12]
 800b500:	0598      	lsls	r0, r3, #22
 800b502:	d402      	bmi.n	800b50a <_puts_r+0x22>
 800b504:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b506:	f000 f9f4 	bl	800b8f2 <__retarget_lock_acquire_recursive>
 800b50a:	89a3      	ldrh	r3, [r4, #12]
 800b50c:	0719      	lsls	r1, r3, #28
 800b50e:	d502      	bpl.n	800b516 <_puts_r+0x2e>
 800b510:	6923      	ldr	r3, [r4, #16]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d135      	bne.n	800b582 <_puts_r+0x9a>
 800b516:	4621      	mov	r1, r4
 800b518:	4628      	mov	r0, r5
 800b51a:	f000 f8c5 	bl	800b6a8 <__swsetup_r>
 800b51e:	b380      	cbz	r0, 800b582 <_puts_r+0x9a>
 800b520:	f04f 35ff 	mov.w	r5, #4294967295
 800b524:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b526:	07da      	lsls	r2, r3, #31
 800b528:	d405      	bmi.n	800b536 <_puts_r+0x4e>
 800b52a:	89a3      	ldrh	r3, [r4, #12]
 800b52c:	059b      	lsls	r3, r3, #22
 800b52e:	d402      	bmi.n	800b536 <_puts_r+0x4e>
 800b530:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b532:	f000 f9df 	bl	800b8f4 <__retarget_lock_release_recursive>
 800b536:	4628      	mov	r0, r5
 800b538:	bd70      	pop	{r4, r5, r6, pc}
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	da04      	bge.n	800b548 <_puts_r+0x60>
 800b53e:	69a2      	ldr	r2, [r4, #24]
 800b540:	429a      	cmp	r2, r3
 800b542:	dc17      	bgt.n	800b574 <_puts_r+0x8c>
 800b544:	290a      	cmp	r1, #10
 800b546:	d015      	beq.n	800b574 <_puts_r+0x8c>
 800b548:	6823      	ldr	r3, [r4, #0]
 800b54a:	1c5a      	adds	r2, r3, #1
 800b54c:	6022      	str	r2, [r4, #0]
 800b54e:	7019      	strb	r1, [r3, #0]
 800b550:	68a3      	ldr	r3, [r4, #8]
 800b552:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b556:	3b01      	subs	r3, #1
 800b558:	60a3      	str	r3, [r4, #8]
 800b55a:	2900      	cmp	r1, #0
 800b55c:	d1ed      	bne.n	800b53a <_puts_r+0x52>
 800b55e:	2b00      	cmp	r3, #0
 800b560:	da11      	bge.n	800b586 <_puts_r+0x9e>
 800b562:	4622      	mov	r2, r4
 800b564:	210a      	movs	r1, #10
 800b566:	4628      	mov	r0, r5
 800b568:	f000 f85f 	bl	800b62a <__swbuf_r>
 800b56c:	3001      	adds	r0, #1
 800b56e:	d0d7      	beq.n	800b520 <_puts_r+0x38>
 800b570:	250a      	movs	r5, #10
 800b572:	e7d7      	b.n	800b524 <_puts_r+0x3c>
 800b574:	4622      	mov	r2, r4
 800b576:	4628      	mov	r0, r5
 800b578:	f000 f857 	bl	800b62a <__swbuf_r>
 800b57c:	3001      	adds	r0, #1
 800b57e:	d1e7      	bne.n	800b550 <_puts_r+0x68>
 800b580:	e7ce      	b.n	800b520 <_puts_r+0x38>
 800b582:	3e01      	subs	r6, #1
 800b584:	e7e4      	b.n	800b550 <_puts_r+0x68>
 800b586:	6823      	ldr	r3, [r4, #0]
 800b588:	1c5a      	adds	r2, r3, #1
 800b58a:	6022      	str	r2, [r4, #0]
 800b58c:	220a      	movs	r2, #10
 800b58e:	701a      	strb	r2, [r3, #0]
 800b590:	e7ee      	b.n	800b570 <_puts_r+0x88>
	...

0800b594 <puts>:
 800b594:	4b02      	ldr	r3, [pc, #8]	@ (800b5a0 <puts+0xc>)
 800b596:	4601      	mov	r1, r0
 800b598:	6818      	ldr	r0, [r3, #0]
 800b59a:	f7ff bfa5 	b.w	800b4e8 <_puts_r>
 800b59e:	bf00      	nop
 800b5a0:	24000020 	.word	0x24000020

0800b5a4 <__sread>:
 800b5a4:	b510      	push	{r4, lr}
 800b5a6:	460c      	mov	r4, r1
 800b5a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5ac:	f000 f952 	bl	800b854 <_read_r>
 800b5b0:	2800      	cmp	r0, #0
 800b5b2:	bfab      	itete	ge
 800b5b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b5b6:	89a3      	ldrhlt	r3, [r4, #12]
 800b5b8:	181b      	addge	r3, r3, r0
 800b5ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b5be:	bfac      	ite	ge
 800b5c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b5c2:	81a3      	strhlt	r3, [r4, #12]
 800b5c4:	bd10      	pop	{r4, pc}

0800b5c6 <__swrite>:
 800b5c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5ca:	461f      	mov	r7, r3
 800b5cc:	898b      	ldrh	r3, [r1, #12]
 800b5ce:	05db      	lsls	r3, r3, #23
 800b5d0:	4605      	mov	r5, r0
 800b5d2:	460c      	mov	r4, r1
 800b5d4:	4616      	mov	r6, r2
 800b5d6:	d505      	bpl.n	800b5e4 <__swrite+0x1e>
 800b5d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5dc:	2302      	movs	r3, #2
 800b5de:	2200      	movs	r2, #0
 800b5e0:	f000 f926 	bl	800b830 <_lseek_r>
 800b5e4:	89a3      	ldrh	r3, [r4, #12]
 800b5e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b5ee:	81a3      	strh	r3, [r4, #12]
 800b5f0:	4632      	mov	r2, r6
 800b5f2:	463b      	mov	r3, r7
 800b5f4:	4628      	mov	r0, r5
 800b5f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5fa:	f000 b93d 	b.w	800b878 <_write_r>

0800b5fe <__sseek>:
 800b5fe:	b510      	push	{r4, lr}
 800b600:	460c      	mov	r4, r1
 800b602:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b606:	f000 f913 	bl	800b830 <_lseek_r>
 800b60a:	1c43      	adds	r3, r0, #1
 800b60c:	89a3      	ldrh	r3, [r4, #12]
 800b60e:	bf15      	itete	ne
 800b610:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b612:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b616:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b61a:	81a3      	strheq	r3, [r4, #12]
 800b61c:	bf18      	it	ne
 800b61e:	81a3      	strhne	r3, [r4, #12]
 800b620:	bd10      	pop	{r4, pc}

0800b622 <__sclose>:
 800b622:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b626:	f000 b89d 	b.w	800b764 <_close_r>

0800b62a <__swbuf_r>:
 800b62a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b62c:	460e      	mov	r6, r1
 800b62e:	4614      	mov	r4, r2
 800b630:	4605      	mov	r5, r0
 800b632:	b118      	cbz	r0, 800b63c <__swbuf_r+0x12>
 800b634:	6a03      	ldr	r3, [r0, #32]
 800b636:	b90b      	cbnz	r3, 800b63c <__swbuf_r+0x12>
 800b638:	f7ff ff20 	bl	800b47c <__sinit>
 800b63c:	69a3      	ldr	r3, [r4, #24]
 800b63e:	60a3      	str	r3, [r4, #8]
 800b640:	89a3      	ldrh	r3, [r4, #12]
 800b642:	071a      	lsls	r2, r3, #28
 800b644:	d501      	bpl.n	800b64a <__swbuf_r+0x20>
 800b646:	6923      	ldr	r3, [r4, #16]
 800b648:	b943      	cbnz	r3, 800b65c <__swbuf_r+0x32>
 800b64a:	4621      	mov	r1, r4
 800b64c:	4628      	mov	r0, r5
 800b64e:	f000 f82b 	bl	800b6a8 <__swsetup_r>
 800b652:	b118      	cbz	r0, 800b65c <__swbuf_r+0x32>
 800b654:	f04f 37ff 	mov.w	r7, #4294967295
 800b658:	4638      	mov	r0, r7
 800b65a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b65c:	6823      	ldr	r3, [r4, #0]
 800b65e:	6922      	ldr	r2, [r4, #16]
 800b660:	1a98      	subs	r0, r3, r2
 800b662:	6963      	ldr	r3, [r4, #20]
 800b664:	b2f6      	uxtb	r6, r6
 800b666:	4283      	cmp	r3, r0
 800b668:	4637      	mov	r7, r6
 800b66a:	dc05      	bgt.n	800b678 <__swbuf_r+0x4e>
 800b66c:	4621      	mov	r1, r4
 800b66e:	4628      	mov	r0, r5
 800b670:	f000 facc 	bl	800bc0c <_fflush_r>
 800b674:	2800      	cmp	r0, #0
 800b676:	d1ed      	bne.n	800b654 <__swbuf_r+0x2a>
 800b678:	68a3      	ldr	r3, [r4, #8]
 800b67a:	3b01      	subs	r3, #1
 800b67c:	60a3      	str	r3, [r4, #8]
 800b67e:	6823      	ldr	r3, [r4, #0]
 800b680:	1c5a      	adds	r2, r3, #1
 800b682:	6022      	str	r2, [r4, #0]
 800b684:	701e      	strb	r6, [r3, #0]
 800b686:	6962      	ldr	r2, [r4, #20]
 800b688:	1c43      	adds	r3, r0, #1
 800b68a:	429a      	cmp	r2, r3
 800b68c:	d004      	beq.n	800b698 <__swbuf_r+0x6e>
 800b68e:	89a3      	ldrh	r3, [r4, #12]
 800b690:	07db      	lsls	r3, r3, #31
 800b692:	d5e1      	bpl.n	800b658 <__swbuf_r+0x2e>
 800b694:	2e0a      	cmp	r6, #10
 800b696:	d1df      	bne.n	800b658 <__swbuf_r+0x2e>
 800b698:	4621      	mov	r1, r4
 800b69a:	4628      	mov	r0, r5
 800b69c:	f000 fab6 	bl	800bc0c <_fflush_r>
 800b6a0:	2800      	cmp	r0, #0
 800b6a2:	d0d9      	beq.n	800b658 <__swbuf_r+0x2e>
 800b6a4:	e7d6      	b.n	800b654 <__swbuf_r+0x2a>
	...

0800b6a8 <__swsetup_r>:
 800b6a8:	b538      	push	{r3, r4, r5, lr}
 800b6aa:	4b29      	ldr	r3, [pc, #164]	@ (800b750 <__swsetup_r+0xa8>)
 800b6ac:	4605      	mov	r5, r0
 800b6ae:	6818      	ldr	r0, [r3, #0]
 800b6b0:	460c      	mov	r4, r1
 800b6b2:	b118      	cbz	r0, 800b6bc <__swsetup_r+0x14>
 800b6b4:	6a03      	ldr	r3, [r0, #32]
 800b6b6:	b90b      	cbnz	r3, 800b6bc <__swsetup_r+0x14>
 800b6b8:	f7ff fee0 	bl	800b47c <__sinit>
 800b6bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6c0:	0719      	lsls	r1, r3, #28
 800b6c2:	d422      	bmi.n	800b70a <__swsetup_r+0x62>
 800b6c4:	06da      	lsls	r2, r3, #27
 800b6c6:	d407      	bmi.n	800b6d8 <__swsetup_r+0x30>
 800b6c8:	2209      	movs	r2, #9
 800b6ca:	602a      	str	r2, [r5, #0]
 800b6cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6d0:	81a3      	strh	r3, [r4, #12]
 800b6d2:	f04f 30ff 	mov.w	r0, #4294967295
 800b6d6:	e033      	b.n	800b740 <__swsetup_r+0x98>
 800b6d8:	0758      	lsls	r0, r3, #29
 800b6da:	d512      	bpl.n	800b702 <__swsetup_r+0x5a>
 800b6dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b6de:	b141      	cbz	r1, 800b6f2 <__swsetup_r+0x4a>
 800b6e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b6e4:	4299      	cmp	r1, r3
 800b6e6:	d002      	beq.n	800b6ee <__swsetup_r+0x46>
 800b6e8:	4628      	mov	r0, r5
 800b6ea:	f000 f913 	bl	800b914 <_free_r>
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	6363      	str	r3, [r4, #52]	@ 0x34
 800b6f2:	89a3      	ldrh	r3, [r4, #12]
 800b6f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b6f8:	81a3      	strh	r3, [r4, #12]
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	6063      	str	r3, [r4, #4]
 800b6fe:	6923      	ldr	r3, [r4, #16]
 800b700:	6023      	str	r3, [r4, #0]
 800b702:	89a3      	ldrh	r3, [r4, #12]
 800b704:	f043 0308 	orr.w	r3, r3, #8
 800b708:	81a3      	strh	r3, [r4, #12]
 800b70a:	6923      	ldr	r3, [r4, #16]
 800b70c:	b94b      	cbnz	r3, 800b722 <__swsetup_r+0x7a>
 800b70e:	89a3      	ldrh	r3, [r4, #12]
 800b710:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b714:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b718:	d003      	beq.n	800b722 <__swsetup_r+0x7a>
 800b71a:	4621      	mov	r1, r4
 800b71c:	4628      	mov	r0, r5
 800b71e:	f000 fac3 	bl	800bca8 <__smakebuf_r>
 800b722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b726:	f013 0201 	ands.w	r2, r3, #1
 800b72a:	d00a      	beq.n	800b742 <__swsetup_r+0x9a>
 800b72c:	2200      	movs	r2, #0
 800b72e:	60a2      	str	r2, [r4, #8]
 800b730:	6962      	ldr	r2, [r4, #20]
 800b732:	4252      	negs	r2, r2
 800b734:	61a2      	str	r2, [r4, #24]
 800b736:	6922      	ldr	r2, [r4, #16]
 800b738:	b942      	cbnz	r2, 800b74c <__swsetup_r+0xa4>
 800b73a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b73e:	d1c5      	bne.n	800b6cc <__swsetup_r+0x24>
 800b740:	bd38      	pop	{r3, r4, r5, pc}
 800b742:	0799      	lsls	r1, r3, #30
 800b744:	bf58      	it	pl
 800b746:	6962      	ldrpl	r2, [r4, #20]
 800b748:	60a2      	str	r2, [r4, #8]
 800b74a:	e7f4      	b.n	800b736 <__swsetup_r+0x8e>
 800b74c:	2000      	movs	r0, #0
 800b74e:	e7f7      	b.n	800b740 <__swsetup_r+0x98>
 800b750:	24000020 	.word	0x24000020

0800b754 <memset>:
 800b754:	4402      	add	r2, r0
 800b756:	4603      	mov	r3, r0
 800b758:	4293      	cmp	r3, r2
 800b75a:	d100      	bne.n	800b75e <memset+0xa>
 800b75c:	4770      	bx	lr
 800b75e:	f803 1b01 	strb.w	r1, [r3], #1
 800b762:	e7f9      	b.n	800b758 <memset+0x4>

0800b764 <_close_r>:
 800b764:	b538      	push	{r3, r4, r5, lr}
 800b766:	4d06      	ldr	r5, [pc, #24]	@ (800b780 <_close_r+0x1c>)
 800b768:	2300      	movs	r3, #0
 800b76a:	4604      	mov	r4, r0
 800b76c:	4608      	mov	r0, r1
 800b76e:	602b      	str	r3, [r5, #0]
 800b770:	f7f5 fd53 	bl	800121a <_close>
 800b774:	1c43      	adds	r3, r0, #1
 800b776:	d102      	bne.n	800b77e <_close_r+0x1a>
 800b778:	682b      	ldr	r3, [r5, #0]
 800b77a:	b103      	cbz	r3, 800b77e <_close_r+0x1a>
 800b77c:	6023      	str	r3, [r4, #0]
 800b77e:	bd38      	pop	{r3, r4, r5, pc}
 800b780:	240046a4 	.word	0x240046a4

0800b784 <_reclaim_reent>:
 800b784:	4b29      	ldr	r3, [pc, #164]	@ (800b82c <_reclaim_reent+0xa8>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	4283      	cmp	r3, r0
 800b78a:	b570      	push	{r4, r5, r6, lr}
 800b78c:	4604      	mov	r4, r0
 800b78e:	d04b      	beq.n	800b828 <_reclaim_reent+0xa4>
 800b790:	69c3      	ldr	r3, [r0, #28]
 800b792:	b1ab      	cbz	r3, 800b7c0 <_reclaim_reent+0x3c>
 800b794:	68db      	ldr	r3, [r3, #12]
 800b796:	b16b      	cbz	r3, 800b7b4 <_reclaim_reent+0x30>
 800b798:	2500      	movs	r5, #0
 800b79a:	69e3      	ldr	r3, [r4, #28]
 800b79c:	68db      	ldr	r3, [r3, #12]
 800b79e:	5959      	ldr	r1, [r3, r5]
 800b7a0:	2900      	cmp	r1, #0
 800b7a2:	d13b      	bne.n	800b81c <_reclaim_reent+0x98>
 800b7a4:	3504      	adds	r5, #4
 800b7a6:	2d80      	cmp	r5, #128	@ 0x80
 800b7a8:	d1f7      	bne.n	800b79a <_reclaim_reent+0x16>
 800b7aa:	69e3      	ldr	r3, [r4, #28]
 800b7ac:	4620      	mov	r0, r4
 800b7ae:	68d9      	ldr	r1, [r3, #12]
 800b7b0:	f000 f8b0 	bl	800b914 <_free_r>
 800b7b4:	69e3      	ldr	r3, [r4, #28]
 800b7b6:	6819      	ldr	r1, [r3, #0]
 800b7b8:	b111      	cbz	r1, 800b7c0 <_reclaim_reent+0x3c>
 800b7ba:	4620      	mov	r0, r4
 800b7bc:	f000 f8aa 	bl	800b914 <_free_r>
 800b7c0:	6961      	ldr	r1, [r4, #20]
 800b7c2:	b111      	cbz	r1, 800b7ca <_reclaim_reent+0x46>
 800b7c4:	4620      	mov	r0, r4
 800b7c6:	f000 f8a5 	bl	800b914 <_free_r>
 800b7ca:	69e1      	ldr	r1, [r4, #28]
 800b7cc:	b111      	cbz	r1, 800b7d4 <_reclaim_reent+0x50>
 800b7ce:	4620      	mov	r0, r4
 800b7d0:	f000 f8a0 	bl	800b914 <_free_r>
 800b7d4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b7d6:	b111      	cbz	r1, 800b7de <_reclaim_reent+0x5a>
 800b7d8:	4620      	mov	r0, r4
 800b7da:	f000 f89b 	bl	800b914 <_free_r>
 800b7de:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b7e0:	b111      	cbz	r1, 800b7e8 <_reclaim_reent+0x64>
 800b7e2:	4620      	mov	r0, r4
 800b7e4:	f000 f896 	bl	800b914 <_free_r>
 800b7e8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800b7ea:	b111      	cbz	r1, 800b7f2 <_reclaim_reent+0x6e>
 800b7ec:	4620      	mov	r0, r4
 800b7ee:	f000 f891 	bl	800b914 <_free_r>
 800b7f2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b7f4:	b111      	cbz	r1, 800b7fc <_reclaim_reent+0x78>
 800b7f6:	4620      	mov	r0, r4
 800b7f8:	f000 f88c 	bl	800b914 <_free_r>
 800b7fc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b7fe:	b111      	cbz	r1, 800b806 <_reclaim_reent+0x82>
 800b800:	4620      	mov	r0, r4
 800b802:	f000 f887 	bl	800b914 <_free_r>
 800b806:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b808:	b111      	cbz	r1, 800b810 <_reclaim_reent+0x8c>
 800b80a:	4620      	mov	r0, r4
 800b80c:	f000 f882 	bl	800b914 <_free_r>
 800b810:	6a23      	ldr	r3, [r4, #32]
 800b812:	b14b      	cbz	r3, 800b828 <_reclaim_reent+0xa4>
 800b814:	4620      	mov	r0, r4
 800b816:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b81a:	4718      	bx	r3
 800b81c:	680e      	ldr	r6, [r1, #0]
 800b81e:	4620      	mov	r0, r4
 800b820:	f000 f878 	bl	800b914 <_free_r>
 800b824:	4631      	mov	r1, r6
 800b826:	e7bb      	b.n	800b7a0 <_reclaim_reent+0x1c>
 800b828:	bd70      	pop	{r4, r5, r6, pc}
 800b82a:	bf00      	nop
 800b82c:	24000020 	.word	0x24000020

0800b830 <_lseek_r>:
 800b830:	b538      	push	{r3, r4, r5, lr}
 800b832:	4d07      	ldr	r5, [pc, #28]	@ (800b850 <_lseek_r+0x20>)
 800b834:	4604      	mov	r4, r0
 800b836:	4608      	mov	r0, r1
 800b838:	4611      	mov	r1, r2
 800b83a:	2200      	movs	r2, #0
 800b83c:	602a      	str	r2, [r5, #0]
 800b83e:	461a      	mov	r2, r3
 800b840:	f7f5 fd12 	bl	8001268 <_lseek>
 800b844:	1c43      	adds	r3, r0, #1
 800b846:	d102      	bne.n	800b84e <_lseek_r+0x1e>
 800b848:	682b      	ldr	r3, [r5, #0]
 800b84a:	b103      	cbz	r3, 800b84e <_lseek_r+0x1e>
 800b84c:	6023      	str	r3, [r4, #0]
 800b84e:	bd38      	pop	{r3, r4, r5, pc}
 800b850:	240046a4 	.word	0x240046a4

0800b854 <_read_r>:
 800b854:	b538      	push	{r3, r4, r5, lr}
 800b856:	4d07      	ldr	r5, [pc, #28]	@ (800b874 <_read_r+0x20>)
 800b858:	4604      	mov	r4, r0
 800b85a:	4608      	mov	r0, r1
 800b85c:	4611      	mov	r1, r2
 800b85e:	2200      	movs	r2, #0
 800b860:	602a      	str	r2, [r5, #0]
 800b862:	461a      	mov	r2, r3
 800b864:	f7f5 fca0 	bl	80011a8 <_read>
 800b868:	1c43      	adds	r3, r0, #1
 800b86a:	d102      	bne.n	800b872 <_read_r+0x1e>
 800b86c:	682b      	ldr	r3, [r5, #0]
 800b86e:	b103      	cbz	r3, 800b872 <_read_r+0x1e>
 800b870:	6023      	str	r3, [r4, #0]
 800b872:	bd38      	pop	{r3, r4, r5, pc}
 800b874:	240046a4 	.word	0x240046a4

0800b878 <_write_r>:
 800b878:	b538      	push	{r3, r4, r5, lr}
 800b87a:	4d07      	ldr	r5, [pc, #28]	@ (800b898 <_write_r+0x20>)
 800b87c:	4604      	mov	r4, r0
 800b87e:	4608      	mov	r0, r1
 800b880:	4611      	mov	r1, r2
 800b882:	2200      	movs	r2, #0
 800b884:	602a      	str	r2, [r5, #0]
 800b886:	461a      	mov	r2, r3
 800b888:	f7f5 fcab 	bl	80011e2 <_write>
 800b88c:	1c43      	adds	r3, r0, #1
 800b88e:	d102      	bne.n	800b896 <_write_r+0x1e>
 800b890:	682b      	ldr	r3, [r5, #0]
 800b892:	b103      	cbz	r3, 800b896 <_write_r+0x1e>
 800b894:	6023      	str	r3, [r4, #0]
 800b896:	bd38      	pop	{r3, r4, r5, pc}
 800b898:	240046a4 	.word	0x240046a4

0800b89c <__errno>:
 800b89c:	4b01      	ldr	r3, [pc, #4]	@ (800b8a4 <__errno+0x8>)
 800b89e:	6818      	ldr	r0, [r3, #0]
 800b8a0:	4770      	bx	lr
 800b8a2:	bf00      	nop
 800b8a4:	24000020 	.word	0x24000020

0800b8a8 <__libc_init_array>:
 800b8a8:	b570      	push	{r4, r5, r6, lr}
 800b8aa:	4d0d      	ldr	r5, [pc, #52]	@ (800b8e0 <__libc_init_array+0x38>)
 800b8ac:	4c0d      	ldr	r4, [pc, #52]	@ (800b8e4 <__libc_init_array+0x3c>)
 800b8ae:	1b64      	subs	r4, r4, r5
 800b8b0:	10a4      	asrs	r4, r4, #2
 800b8b2:	2600      	movs	r6, #0
 800b8b4:	42a6      	cmp	r6, r4
 800b8b6:	d109      	bne.n	800b8cc <__libc_init_array+0x24>
 800b8b8:	4d0b      	ldr	r5, [pc, #44]	@ (800b8e8 <__libc_init_array+0x40>)
 800b8ba:	4c0c      	ldr	r4, [pc, #48]	@ (800b8ec <__libc_init_array+0x44>)
 800b8bc:	f000 fa62 	bl	800bd84 <_init>
 800b8c0:	1b64      	subs	r4, r4, r5
 800b8c2:	10a4      	asrs	r4, r4, #2
 800b8c4:	2600      	movs	r6, #0
 800b8c6:	42a6      	cmp	r6, r4
 800b8c8:	d105      	bne.n	800b8d6 <__libc_init_array+0x2e>
 800b8ca:	bd70      	pop	{r4, r5, r6, pc}
 800b8cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8d0:	4798      	blx	r3
 800b8d2:	3601      	adds	r6, #1
 800b8d4:	e7ee      	b.n	800b8b4 <__libc_init_array+0xc>
 800b8d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8da:	4798      	blx	r3
 800b8dc:	3601      	adds	r6, #1
 800b8de:	e7f2      	b.n	800b8c6 <__libc_init_array+0x1e>
 800b8e0:	0800bf0c 	.word	0x0800bf0c
 800b8e4:	0800bf0c 	.word	0x0800bf0c
 800b8e8:	0800bf0c 	.word	0x0800bf0c
 800b8ec:	0800bf10 	.word	0x0800bf10

0800b8f0 <__retarget_lock_init_recursive>:
 800b8f0:	4770      	bx	lr

0800b8f2 <__retarget_lock_acquire_recursive>:
 800b8f2:	4770      	bx	lr

0800b8f4 <__retarget_lock_release_recursive>:
 800b8f4:	4770      	bx	lr

0800b8f6 <memcpy>:
 800b8f6:	440a      	add	r2, r1
 800b8f8:	4291      	cmp	r1, r2
 800b8fa:	f100 33ff 	add.w	r3, r0, #4294967295
 800b8fe:	d100      	bne.n	800b902 <memcpy+0xc>
 800b900:	4770      	bx	lr
 800b902:	b510      	push	{r4, lr}
 800b904:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b908:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b90c:	4291      	cmp	r1, r2
 800b90e:	d1f9      	bne.n	800b904 <memcpy+0xe>
 800b910:	bd10      	pop	{r4, pc}
	...

0800b914 <_free_r>:
 800b914:	b538      	push	{r3, r4, r5, lr}
 800b916:	4605      	mov	r5, r0
 800b918:	2900      	cmp	r1, #0
 800b91a:	d041      	beq.n	800b9a0 <_free_r+0x8c>
 800b91c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b920:	1f0c      	subs	r4, r1, #4
 800b922:	2b00      	cmp	r3, #0
 800b924:	bfb8      	it	lt
 800b926:	18e4      	addlt	r4, r4, r3
 800b928:	f000 f8e0 	bl	800baec <__malloc_lock>
 800b92c:	4a1d      	ldr	r2, [pc, #116]	@ (800b9a4 <_free_r+0x90>)
 800b92e:	6813      	ldr	r3, [r2, #0]
 800b930:	b933      	cbnz	r3, 800b940 <_free_r+0x2c>
 800b932:	6063      	str	r3, [r4, #4]
 800b934:	6014      	str	r4, [r2, #0]
 800b936:	4628      	mov	r0, r5
 800b938:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b93c:	f000 b8dc 	b.w	800baf8 <__malloc_unlock>
 800b940:	42a3      	cmp	r3, r4
 800b942:	d908      	bls.n	800b956 <_free_r+0x42>
 800b944:	6820      	ldr	r0, [r4, #0]
 800b946:	1821      	adds	r1, r4, r0
 800b948:	428b      	cmp	r3, r1
 800b94a:	bf01      	itttt	eq
 800b94c:	6819      	ldreq	r1, [r3, #0]
 800b94e:	685b      	ldreq	r3, [r3, #4]
 800b950:	1809      	addeq	r1, r1, r0
 800b952:	6021      	streq	r1, [r4, #0]
 800b954:	e7ed      	b.n	800b932 <_free_r+0x1e>
 800b956:	461a      	mov	r2, r3
 800b958:	685b      	ldr	r3, [r3, #4]
 800b95a:	b10b      	cbz	r3, 800b960 <_free_r+0x4c>
 800b95c:	42a3      	cmp	r3, r4
 800b95e:	d9fa      	bls.n	800b956 <_free_r+0x42>
 800b960:	6811      	ldr	r1, [r2, #0]
 800b962:	1850      	adds	r0, r2, r1
 800b964:	42a0      	cmp	r0, r4
 800b966:	d10b      	bne.n	800b980 <_free_r+0x6c>
 800b968:	6820      	ldr	r0, [r4, #0]
 800b96a:	4401      	add	r1, r0
 800b96c:	1850      	adds	r0, r2, r1
 800b96e:	4283      	cmp	r3, r0
 800b970:	6011      	str	r1, [r2, #0]
 800b972:	d1e0      	bne.n	800b936 <_free_r+0x22>
 800b974:	6818      	ldr	r0, [r3, #0]
 800b976:	685b      	ldr	r3, [r3, #4]
 800b978:	6053      	str	r3, [r2, #4]
 800b97a:	4408      	add	r0, r1
 800b97c:	6010      	str	r0, [r2, #0]
 800b97e:	e7da      	b.n	800b936 <_free_r+0x22>
 800b980:	d902      	bls.n	800b988 <_free_r+0x74>
 800b982:	230c      	movs	r3, #12
 800b984:	602b      	str	r3, [r5, #0]
 800b986:	e7d6      	b.n	800b936 <_free_r+0x22>
 800b988:	6820      	ldr	r0, [r4, #0]
 800b98a:	1821      	adds	r1, r4, r0
 800b98c:	428b      	cmp	r3, r1
 800b98e:	bf04      	itt	eq
 800b990:	6819      	ldreq	r1, [r3, #0]
 800b992:	685b      	ldreq	r3, [r3, #4]
 800b994:	6063      	str	r3, [r4, #4]
 800b996:	bf04      	itt	eq
 800b998:	1809      	addeq	r1, r1, r0
 800b99a:	6021      	streq	r1, [r4, #0]
 800b99c:	6054      	str	r4, [r2, #4]
 800b99e:	e7ca      	b.n	800b936 <_free_r+0x22>
 800b9a0:	bd38      	pop	{r3, r4, r5, pc}
 800b9a2:	bf00      	nop
 800b9a4:	240046b0 	.word	0x240046b0

0800b9a8 <sbrk_aligned>:
 800b9a8:	b570      	push	{r4, r5, r6, lr}
 800b9aa:	4e0f      	ldr	r6, [pc, #60]	@ (800b9e8 <sbrk_aligned+0x40>)
 800b9ac:	460c      	mov	r4, r1
 800b9ae:	6831      	ldr	r1, [r6, #0]
 800b9b0:	4605      	mov	r5, r0
 800b9b2:	b911      	cbnz	r1, 800b9ba <sbrk_aligned+0x12>
 800b9b4:	f000 f9d6 	bl	800bd64 <_sbrk_r>
 800b9b8:	6030      	str	r0, [r6, #0]
 800b9ba:	4621      	mov	r1, r4
 800b9bc:	4628      	mov	r0, r5
 800b9be:	f000 f9d1 	bl	800bd64 <_sbrk_r>
 800b9c2:	1c43      	adds	r3, r0, #1
 800b9c4:	d103      	bne.n	800b9ce <sbrk_aligned+0x26>
 800b9c6:	f04f 34ff 	mov.w	r4, #4294967295
 800b9ca:	4620      	mov	r0, r4
 800b9cc:	bd70      	pop	{r4, r5, r6, pc}
 800b9ce:	1cc4      	adds	r4, r0, #3
 800b9d0:	f024 0403 	bic.w	r4, r4, #3
 800b9d4:	42a0      	cmp	r0, r4
 800b9d6:	d0f8      	beq.n	800b9ca <sbrk_aligned+0x22>
 800b9d8:	1a21      	subs	r1, r4, r0
 800b9da:	4628      	mov	r0, r5
 800b9dc:	f000 f9c2 	bl	800bd64 <_sbrk_r>
 800b9e0:	3001      	adds	r0, #1
 800b9e2:	d1f2      	bne.n	800b9ca <sbrk_aligned+0x22>
 800b9e4:	e7ef      	b.n	800b9c6 <sbrk_aligned+0x1e>
 800b9e6:	bf00      	nop
 800b9e8:	240046ac 	.word	0x240046ac

0800b9ec <_malloc_r>:
 800b9ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9f0:	1ccd      	adds	r5, r1, #3
 800b9f2:	f025 0503 	bic.w	r5, r5, #3
 800b9f6:	3508      	adds	r5, #8
 800b9f8:	2d0c      	cmp	r5, #12
 800b9fa:	bf38      	it	cc
 800b9fc:	250c      	movcc	r5, #12
 800b9fe:	2d00      	cmp	r5, #0
 800ba00:	4606      	mov	r6, r0
 800ba02:	db01      	blt.n	800ba08 <_malloc_r+0x1c>
 800ba04:	42a9      	cmp	r1, r5
 800ba06:	d904      	bls.n	800ba12 <_malloc_r+0x26>
 800ba08:	230c      	movs	r3, #12
 800ba0a:	6033      	str	r3, [r6, #0]
 800ba0c:	2000      	movs	r0, #0
 800ba0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bae8 <_malloc_r+0xfc>
 800ba16:	f000 f869 	bl	800baec <__malloc_lock>
 800ba1a:	f8d8 3000 	ldr.w	r3, [r8]
 800ba1e:	461c      	mov	r4, r3
 800ba20:	bb44      	cbnz	r4, 800ba74 <_malloc_r+0x88>
 800ba22:	4629      	mov	r1, r5
 800ba24:	4630      	mov	r0, r6
 800ba26:	f7ff ffbf 	bl	800b9a8 <sbrk_aligned>
 800ba2a:	1c43      	adds	r3, r0, #1
 800ba2c:	4604      	mov	r4, r0
 800ba2e:	d158      	bne.n	800bae2 <_malloc_r+0xf6>
 800ba30:	f8d8 4000 	ldr.w	r4, [r8]
 800ba34:	4627      	mov	r7, r4
 800ba36:	2f00      	cmp	r7, #0
 800ba38:	d143      	bne.n	800bac2 <_malloc_r+0xd6>
 800ba3a:	2c00      	cmp	r4, #0
 800ba3c:	d04b      	beq.n	800bad6 <_malloc_r+0xea>
 800ba3e:	6823      	ldr	r3, [r4, #0]
 800ba40:	4639      	mov	r1, r7
 800ba42:	4630      	mov	r0, r6
 800ba44:	eb04 0903 	add.w	r9, r4, r3
 800ba48:	f000 f98c 	bl	800bd64 <_sbrk_r>
 800ba4c:	4581      	cmp	r9, r0
 800ba4e:	d142      	bne.n	800bad6 <_malloc_r+0xea>
 800ba50:	6821      	ldr	r1, [r4, #0]
 800ba52:	1a6d      	subs	r5, r5, r1
 800ba54:	4629      	mov	r1, r5
 800ba56:	4630      	mov	r0, r6
 800ba58:	f7ff ffa6 	bl	800b9a8 <sbrk_aligned>
 800ba5c:	3001      	adds	r0, #1
 800ba5e:	d03a      	beq.n	800bad6 <_malloc_r+0xea>
 800ba60:	6823      	ldr	r3, [r4, #0]
 800ba62:	442b      	add	r3, r5
 800ba64:	6023      	str	r3, [r4, #0]
 800ba66:	f8d8 3000 	ldr.w	r3, [r8]
 800ba6a:	685a      	ldr	r2, [r3, #4]
 800ba6c:	bb62      	cbnz	r2, 800bac8 <_malloc_r+0xdc>
 800ba6e:	f8c8 7000 	str.w	r7, [r8]
 800ba72:	e00f      	b.n	800ba94 <_malloc_r+0xa8>
 800ba74:	6822      	ldr	r2, [r4, #0]
 800ba76:	1b52      	subs	r2, r2, r5
 800ba78:	d420      	bmi.n	800babc <_malloc_r+0xd0>
 800ba7a:	2a0b      	cmp	r2, #11
 800ba7c:	d917      	bls.n	800baae <_malloc_r+0xc2>
 800ba7e:	1961      	adds	r1, r4, r5
 800ba80:	42a3      	cmp	r3, r4
 800ba82:	6025      	str	r5, [r4, #0]
 800ba84:	bf18      	it	ne
 800ba86:	6059      	strne	r1, [r3, #4]
 800ba88:	6863      	ldr	r3, [r4, #4]
 800ba8a:	bf08      	it	eq
 800ba8c:	f8c8 1000 	streq.w	r1, [r8]
 800ba90:	5162      	str	r2, [r4, r5]
 800ba92:	604b      	str	r3, [r1, #4]
 800ba94:	4630      	mov	r0, r6
 800ba96:	f000 f82f 	bl	800baf8 <__malloc_unlock>
 800ba9a:	f104 000b 	add.w	r0, r4, #11
 800ba9e:	1d23      	adds	r3, r4, #4
 800baa0:	f020 0007 	bic.w	r0, r0, #7
 800baa4:	1ac2      	subs	r2, r0, r3
 800baa6:	bf1c      	itt	ne
 800baa8:	1a1b      	subne	r3, r3, r0
 800baaa:	50a3      	strne	r3, [r4, r2]
 800baac:	e7af      	b.n	800ba0e <_malloc_r+0x22>
 800baae:	6862      	ldr	r2, [r4, #4]
 800bab0:	42a3      	cmp	r3, r4
 800bab2:	bf0c      	ite	eq
 800bab4:	f8c8 2000 	streq.w	r2, [r8]
 800bab8:	605a      	strne	r2, [r3, #4]
 800baba:	e7eb      	b.n	800ba94 <_malloc_r+0xa8>
 800babc:	4623      	mov	r3, r4
 800babe:	6864      	ldr	r4, [r4, #4]
 800bac0:	e7ae      	b.n	800ba20 <_malloc_r+0x34>
 800bac2:	463c      	mov	r4, r7
 800bac4:	687f      	ldr	r7, [r7, #4]
 800bac6:	e7b6      	b.n	800ba36 <_malloc_r+0x4a>
 800bac8:	461a      	mov	r2, r3
 800baca:	685b      	ldr	r3, [r3, #4]
 800bacc:	42a3      	cmp	r3, r4
 800bace:	d1fb      	bne.n	800bac8 <_malloc_r+0xdc>
 800bad0:	2300      	movs	r3, #0
 800bad2:	6053      	str	r3, [r2, #4]
 800bad4:	e7de      	b.n	800ba94 <_malloc_r+0xa8>
 800bad6:	230c      	movs	r3, #12
 800bad8:	6033      	str	r3, [r6, #0]
 800bada:	4630      	mov	r0, r6
 800badc:	f000 f80c 	bl	800baf8 <__malloc_unlock>
 800bae0:	e794      	b.n	800ba0c <_malloc_r+0x20>
 800bae2:	6005      	str	r5, [r0, #0]
 800bae4:	e7d6      	b.n	800ba94 <_malloc_r+0xa8>
 800bae6:	bf00      	nop
 800bae8:	240046b0 	.word	0x240046b0

0800baec <__malloc_lock>:
 800baec:	4801      	ldr	r0, [pc, #4]	@ (800baf4 <__malloc_lock+0x8>)
 800baee:	f7ff bf00 	b.w	800b8f2 <__retarget_lock_acquire_recursive>
 800baf2:	bf00      	nop
 800baf4:	240046a8 	.word	0x240046a8

0800baf8 <__malloc_unlock>:
 800baf8:	4801      	ldr	r0, [pc, #4]	@ (800bb00 <__malloc_unlock+0x8>)
 800bafa:	f7ff befb 	b.w	800b8f4 <__retarget_lock_release_recursive>
 800bafe:	bf00      	nop
 800bb00:	240046a8 	.word	0x240046a8

0800bb04 <__sflush_r>:
 800bb04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bb08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb0c:	0716      	lsls	r6, r2, #28
 800bb0e:	4605      	mov	r5, r0
 800bb10:	460c      	mov	r4, r1
 800bb12:	d454      	bmi.n	800bbbe <__sflush_r+0xba>
 800bb14:	684b      	ldr	r3, [r1, #4]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	dc02      	bgt.n	800bb20 <__sflush_r+0x1c>
 800bb1a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	dd48      	ble.n	800bbb2 <__sflush_r+0xae>
 800bb20:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bb22:	2e00      	cmp	r6, #0
 800bb24:	d045      	beq.n	800bbb2 <__sflush_r+0xae>
 800bb26:	2300      	movs	r3, #0
 800bb28:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bb2c:	682f      	ldr	r7, [r5, #0]
 800bb2e:	6a21      	ldr	r1, [r4, #32]
 800bb30:	602b      	str	r3, [r5, #0]
 800bb32:	d030      	beq.n	800bb96 <__sflush_r+0x92>
 800bb34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bb36:	89a3      	ldrh	r3, [r4, #12]
 800bb38:	0759      	lsls	r1, r3, #29
 800bb3a:	d505      	bpl.n	800bb48 <__sflush_r+0x44>
 800bb3c:	6863      	ldr	r3, [r4, #4]
 800bb3e:	1ad2      	subs	r2, r2, r3
 800bb40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bb42:	b10b      	cbz	r3, 800bb48 <__sflush_r+0x44>
 800bb44:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bb46:	1ad2      	subs	r2, r2, r3
 800bb48:	2300      	movs	r3, #0
 800bb4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bb4c:	6a21      	ldr	r1, [r4, #32]
 800bb4e:	4628      	mov	r0, r5
 800bb50:	47b0      	blx	r6
 800bb52:	1c43      	adds	r3, r0, #1
 800bb54:	89a3      	ldrh	r3, [r4, #12]
 800bb56:	d106      	bne.n	800bb66 <__sflush_r+0x62>
 800bb58:	6829      	ldr	r1, [r5, #0]
 800bb5a:	291d      	cmp	r1, #29
 800bb5c:	d82b      	bhi.n	800bbb6 <__sflush_r+0xb2>
 800bb5e:	4a2a      	ldr	r2, [pc, #168]	@ (800bc08 <__sflush_r+0x104>)
 800bb60:	410a      	asrs	r2, r1
 800bb62:	07d6      	lsls	r6, r2, #31
 800bb64:	d427      	bmi.n	800bbb6 <__sflush_r+0xb2>
 800bb66:	2200      	movs	r2, #0
 800bb68:	6062      	str	r2, [r4, #4]
 800bb6a:	04d9      	lsls	r1, r3, #19
 800bb6c:	6922      	ldr	r2, [r4, #16]
 800bb6e:	6022      	str	r2, [r4, #0]
 800bb70:	d504      	bpl.n	800bb7c <__sflush_r+0x78>
 800bb72:	1c42      	adds	r2, r0, #1
 800bb74:	d101      	bne.n	800bb7a <__sflush_r+0x76>
 800bb76:	682b      	ldr	r3, [r5, #0]
 800bb78:	b903      	cbnz	r3, 800bb7c <__sflush_r+0x78>
 800bb7a:	6560      	str	r0, [r4, #84]	@ 0x54
 800bb7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bb7e:	602f      	str	r7, [r5, #0]
 800bb80:	b1b9      	cbz	r1, 800bbb2 <__sflush_r+0xae>
 800bb82:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bb86:	4299      	cmp	r1, r3
 800bb88:	d002      	beq.n	800bb90 <__sflush_r+0x8c>
 800bb8a:	4628      	mov	r0, r5
 800bb8c:	f7ff fec2 	bl	800b914 <_free_r>
 800bb90:	2300      	movs	r3, #0
 800bb92:	6363      	str	r3, [r4, #52]	@ 0x34
 800bb94:	e00d      	b.n	800bbb2 <__sflush_r+0xae>
 800bb96:	2301      	movs	r3, #1
 800bb98:	4628      	mov	r0, r5
 800bb9a:	47b0      	blx	r6
 800bb9c:	4602      	mov	r2, r0
 800bb9e:	1c50      	adds	r0, r2, #1
 800bba0:	d1c9      	bne.n	800bb36 <__sflush_r+0x32>
 800bba2:	682b      	ldr	r3, [r5, #0]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d0c6      	beq.n	800bb36 <__sflush_r+0x32>
 800bba8:	2b1d      	cmp	r3, #29
 800bbaa:	d001      	beq.n	800bbb0 <__sflush_r+0xac>
 800bbac:	2b16      	cmp	r3, #22
 800bbae:	d11e      	bne.n	800bbee <__sflush_r+0xea>
 800bbb0:	602f      	str	r7, [r5, #0]
 800bbb2:	2000      	movs	r0, #0
 800bbb4:	e022      	b.n	800bbfc <__sflush_r+0xf8>
 800bbb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbba:	b21b      	sxth	r3, r3
 800bbbc:	e01b      	b.n	800bbf6 <__sflush_r+0xf2>
 800bbbe:	690f      	ldr	r7, [r1, #16]
 800bbc0:	2f00      	cmp	r7, #0
 800bbc2:	d0f6      	beq.n	800bbb2 <__sflush_r+0xae>
 800bbc4:	0793      	lsls	r3, r2, #30
 800bbc6:	680e      	ldr	r6, [r1, #0]
 800bbc8:	bf08      	it	eq
 800bbca:	694b      	ldreq	r3, [r1, #20]
 800bbcc:	600f      	str	r7, [r1, #0]
 800bbce:	bf18      	it	ne
 800bbd0:	2300      	movne	r3, #0
 800bbd2:	eba6 0807 	sub.w	r8, r6, r7
 800bbd6:	608b      	str	r3, [r1, #8]
 800bbd8:	f1b8 0f00 	cmp.w	r8, #0
 800bbdc:	dde9      	ble.n	800bbb2 <__sflush_r+0xae>
 800bbde:	6a21      	ldr	r1, [r4, #32]
 800bbe0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bbe2:	4643      	mov	r3, r8
 800bbe4:	463a      	mov	r2, r7
 800bbe6:	4628      	mov	r0, r5
 800bbe8:	47b0      	blx	r6
 800bbea:	2800      	cmp	r0, #0
 800bbec:	dc08      	bgt.n	800bc00 <__sflush_r+0xfc>
 800bbee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbf6:	81a3      	strh	r3, [r4, #12]
 800bbf8:	f04f 30ff 	mov.w	r0, #4294967295
 800bbfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc00:	4407      	add	r7, r0
 800bc02:	eba8 0800 	sub.w	r8, r8, r0
 800bc06:	e7e7      	b.n	800bbd8 <__sflush_r+0xd4>
 800bc08:	dfbffffe 	.word	0xdfbffffe

0800bc0c <_fflush_r>:
 800bc0c:	b538      	push	{r3, r4, r5, lr}
 800bc0e:	690b      	ldr	r3, [r1, #16]
 800bc10:	4605      	mov	r5, r0
 800bc12:	460c      	mov	r4, r1
 800bc14:	b913      	cbnz	r3, 800bc1c <_fflush_r+0x10>
 800bc16:	2500      	movs	r5, #0
 800bc18:	4628      	mov	r0, r5
 800bc1a:	bd38      	pop	{r3, r4, r5, pc}
 800bc1c:	b118      	cbz	r0, 800bc26 <_fflush_r+0x1a>
 800bc1e:	6a03      	ldr	r3, [r0, #32]
 800bc20:	b90b      	cbnz	r3, 800bc26 <_fflush_r+0x1a>
 800bc22:	f7ff fc2b 	bl	800b47c <__sinit>
 800bc26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d0f3      	beq.n	800bc16 <_fflush_r+0xa>
 800bc2e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bc30:	07d0      	lsls	r0, r2, #31
 800bc32:	d404      	bmi.n	800bc3e <_fflush_r+0x32>
 800bc34:	0599      	lsls	r1, r3, #22
 800bc36:	d402      	bmi.n	800bc3e <_fflush_r+0x32>
 800bc38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc3a:	f7ff fe5a 	bl	800b8f2 <__retarget_lock_acquire_recursive>
 800bc3e:	4628      	mov	r0, r5
 800bc40:	4621      	mov	r1, r4
 800bc42:	f7ff ff5f 	bl	800bb04 <__sflush_r>
 800bc46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bc48:	07da      	lsls	r2, r3, #31
 800bc4a:	4605      	mov	r5, r0
 800bc4c:	d4e4      	bmi.n	800bc18 <_fflush_r+0xc>
 800bc4e:	89a3      	ldrh	r3, [r4, #12]
 800bc50:	059b      	lsls	r3, r3, #22
 800bc52:	d4e1      	bmi.n	800bc18 <_fflush_r+0xc>
 800bc54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc56:	f7ff fe4d 	bl	800b8f4 <__retarget_lock_release_recursive>
 800bc5a:	e7dd      	b.n	800bc18 <_fflush_r+0xc>

0800bc5c <__swhatbuf_r>:
 800bc5c:	b570      	push	{r4, r5, r6, lr}
 800bc5e:	460c      	mov	r4, r1
 800bc60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc64:	2900      	cmp	r1, #0
 800bc66:	b096      	sub	sp, #88	@ 0x58
 800bc68:	4615      	mov	r5, r2
 800bc6a:	461e      	mov	r6, r3
 800bc6c:	da0d      	bge.n	800bc8a <__swhatbuf_r+0x2e>
 800bc6e:	89a3      	ldrh	r3, [r4, #12]
 800bc70:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bc74:	f04f 0100 	mov.w	r1, #0
 800bc78:	bf14      	ite	ne
 800bc7a:	2340      	movne	r3, #64	@ 0x40
 800bc7c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bc80:	2000      	movs	r0, #0
 800bc82:	6031      	str	r1, [r6, #0]
 800bc84:	602b      	str	r3, [r5, #0]
 800bc86:	b016      	add	sp, #88	@ 0x58
 800bc88:	bd70      	pop	{r4, r5, r6, pc}
 800bc8a:	466a      	mov	r2, sp
 800bc8c:	f000 f848 	bl	800bd20 <_fstat_r>
 800bc90:	2800      	cmp	r0, #0
 800bc92:	dbec      	blt.n	800bc6e <__swhatbuf_r+0x12>
 800bc94:	9901      	ldr	r1, [sp, #4]
 800bc96:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bc9a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bc9e:	4259      	negs	r1, r3
 800bca0:	4159      	adcs	r1, r3
 800bca2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bca6:	e7eb      	b.n	800bc80 <__swhatbuf_r+0x24>

0800bca8 <__smakebuf_r>:
 800bca8:	898b      	ldrh	r3, [r1, #12]
 800bcaa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bcac:	079d      	lsls	r5, r3, #30
 800bcae:	4606      	mov	r6, r0
 800bcb0:	460c      	mov	r4, r1
 800bcb2:	d507      	bpl.n	800bcc4 <__smakebuf_r+0x1c>
 800bcb4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bcb8:	6023      	str	r3, [r4, #0]
 800bcba:	6123      	str	r3, [r4, #16]
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	6163      	str	r3, [r4, #20]
 800bcc0:	b003      	add	sp, #12
 800bcc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bcc4:	ab01      	add	r3, sp, #4
 800bcc6:	466a      	mov	r2, sp
 800bcc8:	f7ff ffc8 	bl	800bc5c <__swhatbuf_r>
 800bccc:	9f00      	ldr	r7, [sp, #0]
 800bcce:	4605      	mov	r5, r0
 800bcd0:	4639      	mov	r1, r7
 800bcd2:	4630      	mov	r0, r6
 800bcd4:	f7ff fe8a 	bl	800b9ec <_malloc_r>
 800bcd8:	b948      	cbnz	r0, 800bcee <__smakebuf_r+0x46>
 800bcda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcde:	059a      	lsls	r2, r3, #22
 800bce0:	d4ee      	bmi.n	800bcc0 <__smakebuf_r+0x18>
 800bce2:	f023 0303 	bic.w	r3, r3, #3
 800bce6:	f043 0302 	orr.w	r3, r3, #2
 800bcea:	81a3      	strh	r3, [r4, #12]
 800bcec:	e7e2      	b.n	800bcb4 <__smakebuf_r+0xc>
 800bcee:	89a3      	ldrh	r3, [r4, #12]
 800bcf0:	6020      	str	r0, [r4, #0]
 800bcf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bcf6:	81a3      	strh	r3, [r4, #12]
 800bcf8:	9b01      	ldr	r3, [sp, #4]
 800bcfa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bcfe:	b15b      	cbz	r3, 800bd18 <__smakebuf_r+0x70>
 800bd00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd04:	4630      	mov	r0, r6
 800bd06:	f000 f81d 	bl	800bd44 <_isatty_r>
 800bd0a:	b128      	cbz	r0, 800bd18 <__smakebuf_r+0x70>
 800bd0c:	89a3      	ldrh	r3, [r4, #12]
 800bd0e:	f023 0303 	bic.w	r3, r3, #3
 800bd12:	f043 0301 	orr.w	r3, r3, #1
 800bd16:	81a3      	strh	r3, [r4, #12]
 800bd18:	89a3      	ldrh	r3, [r4, #12]
 800bd1a:	431d      	orrs	r5, r3
 800bd1c:	81a5      	strh	r5, [r4, #12]
 800bd1e:	e7cf      	b.n	800bcc0 <__smakebuf_r+0x18>

0800bd20 <_fstat_r>:
 800bd20:	b538      	push	{r3, r4, r5, lr}
 800bd22:	4d07      	ldr	r5, [pc, #28]	@ (800bd40 <_fstat_r+0x20>)
 800bd24:	2300      	movs	r3, #0
 800bd26:	4604      	mov	r4, r0
 800bd28:	4608      	mov	r0, r1
 800bd2a:	4611      	mov	r1, r2
 800bd2c:	602b      	str	r3, [r5, #0]
 800bd2e:	f7f5 fa80 	bl	8001232 <_fstat>
 800bd32:	1c43      	adds	r3, r0, #1
 800bd34:	d102      	bne.n	800bd3c <_fstat_r+0x1c>
 800bd36:	682b      	ldr	r3, [r5, #0]
 800bd38:	b103      	cbz	r3, 800bd3c <_fstat_r+0x1c>
 800bd3a:	6023      	str	r3, [r4, #0]
 800bd3c:	bd38      	pop	{r3, r4, r5, pc}
 800bd3e:	bf00      	nop
 800bd40:	240046a4 	.word	0x240046a4

0800bd44 <_isatty_r>:
 800bd44:	b538      	push	{r3, r4, r5, lr}
 800bd46:	4d06      	ldr	r5, [pc, #24]	@ (800bd60 <_isatty_r+0x1c>)
 800bd48:	2300      	movs	r3, #0
 800bd4a:	4604      	mov	r4, r0
 800bd4c:	4608      	mov	r0, r1
 800bd4e:	602b      	str	r3, [r5, #0]
 800bd50:	f7f5 fa7f 	bl	8001252 <_isatty>
 800bd54:	1c43      	adds	r3, r0, #1
 800bd56:	d102      	bne.n	800bd5e <_isatty_r+0x1a>
 800bd58:	682b      	ldr	r3, [r5, #0]
 800bd5a:	b103      	cbz	r3, 800bd5e <_isatty_r+0x1a>
 800bd5c:	6023      	str	r3, [r4, #0]
 800bd5e:	bd38      	pop	{r3, r4, r5, pc}
 800bd60:	240046a4 	.word	0x240046a4

0800bd64 <_sbrk_r>:
 800bd64:	b538      	push	{r3, r4, r5, lr}
 800bd66:	4d06      	ldr	r5, [pc, #24]	@ (800bd80 <_sbrk_r+0x1c>)
 800bd68:	2300      	movs	r3, #0
 800bd6a:	4604      	mov	r4, r0
 800bd6c:	4608      	mov	r0, r1
 800bd6e:	602b      	str	r3, [r5, #0]
 800bd70:	f7f5 fa88 	bl	8001284 <_sbrk>
 800bd74:	1c43      	adds	r3, r0, #1
 800bd76:	d102      	bne.n	800bd7e <_sbrk_r+0x1a>
 800bd78:	682b      	ldr	r3, [r5, #0]
 800bd7a:	b103      	cbz	r3, 800bd7e <_sbrk_r+0x1a>
 800bd7c:	6023      	str	r3, [r4, #0]
 800bd7e:	bd38      	pop	{r3, r4, r5, pc}
 800bd80:	240046a4 	.word	0x240046a4

0800bd84 <_init>:
 800bd84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd86:	bf00      	nop
 800bd88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd8a:	bc08      	pop	{r3}
 800bd8c:	469e      	mov	lr, r3
 800bd8e:	4770      	bx	lr

0800bd90 <_fini>:
 800bd90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd92:	bf00      	nop
 800bd94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd96:	bc08      	pop	{r3}
 800bd98:	469e      	mov	lr, r3
 800bd9a:	4770      	bx	lr
